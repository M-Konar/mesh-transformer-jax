<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][]. Your code should pass these tests:

assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8
assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12
assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16
[BEGIN]
R = 3

C = 3

def min_cost(cost, m, n): 

	tc = [[0 for x in range(C)] for x in range(R)] 

	tc[0][0] = cost[0][0] 

	for i in range(1, m+1): 

		tc[i][0] = tc[i-1][0] + cost[i][0] 

	for j in range(1, n+1): 

		tc[0][j] = tc[0][j-1] + cost[0][j] 

	for i in range(1, m+1): 

		for j in range(1, n+1): 

			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 

	return tc[m][n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the similar elements from the given two tuple lists. Your code should pass these tests:

assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)
assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)
assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)
[BEGIN]
def similar_elements(test_tup1, test_tup2):

  res = tuple(set(test_tup1) & set(test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to identify non-prime numbers. Your code should pass these tests:

assert is_not_prime(2) == False
assert is_not_prime(10) == True
assert is_not_prime(35) == True
[BEGIN]
import math

def is_not_prime(n):

    result = False

    for i in range(2,int(math.sqrt(n)) + 1):

        if n % i == 0:

            result = True

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest integers from a given list of numbers using heap queue algorithm. Your code should pass these tests:

assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] 
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] 
assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]
[BEGIN]
import heapq as hq

def heap_queue_largest(nums,n):

  largest_nums = hq.nlargest(n, nums)

  return largest_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. Your code should pass these tests:

assert count_ways(2) == 3
assert count_ways(8) == 153
assert count_ways(12) == 2131
[BEGIN]
def count_ways(n): 

	A = [0] * (n + 1) 

	B = [0] * (n + 1) 

	A[0] = 1

	A[1] = 0

	B[0] = 0

	B[1] = 1

	for i in range(2, n+1): 

		A[i] = A[i - 2] + 2 * B[i - 1] 

		B[i] = A[i - 1] + B[i - 2] 

	return A[n] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the two numbers differ at one bit position only or not. Your code should pass these tests:

assert differ_At_One_Bit_Pos(13,9) == True
assert differ_At_One_Bit_Pos(15,8) == False
assert differ_At_One_Bit_Pos(2,4) == False
[BEGIN]
def is_Power_Of_Two (x): 

    return x and (not(x & (x - 1))) 

def differ_At_One_Bit_Pos(a,b): 

    return is_Power_Of_Two(a ^ b)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all words which are at least 4 characters long in a string by using regex. Your code should pass these tests:

assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']
assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']
assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']
[BEGIN]
import re

def find_char_long(text):

  return (re.findall(r"\b\w{4,}\b", text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find squares of individual elements in a list using lambda function. Your code should pass these tests:

assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
assert square_nums([10,20,30])==([100,400,900])
assert square_nums([12,15])==([144,225])
[BEGIN]
def square_nums(nums):

 square_nums = list(map(lambda x: x ** 2, nums))

 return square_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum number of rotations required to get the same string. Your code should pass these tests:

assert find_Rotations("aaaa") == 1
assert find_Rotations("ab") == 2
assert find_Rotations("abc") == 3
[BEGIN]
def find_Rotations(str): 

    tmp = str + str

    n = len(str) 

    for i in range(1,n + 1): 

        substring = tmp[i: i+n] 

        if (str == substring): 

            return i 

    return n 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the n smallest items from a dataset. Your code should pass these tests:

assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]
assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]
assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]
[BEGIN]
import heapq

def small_nnum(list1,n):

  smallest=heapq.nsmallest(n,list1)

  return smallest
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove first and last occurrence of a given character from the string. Your code should pass these tests:

assert remove_Occ("hello","l") == "heo"
assert remove_Occ("abcda","a") == "bcd"
assert remove_Occ("PHP","P") == "H"
[BEGIN]
def remove_Occ(s,ch): 

    for i in range(len(s)): 

        if (s[i] == ch): 

            s = s[0 : i] + s[i + 1:] 

            break

    for i in range(len(s) - 1,-1,-1):  

        if (s[i] == ch): 

            s = s[0 : i] + s[i + 1:] 

            break

    return s 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a given matrix in ascending order according to the sum of its rows. Your code should pass these tests:

assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]
assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]
[BEGIN]
def sort_matrix(M):

    result = sorted(M, key=sum)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the most common words in a dictionary. Your code should pass these tests:

assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',"black",'pink','green','green','pink','green','pink','white','orange',"orange",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]
assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]
assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]
[BEGIN]
from collections import Counter

def count_common(words):

  word_counts = Counter(words)

  top_four = word_counts.most_common(4)

  return (top_four)


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the volume of a triangular prism. Your code should pass these tests:

assert find_Volume(10,8,6) == 240
assert find_Volume(3,2,2) == 6
assert find_Volume(1,2,1) == 1
[BEGIN]
def find_Volume(l,b,h) : 

    return ((l * b * h) / 2) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to split a string at lowercase letters. Your code should pass these tests:

assert split_lowerstring("AbCd")==['bC','d']
assert split_lowerstring("Python")==['y', 't', 'h', 'o', 'n']
assert split_lowerstring("Programming")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']
[BEGIN]
import re

def split_lowerstring(text):

 return (re.findall('[a-z][^a-z]*', text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find sequences of lowercase letters joined with an underscore. Your code should pass these tests:

assert text_lowercase_underscore("aab_cbbbc")==('Found a match!')
assert text_lowercase_underscore("aab_Abbbc")==('Not matched!')
assert text_lowercase_underscore("Aaab_abbbc")==('Not matched!')
[BEGIN]
import re

def text_lowercase_underscore(text):

        patterns = '^[a-z]+_[a-z]+$'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the perimeter of a square. Your code should pass these tests:

assert square_perimeter(10)==40
assert square_perimeter(5)==20
assert square_perimeter(4)==16
[BEGIN]
def square_perimeter(a):

  perimeter=4*a

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove characters from the first string which are present in the second string. Your code should pass these tests:

assert remove_dirty_chars("probasscurve", "pros") == 'bacuve'
assert remove_dirty_chars("digitalindia", "talent") == 'digiidi'
assert remove_dirty_chars("exoticmiles", "toxic") == 'emles' 
[BEGIN]
NO_OF_CHARS = 256

def str_to_list(string): 

	temp = [] 

	for x in string: 

		temp.append(x) 

	return temp 

def lst_to_string(List): 

	return ''.join(List) 

def get_char_count_array(string): 

	count = [0] * NO_OF_CHARS 

	for i in string: 

		count[ord(i)] += 1

	return count 

def remove_dirty_chars(string, second_string): 

	count = get_char_count_array(second_string) 

	ip_ind = 0

	res_ind = 0

	temp = '' 

	str_list = str_to_list(string) 

	while ip_ind != len(str_list): 

		temp = str_list[ip_ind] 

		if count[ord(temp)] == 0: 

			str_list[res_ind] = str_list[ip_ind] 

			res_ind += 1

		ip_ind+=1

	return lst_to_string(str_list[0:res_ind]) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find whether a given array of integers contains any duplicate element. Your code should pass these tests:

assert test_duplicate(([1,2,3,4,5]))==False
assert test_duplicate(([1,2,3,4, 4]))==True
assert test_duplicate([1,1,2,2,3,3,4,4,5])==True
[BEGIN]
def test_duplicate(arraynums):

    nums_set = set(arraynums)    

    return len(arraynums) != len(nums_set)     
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given number is woodball or not. Your code should pass these tests:

assert is_woodall(383) == True
assert is_woodall(254) == False
assert is_woodall(200) == False
[BEGIN]
def is_woodall(x): 

	if (x % 2 == 0): 

		return False

	if (x == 1): 

		return True

	x = x + 1 

	p = 0

	while (x % 2 == 0): 

		x = x/2

		p = p + 1

		if (p == x): 

			return True

	return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find m number of multiples of n. Your code should pass these tests:

assert multiples_of_num(4,3)== [3,6,9,12]
assert multiples_of_num(2,5)== [5,10]
assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]
[BEGIN]
def multiples_of_num(m,n): 

    multiples_of_num= list(range(n,(m+1)*n, n)) 

    return list(multiples_of_num)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the first duplicate element in a given array of integers. Your code should pass these tests:

assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4
assert find_first_duplicate([1, 2, 3, 4])==-1
assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1
[BEGIN]
def find_first_duplicate(nums):

    num_set = set()

    no_duplicate = -1



    for i in range(len(nums)):



        if nums[i] in num_set:

            return nums[i]

        else:

            num_set.add(nums[i])



    return no_duplicate
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum sum of elements of list in a list of lists. Your code should pass these tests:

assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33
assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6
assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19
[BEGIN]
def maximum_Sum(list1): 

    maxi = -100000

    for x in list1: 

        sum = 0 

        for y in x: 

            sum+= y      

        maxi = max(sum,maxi)     

    return maxi 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given binary number to its decimal equivalent. Your code should pass these tests:

assert binary_to_decimal(100) == 4
assert binary_to_decimal(1011) == 11
assert binary_to_decimal(1101101) == 109
[BEGIN]
def binary_to_decimal(binary): 

    binary1 = binary 

    decimal, i, n = 0, 0, 0

    while(binary != 0): 

        dec = binary % 10

        decimal = decimal + dec * pow(2, i) 

        binary = binary//10

        i += 1

    return (decimal)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the product of non-repeated elements in a given array. Your code should pass these tests:

assert find_Product([1,1,2,3],4) == 6
assert find_Product([1,2,3,1,1],5) == 6
assert find_Product([1,1,4,5,6],5) == 120
[BEGIN]
def find_Product(arr,n): 

    arr.sort() 

    prod = 1

    for i in range(0,n,1): 

        if (arr[i - 1] != arr[i]): 

            prod = prod * arr[i] 

    return prod; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given tuple list has all k elements. Your code should pass these tests:

assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True
assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True
assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False
[BEGIN]
def check_k_elements(test_list, K):

  res = True

  for tup in test_list:

    for ele in tup:

      if ele != K:

        res = False

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove all digits from a list of strings. Your code should pass these tests:

assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']
assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']
assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']
[BEGIN]
import re  

def remove(list): 

    pattern = '[0-9]'

    list = [re.sub(pattern, '', i) for i in list] 

    return list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find binomial co-efficient. Your code should pass these tests:

assert binomial_Coeff(5,2) == 10
assert binomial_Coeff(4,3) == 4
assert binomial_Coeff(3,2) == 3
[BEGIN]
def binomial_Coeff(n,k): 

    if k > n : 

       return 0

    if k==0 or k ==n : 

        return 1 

    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the element occurring odd number of times. Your code should pass these tests:

assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1
assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3
assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5
[BEGIN]
def get_Odd_Occurrence(arr,arr_size):   

    for i in range(0,arr_size): 

        count = 0

        for j in range(0,arr_size): 

            if arr[i] == arr[j]: 

                count+=1     

        if (count % 2 != 0): 

            return arr[i]     

    return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count all the substrings starting and ending with same characters. Your code should pass these tests:

assert count_Substring_With_Equal_Ends("abc") == 3
assert count_Substring_With_Equal_Ends("abcda") == 6
assert count_Substring_With_Equal_Ends("ab") == 2
[BEGIN]
def check_Equality(s): 

    return (ord(s[0]) == ord(s[len(s) - 1])); 

def count_Substring_With_Equal_Ends(s): 

    result = 0; 

    n = len(s); 

    for i in range(n): 

        for j in range(1,n-i+1):  

            if (check_Equality(s[i:i+j])): 

                result+=1; 

    return result; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm. Your code should pass these tests:

assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]
assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]
assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]
[BEGIN]
def func(nums, k):

    import collections

    d = collections.defaultdict(int)

    for row in nums:

        for i in row:

            d[i] += 1

    temp = []

    import heapq

    for key, v in d.items():

        if len(temp) < k:

            temp.append((v, key))

            if len(temp) == k:

                heapq.heapify(temp)

        else:

            if v > temp[0][0]:

                heapq.heappop(temp)

                heapq.heappush(temp, (v, key))

    result = []

    while temp:

        v, key = heapq.heappop(temp)

        result.append(key)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the largest prime factor of a given number. Your code should pass these tests:

assert max_Prime_Factors(15) == 5
assert max_Prime_Factors(6) == 3
assert max_Prime_Factors(2) == 2
[BEGIN]
import math 

def max_Prime_Factors (n): 

    maxPrime = -1 

    while n%2 == 0: 

        maxPrime = 2

        n >>= 1    

    for i in range(3,int(math.sqrt(n))+1,2): 

        while n % i == 0: 

            maxPrime = i 

            n = n / i 

    if n > 2: 

        maxPrime = n  

    return int(maxPrime)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert a decimal number to binary number. Your code should pass these tests:

assert decimal_To_Binary(10) == 1010
assert decimal_To_Binary(1) == 1
assert decimal_To_Binary(20) == 10100
[BEGIN]
def decimal_To_Binary(N): 

    B_Number = 0

    cnt = 0

    while (N != 0): 

        rem = N % 2

        c = pow(10,cnt)  

        B_Number += rem*c  

        N //= 2 

        cnt += 1

    return B_Number  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the missing number in a sorted array. Your code should pass these tests:

assert find_missing([1,2,3,5],4) == 4
assert find_missing([1,3,4,5],4) == 2
assert find_missing([1,2,3,5,6,7],5) == 4
[BEGIN]
def find_missing(ar,N): 

    l = 0

    r = N - 1

    while (l <= r):  

        mid = (l + r) / 2

        mid= int (mid) 

        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 

            return (mid + 1)  

        elif (ar[mid] != mid + 1): 

            r = mid - 1 

        else: 

            l = mid + 1

    return (-1) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n-th rectangular number. Your code should pass these tests:

assert find_rect_num(4) == 20
assert find_rect_num(5) == 30
assert find_rect_num(6) == 42
[BEGIN]
def find_rect_num(n):

  return n*(n + 1) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the nth digit in the proper fraction of two given numbers. Your code should pass these tests:

assert find_Nth_Digit(1,2,1) == 5
assert find_Nth_Digit(3,5,1) == 6
assert find_Nth_Digit(5,6,5) == 3
[BEGIN]
def find_Nth_Digit(p,q,N) :  

    while (N > 0) : 

        N -= 1;  

        p *= 10;  

        res = p // q;  

        p %= q;  

    return res;  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a given mixed list of integers and strings. Your code should pass these tests:

assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
[BEGIN]
def sort_mixed_list(mixed_list):

    int_part = sorted([i for i in mixed_list if type(i) is int])

    str_part = sorted([i for i in mixed_list if type(i) is str])

    return int_part + str_part
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the division of first even and odd number of a given list. Your code should pass these tests:

assert div_even_odd([1,3,5,7,4,1,6,8])==4
assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2
assert div_even_odd([1,5,7,9,10])==10
[BEGIN]
def div_even_odd(list1):

    first_even = next((el for el in list1 if el%2==0),-1)

    first_odd = next((el for el in list1 if el%2!=0),-1)

    return (first_even/first_odd)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different. Your code should pass these tests:

assert rearange_string("aab")==('aba')
assert rearange_string("aabb")==('abab')
assert rearange_string("abccdd")==('cdabcd')
[BEGIN]
import heapq

from collections import Counter

def rearange_string(S):

    ctr = Counter(S)

    heap = [(-value, key) for key, value in ctr.items()]

    heapq.heapify(heap)

    if (-heap[0][0]) * 2 > len(S) + 1: 

        return ""

    ans = []

    while len(heap) >= 2:

        nct1, char1 = heapq.heappop(heap)

        nct2, char2 = heapq.heappop(heap)

        ans.extend([char1, char2])

        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))

        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))

    return "".join(ans) + (heap[0][1] if heap else "")
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find frequency of the elements in a given list of lists using collections module. Your code should pass these tests:

assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})
assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})
assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})
[BEGIN]
from collections import Counter

from itertools import chain

def freq_element(nums):

  result = Counter(chain.from_iterable(nums))

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to filter even numbers using lambda function. Your code should pass these tests:

assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]
assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]
assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]
[BEGIN]
def filter_evennumbers(nums):

 even_nums = list(filter(lambda x: x%2 == 0, nums))

 return even_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of repeated elements in a given array. Your code should pass these tests:

assert find_Sum([1,2,3,1,1,4,5,6],8) == 3
assert find_Sum([1,2,3,1,1],5) == 3
assert find_Sum([1,1,2],3) == 2
[BEGIN]
def find_Sum(arr,n): 

    return sum([x for x in arr if arr.count(x) > 1])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find sequences of lowercase letters joined with an underscore using regex. Your code should pass these tests:

assert text_match("aab_cbbbc") == 'Found a match!'
assert text_match("aab_Abbbc") == 'Not matched!'
assert text_match("Aaab_abbbc") == 'Not matched!'
[BEGIN]
import re

def text_match(text):

  patterns = '^[a-z]+_[a-z]+$'

  if re.search(patterns,  text):

    return ('Found a match!')

  else:

    return ('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a word at the beginning of a string. Your code should pass these tests:

assert text_match_string(" python")==('Not matched!')
assert text_match_string("python")==('Found a match!')
assert text_match_string("  lang")==('Not matched!')
[BEGIN]
import re

def text_match_string(text):

        patterns = '^\w+'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return 'Not matched!'
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the gcd of the given array elements. Your code should pass these tests:

assert get_gcd([2, 4, 6, 8, 16]) == 2
assert get_gcd([1, 2, 3]) == 1
assert get_gcd([2, 4, 6, 8]) == 2 
[BEGIN]
def find_gcd(x, y): 

	while(y): 

		x, y = y, x % y 

	return x 

def get_gcd(l):

  num1 = l[0]

  num2 = l[1]

  gcd = find_gcd(num1, num2)

  for i in range(2, len(l)):

    gcd = find_gcd(gcd, l[i])

  return gcd
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to determine whether all the numbers are different from each other are not. Your code should pass these tests:

assert test_distinct([1,5,7,9]) == True
assert test_distinct([2,4,5,5,7,9]) == False
assert test_distinct([1,2,3]) == True
[BEGIN]
def test_distinct(data):

  if len(data) == len(set(data)):

    return True

  else:

    return False;
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the last digit when factorial of a divides factorial of b. Your code should pass these tests:

assert compute_Last_Digit(2,4) == 2
assert compute_Last_Digit(6,8) == 6
assert compute_Last_Digit(1,2) == 2
[BEGIN]
def compute_Last_Digit(A,B): 

    variable = 1

    if (A == B): 

        return 1

    elif ((B - A) >= 5):  

        return 0

    else:   

        for i in range(A + 1,B + 1): 

            variable = (variable * (i % 10)) % 10

        return variable % 10
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to set all odd bits of a given number. Your code should pass these tests:

assert odd_bit_set_number(10) == 15
assert odd_bit_set_number(20) == 21
assert odd_bit_set_number(30) == 31
[BEGIN]
def odd_bit_set_number(n):

    count = 0;res = 0;temp = n

    while temp > 0:

        if count % 2 == 0:

            res |= (1 << count)

        count += 1

        temp >>= 1

    return (n | res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract every first or specified element from a given two-dimensional list. Your code should pass these tests:

assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]
[BEGIN]
def specified_element(nums, N):

    result = [i[N] for i in nums]

    return result

    
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the list with minimum length using lambda function. Your code should pass these tests:

assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])
assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])
[BEGIN]
def min_length_list(input_list):

    min_length = min(len(x) for x in input_list )  

    min_list = min(input_list, key = lambda i: len(i))

    return(min_length, min_list)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print check if the triangle is equilateral or not. Your code should pass these tests:

assert check_equilateral(6,8,12)==False 
assert check_equilateral(6,6,12)==False
assert check_equilateral(6,6,6)==True
[BEGIN]
def check_equilateral(x,y,z):

  if x == y == z:

	   return True

  else:

     return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to caluclate area of a parallelogram. Your code should pass these tests:

assert parallelogram_area(10,20)==200
assert parallelogram_area(15,20)==300
assert parallelogram_area(8,9)==72
[BEGIN]
def parallelogram_area(b,h):

  area=b*h

  return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the first and last characters of a given string are equal or not. Your code should pass these tests:

assert check_Equality("abcda") == "Equal"
assert check_Equality("ab") == "Not Equal"
assert check_Equality("mad") == "Not Equal"
[BEGIN]
def check_Equality(str):

  if (str[0] == str[-1]):  

    return ("Equal") 

  else:  

    return ("Not Equal") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given array by using counting sort. Your code should pass these tests:

assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]
assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]
assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]
[BEGIN]
def counting_sort(my_list):

    max_value = 0

    for i in range(len(my_list)):

        if my_list[i] > max_value:

            max_value = my_list[i]

    buckets = [0] * (max_value + 1)

    for i in my_list:

        buckets[i] += 1

    i = 0

    for j in range(max_value + 1):

         for a in range(buckets[j]):

             my_list[i] = j

             i += 1

    return my_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find t-nth term of geometric series. Your code should pass these tests:

assert tn_gp(1,5,2)==16
assert tn_gp(1,5,4)==256
assert tn_gp(2,6,3)==486
[BEGIN]
import math

def tn_gp(a,n,r):

  tn = a * (math.pow(r, n - 1))

  return tn
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check if a given number is one less than twice its reverse. Your code should pass these tests:

assert check(70) == False
assert check(23) == False
assert check(73) == True
[BEGIN]
def rev(num):    

    rev_num = 0

    while (num > 0):  

        rev_num = (rev_num * 10 + num % 10) 

        num = num // 10  

    return rev_num  

def check(n):    

    return (2 * rev(n) == n + 1)  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the largest number that can be formed with the given digits. Your code should pass these tests:

assert find_Max_Num([1,2,3],3) == 321
assert find_Max_Num([4,5,6,1],4) == 6541
assert find_Max_Num([1,2,3,9],4) == 9321
[BEGIN]
def find_Max_Num(arr,n) : 

    arr.sort(reverse = True) 

    num = arr[0] 

    for i in range(1,n) : 

        num = num * 10 + arr[i] 

    return num 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given two integers have opposite sign or not. Your code should pass these tests:

assert opposite_Signs(1,-2) == True
assert opposite_Signs(3,2) == False
assert opposite_Signs(-10,-10) == False
[BEGIN]
def opposite_Signs(x,y): 

    return ((x ^ y) < 0); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth octagonal number. Your code should pass these tests:

assert is_octagonal(5) == 65
assert is_octagonal(10) == 280
assert is_octagonal(15) == 645
[BEGIN]
def is_octagonal(n): 

	return 3 * n * n - 2 * n 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array. Your code should pass these tests:

assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5
assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4
assert max_len_sub([9, 11, 13, 15, 18], 5) == 1
[BEGIN]
def max_len_sub( arr, n): 

	mls=[] 

	max = 0

	for i in range(n): 

		mls.append(1) 

	for i in range(n): 

		for j in range(i): 

			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 

				mls[i] = mls[j] + 1

	for i in range(n): 

		if (max < mls[i]): 

			max = mls[i] 

	return max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count number of substrings with the sum of digits equal to their length. Your code should pass these tests:

assert count_Substrings('112112',6) == 6
assert count_Substrings('111',3) == 6
assert count_Substrings('1101112',7) == 12
[BEGIN]
from collections import defaultdict

def count_Substrings(s,n):

    count,sum = 0,0

    mp = defaultdict(lambda : 0)

    mp[0] += 1

    for i in range(n):

        sum += ord(s[i]) - ord('0')

        count += mp[sum - (i + 1)]

        mp[sum - (i + 1)] += 1

    return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find smallest number in a list. Your code should pass these tests:

assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
[BEGIN]
def smallest_num(xs):
  return min(xs)

[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum difference between available pairs in the given tuple list. Your code should pass these tests:

assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7
assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15
assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23
[BEGIN]
def max_difference(test_list):

  temp = [abs(b - a) for a, b in test_list]

  res = max(temp)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of tuples using lambda. Your code should pass these tests:

assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])
assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])
[BEGIN]
def subject_marks(subjectmarks):

#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])

 subjectmarks.sort(key = lambda x: x[1])

 return subjectmarks
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function of recursion list sum. Your code should pass these tests:

assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21
assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106
assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210
[BEGIN]
def recursive_list_sum(data_list):

	total = 0

	for element in data_list:

		if type(element) == type([]):

			total = total + recursive_list_sum(element)

		else:

			total = total + element

	return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count positive numbers in a list. Your code should pass these tests:

assert pos_count([1,-2,3,-4]) == 2
assert pos_count([3,4,5,-1]) == 3
assert pos_count([1,2,3,4]) == 4
[BEGIN]
def pos_count(list):

  pos_count= 0

  for num in list: 

    if num >= 0: 

      pos_count += 1

  return pos_count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number of ways to partition a set of bell numbers. Your code should pass these tests:

assert bell_number(2)==2
assert bell_number(10)==115975
assert bell_number(56)==6775685320645824322581483068371419745979053216268760300
[BEGIN]
def bell_number(n):   

    bell = [[0 for i in range(n+1)] for j in range(n+1)] 

    bell[0][0] = 1

    for i in range(1, n+1): 

        bell[i][0] = bell[i-1][i-1]  

        for j in range(1, i+1): 

            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   

    return bell[n][0] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given array is monotonic or not. Your code should pass these tests:

assert is_Monotonic([6, 5, 4, 4]) == True
assert is_Monotonic([1, 2, 2, 3]) == True
assert is_Monotonic([1, 3, 2]) == False
[BEGIN]
def is_Monotonic(A): 

    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or

            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether a list contains the given sublist or not. Your code should pass these tests:

assert is_sublist([2,4,3,5,7],[3,7])==False
assert is_sublist([2,4,3,5,7],[4,3])==True
assert is_sublist([2,4,3,5,7],[1,6])==False
[BEGIN]
def is_sublist(l, s):

	sub_set = False

	if s == []:

		sub_set = True

	elif s == l:

		sub_set = True

	elif len(s) > len(l):

		sub_set = False

	else:

		for i in range(len(l)):

			if l[i] == s[0]:

				n = 1

				while (n < len(s)) and (l[i+n] == s[n]):

					n += 1				

				if n == len(s):

					sub_set = True

	return sub_set
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find whether all the given tuples have equal length or not. Your code should pass these tests:

assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'
assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'
assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'
[BEGIN]
def find_equal_tuple(Input, k):

  flag = 1

  for tuple in Input:

    if len(tuple) != k:

      flag = 0

      break

  return flag

def get_equal(Input, k):

  if find_equal_tuple(Input, k) == 1:

    return ("All tuples have same length")

  else:

    return ("All tuples do not have same length")
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of elements using comb sort. Your code should pass these tests:

assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]
assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]
assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]
[BEGIN]
def comb_sort(nums):

    shrink_fact = 1.3

    gaps = len(nums)

    swapped = True

    i = 0

    while gaps > 1 or swapped:

        gaps = int(float(gaps) / shrink_fact)

        swapped = False

        i = 0

        while gaps + i < len(nums):

            if nums[i] > nums[i+gaps]:

                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]

                swapped = True

            i += 1

    return nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number can be represented as difference of two squares or not. Your code should pass these tests:

assert dif_Square(5) == True
assert dif_Square(10) == False
assert dif_Square(15) == True
[BEGIN]
def dif_Square(n): 

    if (n % 4 != 2): 

        return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to split the given string with multiple delimiters by using regex. Your code should pass these tests:

assert multiple_split('Forces of the \ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']
assert multiple_split('Mi Box runs on the \n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']
assert multiple_split('Certain services\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']
[BEGIN]
import re

def multiple_split(text):

  return (re.split('; |, |\*|\n',text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether it follows the sequence given in the patterns array. Your code should pass these tests:

assert is_samepatterns(["red","green","green"], ["a", "b", "b"])==True 
assert is_samepatterns(["red","green","greenn"], ["a","b","b"])==False 
assert is_samepatterns(["red","green","greenn"], ["a","b"])==False 
[BEGIN]
def is_samepatterns(colors, patterns):    

    if len(colors) != len(patterns):

        return False    

    sdict = {}

    pset = set()

    sset = set()    

    for i in range(len(patterns)):

        pset.add(patterns[i])

        sset.add(colors[i])

        if patterns[i] not in sdict.keys():

            sdict[patterns[i]] = []



        keys = sdict[patterns[i]]

        keys.append(colors[i])

        sdict[patterns[i]] = keys



    if len(pset) != len(sset):

        return False   



    for values in sdict.values():



        for i in range(len(values) - 1):

            if values[i] != values[i+1]:

                return False



    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find tuples which have all elements divisible by k from the given list of tuples. Your code should pass these tests:

assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]
assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]
assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]
[BEGIN]
def find_tuples(test_list, K):

  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of squares in a rectangle. Your code should pass these tests:

assert count_Squares(4,3) == 20
assert count_Squares(2,2) == 5
assert count_Squares(1,1) == 1
[BEGIN]
def count_Squares(m,n):

    if(n < m):

        temp = m

        m = n

        n = temp

    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the difference between sum of even and odd digits. Your code should pass these tests:

assert is_Diff (12345) == False
assert is_Diff(1212112) == True
assert is_Diff(1212) == False
[BEGIN]
def is_Diff(n): 

    return (n % 11 == 0) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find number of integers with odd number of set bits. Your code should pass these tests:

assert count_With_Odd_SetBits(5) == 3
assert count_With_Odd_SetBits(10) == 5
assert count_With_Odd_SetBits(15) == 8
[BEGIN]
def count_With_Odd_SetBits(n): 

    if (n % 2 != 0): 

        return (n + 1) / 2

    count = bin(n).count('1') 

    ans = n / 2

    if (count % 2 != 0): 

        ans += 1

    return ans 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the length of the word is odd or not. Your code should pass these tests:

assert word_len("Hadoop") == False
assert word_len("great") == True
assert word_len("structure") == True
[BEGIN]
def word_len(s): 

    s = s.split(' ')   

    for word in s:    

        if len(word)%2!=0: 

            return True  

        else:

          return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth tetrahedral number. Your code should pass these tests:

assert tetrahedral_number(5) == 35.0
assert tetrahedral_number(6) == 56.0
assert tetrahedral_number(7) == 84.0
[BEGIN]
def tetrahedral_number(n): 

	return (n * (n + 1) * (n + 2)) / 6
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to zip the two given tuples. Your code should pass these tests:

assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]
assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]
assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]
[BEGIN]
def zip_tuples(test_tup1, test_tup2):

  res = []

  for i, j in enumerate(test_tup1):

    res.append((j, test_tup2[i % len(test_tup2)])) 

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the volume of a sphere. Your code should pass these tests:

assert volume_sphere(10)==4188.790204786391
assert volume_sphere(25)==65449.84694978735
assert volume_sphere(20)==33510.32163829113
[BEGIN]
import math

def volume_sphere(r):

  volume=(4/3)*math.pi*r*r*r

  return volume
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the character made by adding all the characters of the given string. Your code should pass these tests:

assert get_Char("abc") == "f"
assert get_Char("gfg") == "t"
assert get_Char("ab") == "c"
[BEGIN]
def get_Char(strr):  

    summ = 0

    for i in range(len(strr)): 

        summ += (ord(strr[i]) - ord('a') + 1)  

    if (summ % 26 == 0): 

        return ord('z') 

    else: 

        summ = summ % 26

        return chr(ord('a') + summ - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n-th number in newman conway sequence. Your code should pass these tests:

assert sequence(10) == 6
assert sequence(2) == 1
assert sequence(3) == 2
[BEGIN]
def sequence(n): 

	if n == 1 or n == 2: 

		return 1

	else: 

		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the surface area of a sphere. Your code should pass these tests:

assert surfacearea_sphere(10)==1256.6370614359173
assert surfacearea_sphere(15)==2827.4333882308138
assert surfacearea_sphere(20)==5026.548245743669
[BEGIN]
import math

def surfacearea_sphere(r):

  surfacearea=4*math.pi*r*r

  return surfacearea
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find nth centered hexagonal number. Your code should pass these tests:

assert centered_hexagonal_number(10) == 271
assert centered_hexagonal_number(2) == 7
assert centered_hexagonal_number(9) == 217
[BEGIN]
def centered_hexagonal_number(n):

  return 3 * n * (n - 1) + 1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to merge three dictionaries into a single expression. Your code should pass these tests:

assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" },{"L":"lavender","B":"Blue"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}
assert merge_dictionaries_three({ "R": "Red", "B": "Black", "P": "Pink" },{"L":"lavender","B":"Blue"},{ "G": "Green", "W": "White" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}
[BEGIN]
import collections as ct

def merge_dictionaries_three(dict1,dict2, dict3):

    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))

    return merged_dict
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the frequency of the elements in a list. Your code should pass these tests:

assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) 
assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) 
assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) 
[BEGIN]
import collections

def freq_count(list1):

  freq_count= collections.Counter(list1)

  return freq_count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the closest smaller number than n. Your code should pass these tests:

assert closest_num(11) == 10
assert closest_num(7) == 6
assert closest_num(12) == 11
[BEGIN]
def closest_num(N):

  return (N - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the length of the longest word. Your code should pass these tests:

assert len_log(["python","PHP","bigdata"]) == 7
assert len_log(["a","ab","abc"]) == 3
assert len_log(["small","big","tall"]) == 5
[BEGIN]
def len_log(list1):

    max=len(list1[0])

    for i in list1:

        if len(i)>max:

            max=len(i)

    return max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a substring is present in a given list of string values. Your code should pass these tests:

assert find_substring(["red", "black", "white", "green", "orange"],"ack")==True
assert find_substring(["red", "black", "white", "green", "orange"],"abc")==False
assert find_substring(["red", "black", "white", "green", "orange"],"ange")==True
[BEGIN]
def find_substring(str1, sub_str):

   if any(sub_str in s for s in str1):

       return True

   return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given number is undulating or not. Your code should pass these tests:

assert is_undulating("1212121") == True
assert is_undulating("1991") == False
assert is_undulating("121") == True
[BEGIN]
def is_undulating(n): 

	if (len(n) <= 2): 

		return False

	for i in range(2, len(n)): 

		if (n[i - 2] != n[i]): 

			return False

	return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the value of 'a' to the power 'b'. Your code should pass these tests:

assert power(3,4) == 81
assert power(2,3) == 8
assert power(5,5) == 3125
[BEGIN]
def power(a,b):

	if b==0:

		return 1

	elif a==0:

		return 0

	elif b==1:

		return a

	else:

		return a*power(a,b-1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the index minimum value record from the given tuples. Your code should pass these tests:

assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'
assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'
assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'
[BEGIN]
from operator import itemgetter 

def index_minimum(test_list):

  res = min(test_list, key = itemgetter(1))[0]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum length of sublist. Your code should pass these tests:

assert Find_Min_Length([[1],[1,2]]) == 1
assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2
assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3
[BEGIN]
def Find_Min_Length(lst):  

    minLength = min(len(x) for x in lst )

    return minLength 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the number of divisors of a given integer. Your code should pass these tests:

assert divisor(15) == 4 
assert divisor(12) == 6
assert divisor(9) == 3
[BEGIN]
def divisor(n):

  for i in range(n):

    x = len([i for i in range(1,n+1) if not n % i])

  return x
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find frequency count of list of lists. Your code should pass these tests:

assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}
assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}
[BEGIN]
def frequency_lists(list1):

    list1 = [item for sublist in list1 for item in sublist]

    dic_data = {}

    for num in list1:

        if num in dic_data.keys():

            dic_data[num] += 1

        else:

            key = num

            value = 1

            dic_data[key] = value

    return dic_data


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to multiply all the numbers in a list and divide with the length of the list. Your code should pass these tests:

assert multiply_num((8, 2, 3, -1, 7))==-67.2
assert multiply_num((-10,-20,-30))==-2000.0
assert multiply_num((19,15,18))==1710.0
[BEGIN]
def multiply_num(numbers):  

    total = 1

    for x in numbers:

        total *= x  

    return total/len(numbers) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given decimal number to its binary equivalent. Your code should pass these tests:

assert decimal_to_binary(8) == '1000'
assert decimal_to_binary(18) == '10010'
assert decimal_to_binary(7) == '111' 
[BEGIN]
def decimal_to_binary(n): 

    return bin(n).replace("0b","") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the next smallest palindrome of a specified number. Your code should pass these tests:

assert next_smallest_palindrome(99)==101
assert next_smallest_palindrome(1221)==1331
assert next_smallest_palindrome(120)==121
[BEGIN]
import sys

def next_smallest_palindrome(num):

    numstr = str(num)

    for i in range(num+1,sys.maxsize):

        if str(i) == str(i)[::-1]:

            return i
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the kth element in the given array. Your code should pass these tests:

assert kth_element([12,3,5,7,19], 5, 2) == 3
assert kth_element([17,24,8,23], 4, 3) == 8
assert kth_element([16,21,25,36,4], 5, 4) == 36
[BEGIN]
def kth_element(arr, n, k):

  for i in range(n):

    for j in range(0, n-i-1):

      if arr[j] > arr[j+1]:

        arr[j], arr[j+1] == arr[j+1], arr[j]

  return arr[k-1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert snake case string to camel case string. Your code should pass these tests:

assert snake_to_camel('python_program')=='PythonProgram'
assert snake_to_camel('python_language')==('PythonLanguage')
assert snake_to_camel('programming_language')==('ProgrammingLanguage')
[BEGIN]
def snake_to_camel(word):

        import re

        return ''.join(x.capitalize() or '_' for x in word.split('_'))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find eulerian number a(n, m). Your code should pass these tests:

assert eulerian_num(3, 1) == 4
assert eulerian_num(4, 1) == 11
assert eulerian_num(5, 3) == 26
[BEGIN]
def eulerian_num(n, m): 

	if (m >= n or n == 0): 

		return 0 

	if (m == 0): 

		return 1 

	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort each sublist of strings in a given list of lists using lambda function. Your code should pass these tests:

assert sort_sublists((["green", "orange"], ["black", "white"], ["white", "black", "orange"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists(([" red ","green" ],["blue "," black"],[" orange","brown"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
assert sort_sublists((["zilver","gold"], ["magnesium","aluminium"], ["steel", "bronze"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]
[BEGIN]
def sort_sublists(input_list):

    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 

    return result

[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count true booleans in the given list. Your code should pass these tests:

assert count([True,False,True]) == 2
assert count([False,False]) == 0
assert count([True,True,True]) == 3
[BEGIN]
def count(lst):   

    return sum(lst) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add the given list to the given tuples. Your code should pass these tests:

assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)
assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)
assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)
[BEGIN]
def add_lists(test_list, test_tup):

  res = tuple(list(test_tup) + test_list)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count hexadecimal numbers for a given range. Your code should pass these tests:

assert count_Hexadecimal(10,15) == 6
assert count_Hexadecimal(2,4) == 0
assert count_Hexadecimal(15,16) == 1
[BEGIN]
def count_Hexadecimal(L,R) :  

    count = 0;  

    for i in range(L,R + 1) : 

        if (i >= 10 and i <= 15) : 

            count += 1;  

        elif (i > 15) : 

            k = i;  

            while (k != 0) :  

                if (k % 16 >= 10) : 

                    count += 1;  

                k = k // 16;  

    return count;  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm. Your code should pass these tests:

assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]
assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]
[BEGIN]
import heapq

def merge_sorted_list(num1,num2,num3):

  num1=sorted(num1)

  num2=sorted(num2)

  num3=sorted(num3)

  result = heapq.merge(num1,num2,num3)

  return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the count of rotations of a binary string with odd value. Your code should pass these tests:

assert odd_Equivalent("011001",6) == 3
assert odd_Equivalent("11011",5) == 4
assert odd_Equivalent("1010",4) == 2
[BEGIN]
def odd_Equivalent(s,n): 

    count=0

    for i in range(0,n): 

        if (s[i] == '1'): 

            count = count + 1

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the ranges that are missing from the given list with the given start range and end range values. Your code should pass these tests:

assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]
assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]
assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]
[BEGIN]
def extract_missing(test_list, strt_val, stop_val):

  res = []

  for sub in test_list:

    if sub[0] > strt_val:

      res.append((strt_val, sub[0]))

      strt_val = sub[1]

    if strt_val < stop_val:

      res.append((strt_val, stop_val))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find common elements in given nested lists. * list item * list item * list item * list item Your code should pass these tests:

assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]
assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]
assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]
[BEGIN]
def common_in_nested_lists(nestedlist):

    result = list(set.intersection(*map(set, nestedlist)))

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the perimeter of a cylinder. Your code should pass these tests:

assert perimeter(2,4) == 12
assert perimeter(1,2) == 6
assert perimeter(3,1) == 8
[BEGIN]
def perimeter(diameter,height) : 

    return 2*(diameter+height)  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a string represents an integer or not. Your code should pass these tests:

assert check_integer("python")==False
assert check_integer("1")==True
assert check_integer("12345")==True
[BEGIN]
def check_integer(text):

 text = text.strip()

 if len(text) < 1:

    return None

 else:

     if all(text[i] in "0123456789" for i in range(len(text))):

          return True

     elif (text[0] in "+-") and \

         all(text[i] in "0123456789" for i in range(1,len(text))):

         return True

     else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to assign frequency to each tuple in the given tuple list. Your code should pass these tests:

assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'
assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'
assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'
[BEGIN]
from collections import Counter 

def assign_freq(test_list):

  res = [(*key, val) for key, val in Counter(test_list).items()]

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether all dictionaries in a list are empty or not. Your code should pass these tests:

assert empty_dit([{},{},{}])==True
assert empty_dit([{1,2},{},{}])==False
assert empty_dit({})==True
[BEGIN]
def empty_dit(list1):

 empty_dit=all(not d for d in list1)

 return empty_dit
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a given tuple of positive integers into an integer. Your code should pass these tests:

assert tuple_to_int((1,2,3))==123
assert tuple_to_int((4,5,6))==456
assert tuple_to_int((5,6,7))==567
[BEGIN]
def tuple_to_int(nums):

    result = int(''.join(map(str,nums)))

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert all possible convertible elements in the list to float. Your code should pass these tests:

assert list_to_float( [("3", "4"), ("1", "26.45"), ("7.32", "8"), ("4", "8")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'
assert list_to_float( [("4", "4"), ("2", "27"), ("4.12", "9"), ("7", "11")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'
assert list_to_float( [("6", "78"), ("5", "26.45"), ("1.33", "4"), ("82", "13")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'
[BEGIN]
def list_to_float(test_list):

  res = []

  for tup in test_list:

    temp = []

    for ele in tup:

      if ele.isalpha():

        temp.append(ele)

      else:

        temp.append(float(ele))

    res.append((temp[0],temp[1])) 

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list. Your code should pass these tests:

assert string_to_list("python programming")==['python','programming']
assert string_to_list("lists tuples strings")==['lists','tuples','strings']
assert string_to_list("write a program")==['write','a','program']
[BEGIN]
def string_to_list(string): 

    lst = list(string.split(" ")) 

    return lst
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the element that appears only once in a sorted array. Your code should pass these tests:

assert search([1,1,2,2,3],5) == 3
assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8
assert search([1,2,2,3,3,4,4],7) == 1
[BEGIN]
def search(arr,n) :

    XOR = 0

    for i in range(n) :

        XOR = XOR ^ arr[i]

    return (XOR)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum product from the pairs of tuples within a given list. Your code should pass these tests:

assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36
assert max_product_tuple([(10,20), (15,2), (5,10)] )==200
assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484
[BEGIN]
def max_product_tuple(list1):

    result_max = max([abs(x * y) for x, y in list1] )

    return result_max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the triplet with sum of the given array Your code should pass these tests:

assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True
assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False
assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True
[BEGIN]
def check_triplet(A, n, sum, count):

    if count == 3 and sum == 0:

        return True

    if count == 3 or n == 0 or sum < 0:

        return False

    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\

           check_triplet(A, n - 1, sum, count)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find n’th smart number. Your code should pass these tests:

assert smartNumber(1) == 30
assert smartNumber(50) == 273
assert smartNumber(1000) == 2664
[BEGIN]
MAX = 3000 

def smartNumber(n): 

	primes = [0] * MAX 

	result = [] 

	for i in range(2, MAX): 

		if (primes[i] == 0): 

			primes[i] = 1 

			j = i * 2 

			while (j < MAX): 

				primes[j] -= 1 

				if ( (primes[j] + 3) == 0): 

					result.append(j) 

				j = j + i 

	result.sort() 

	return result[n - 1] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sum all amicable numbers from 1 to a specified number. Your code should pass these tests:

assert amicable_numbers_sum(999)==504
assert amicable_numbers_sum(9999)==31626
assert amicable_numbers_sum(99)==0
[BEGIN]
def amicable_numbers_sum(limit):

    if not isinstance(limit, int):

        return "Input is not an integer!"

    if limit < 1:

        return "Input must be bigger than 0!"

    amicables = set()

    for num in range(2, limit+1):

        if num in amicables:

            continue

        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])

        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])

        if num == sum_fact2 and num != sum_fact:

            amicables.add(num)

            amicables.add(sum_fact2)

    return sum(amicables)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the angle of a complex number. Your code should pass these tests:

assert angle_complex(0,1j)==1.5707963267948966 
assert angle_complex(2,1j)==0.4636476090008061
assert angle_complex(0,2j)==1.5707963267948966
[BEGIN]
import cmath

def angle_complex(a,b):

  cn=complex(a,b)

  angle=cmath.phase(a+b)

  return angle
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string. Your code should pass these tests:

assert find_length("11000010001", 11) == 6
assert find_length("10111", 5) == 1
assert find_length("11011101100101", 14) == 2 
[BEGIN]
def find_length(string, n): 

	current_sum = 0

	max_sum = 0

	for i in range(n): 

		current_sum += (1 if string[i] == '0' else -1) 

		if current_sum < 0: 

			current_sum = 0

		max_sum = max(current_sum, max_sum) 

	return max_sum if max_sum else 0
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of common divisors of two given numbers. Your code should pass these tests:

assert sum(10,15) == 6
assert sum(100,150) == 93
assert sum(4,6) == 3
[BEGIN]
def sum(a,b): 

    sum = 0

    for i in range (1,min(a,b)): 

        if (a % i == 0 and b % i == 0): 

            sum += i 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to multiply two integers without using the * operator in python. Your code should pass these tests:

assert multiply_int(10,20)==200
assert multiply_int(5,10)==50
assert multiply_int(4,8)==32
[BEGIN]
def multiply_int(x, y):

    if y < 0:

        return -multiply_int(x, -y)

    elif y == 0:

        return 0

    elif y == 1:

        return x

    else:

        return x + multiply_int(x, y - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to shortlist words that are longer than n from a given list of words. Your code should pass these tests:

assert long_words(3,"python is a programming language")==['python','programming','language']
assert long_words(2,"writing a program")==['writing','program']
assert long_words(5,"sorting list")==['sorting']
[BEGIN]
def long_words(n, str):

    word_len = []

    txt = str.split(" ")

    for x in txt:

        if len(x) > n:

            word_len.append(x)

    return word_len	
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate magic square. Your code should pass these tests:

assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True
assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True
assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False
[BEGIN]
def magic_square_test(my_matrix):

    iSize = len(my_matrix[0])

    sum_list = []

    sum_list.extend([sum (lines) for lines in my_matrix])   

    for col in range(iSize):

        sum_list.append(sum(row[col] for row in my_matrix))

    result1 = 0

    for i in range(0,iSize):

        result1 +=my_matrix[i][i]

    sum_list.append(result1)      

    result2 = 0

    for i in range(iSize-1,-1,-1):

        result2 +=my_matrix[i][i]

    sum_list.append(result2)

    if len(set(sum_list))>1:

        return False

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the item with maximum frequency in a given list. Your code should pass these tests:

assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)
assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)
assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)
[BEGIN]
from collections import defaultdict

def max_occurrences(nums):

    dict = defaultdict(int)

    for i in nums:

        dict[i] += 1

    result = max(dict.items(), key=lambda x: x[1]) 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to reverse only the vowels of a given string. Your code should pass these tests:

assert reverse_vowels("Python") == "Python"
assert reverse_vowels("USA") == "ASU"
assert reverse_vowels("ab") == "ab"
[BEGIN]
def reverse_vowels(str1):

	vowels = ""

	for char in str1:

		if char in "aeiouAEIOU":

			vowels += char

	result_string = ""

	for char in str1:

		if char in "aeiouAEIOU":

			result_string += vowels[-1]

			vowels = vowels[:-1]

		else:

			result_string += char

	return result_string
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert tuple to a string. Your code should pass these tests:

assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==("exercises")
assert tup_string(('p','y','t','h','o','n'))==("python")
assert tup_string(('p','r','o','g','r','a','m'))==("program")
[BEGIN]
def tup_string(tup1):

  str =  ''.join(tup1)

  return str
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function. Your code should pass these tests:

assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32
assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52
assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894
[BEGIN]
def sum_negativenum(nums):

  sum_negativenum = list(filter(lambda nums:nums<0,nums))

  return sum(sum_negativenum)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the last element of given array is even or odd after performing an operation p times. Your code should pass these tests:

assert check_last([5,7,10],3,1) == "ODD"
assert check_last([2,3],2,3) == "EVEN"
assert check_last([1,2,3],3,1) == "ODD"
[BEGIN]
def check_last (arr,n,p): 

    _sum = 0

    for i in range(n): 

        _sum = _sum + arr[i] 

    if p == 1: 

        if _sum % 2 == 0: 

            return "ODD"

        else: 

            return "EVEN"

    return "EVEN"

      
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth hexagonal number. Your code should pass these tests:

assert hexagonal_num(10) == 190
assert hexagonal_num(5) == 45
assert hexagonal_num(7) == 91
[BEGIN]
def hexagonal_num(n): 

	return n*(2*n - 1) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate electricity bill. Your code should pass these tests:

assert cal_electbill(75)==246.25
assert cal_electbill(265)==1442.75
assert cal_electbill(100)==327.5
[BEGIN]
def cal_electbill(units):

 if(units < 50):

    amount = units * 2.60

    surcharge = 25

 elif(units <= 100):

    amount = 130 + ((units - 50) * 3.25)

    surcharge = 35

 elif(units <= 200):

    amount = 130 + 162.50 + ((units - 100) * 5.26)

    surcharge = 45

 else:

    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)

    surcharge = 75

 total = amount + surcharge

 return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the ration of zeroes in an array of integers. Your code should pass these tests:

assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15
assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00
assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00
[BEGIN]
from array import array

def zero_count(nums):

    n = len(nums)

    n1 = 0

    for x in nums:

        if x == 0:

            n1 += 1

        else:

          None

    return round(n1/n,2)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not. Your code should pass these tests:

assert is_Sum_Of_Powers_Of_Two(10) == True
assert is_Sum_Of_Powers_Of_Two(7) == False
assert is_Sum_Of_Powers_Of_Two(14) == True
[BEGIN]
def is_Sum_Of_Powers_Of_Two(n): 

    if (n % 2 == 1): 

        return False

    else: 

        return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the circumference of a circle. Your code should pass these tests:

assert circle_circumference(10)==62.830000000000005
assert circle_circumference(5)==31.415000000000003
assert circle_circumference(4)==25.132
[BEGIN]
def circle_circumference(r):

  perimeter=2*3.1415*r

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract elements that occur singly in the given tuple list. Your code should pass these tests:

assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]
assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]
assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]
[BEGIN]
def extract_singly(test_list):

  res = []

  temp = set()

  for inner in test_list:

    for ele in inner:

      if not ele in temp:

        temp.add(ele)

        res.append(ele)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of elements using pancake sort. Your code should pass these tests:

assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]
assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]
[BEGIN]
def pancake_sort(nums):

    arr_len = len(nums)

    while arr_len > 1:

        mi = nums.index(max(nums[0:arr_len]))

        nums = nums[mi::-1] + nums[mi+1:len(nums)]

        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]

        arr_len -= 1

    return nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the same pair in three given lists. Your code should pass these tests:

assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3
assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4
assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5
[BEGIN]
def count_samepair(list1,list2,list3):

    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find number of lists present in the given tuple. Your code should pass these tests:

assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2
assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3
assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1
[BEGIN]
def find_lists(Input): 

	if isinstance(Input, list): 

		return 1

	else: 

		return len(Input) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of absolute differences in all pairs of the given array. Your code should pass these tests:

assert sum_Pairs([1,8,9,15,16],5) == 74
assert sum_Pairs([1,2,3,4],4) == 10
assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188
[BEGIN]
def sum_Pairs(arr,n): 

    sum = 0

    for i in range(n - 1,-1,-1): 

        sum += i*arr[i] - (n-1-i) * arr[i] 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum difference between any two elements in a given array. Your code should pass these tests:

assert max_Abs_Diff((2,1,5,3),4) == 4
assert max_Abs_Diff((9,3,2,5,1),5) == 8
assert max_Abs_Diff((3,2,1),3) == 2
[BEGIN]
def max_Abs_Diff(arr,n): 

    minEle = arr[0] 

    maxEle = arr[0] 

    for i in range(1, n): 

        minEle = min(minEle,arr[i]) 

        maxEle = max(maxEle,arr[i]) 

    return (maxEle - minEle) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the ascii value of total characters in a string. Your code should pass these tests:

assert ascii_value_string("python")==112
assert ascii_value_string("Program")==80
assert ascii_value_string("Language")==76
[BEGIN]
def ascii_value_string(str1):

  for i in range(len(str1)):

   return ord(str1[i])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum total path sum in the given triangle. Your code should pass these tests:

assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14
assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 
assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53
[BEGIN]
def max_path_sum(tri, m, n): 

	for i in range(m-1, -1, -1): 

		for j in range(i+1): 

			if (tri[i+1][j] > tri[i+1][j+1]): 

				tri[i][j] += tri[i+1][j] 

			else: 

				tri[i][j] += tri[i+1][j+1] 

	return tri[0][0]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to divide a number into two parts such that the sum of digits is maximum. Your code should pass these tests:

assert sum_digits_twoparts(35)==17
assert sum_digits_twoparts(7)==7
assert sum_digits_twoparts(100)==19
[BEGIN]
def sum_digits_single(x) : 

    ans = 0

    while x : 

        ans += x % 10

        x //= 10  

    return ans 

def closest(x) : 

    ans = 0

    while (ans * 10 + 9 <= x) : 

        ans = ans * 10 + 9  

    return ans   

def sum_digits_twoparts(N) : 

    A = closest(N)  

    return sum_digits_single(A) + sum_digits_single(N - A) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest subsequence such that the difference between adjacents is one for the given array. Your code should pass these tests:

assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6
assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3
assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7
[BEGIN]
def longest_subseq_with_diff_one(arr, n): 

	dp = [1 for i in range(n)] 

	for i in range(n): 

		for j in range(i): 

			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 

				dp[i] = max(dp[i], dp[j]+1) 

	result = 1

	for i in range(n): 

		if (result < dp[i]): 

			result = dp[i] 

	return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find whether the given number is present in the infinite sequence or not. Your code should pass these tests:

assert does_Contain_B(1,7,3) == True
assert does_Contain_B(1,-3,5) == False
assert does_Contain_B(3,2,5) == False
[BEGIN]
def does_Contain_B(a,b,c): 

    if (a == b): 

        return True

    if ((b - a) * c > 0 and (b - a) % c == 0): 

        return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number is co-prime or not. Your code should pass these tests:

assert is_coprime(17,13) == True
assert is_coprime(15,21) == False
assert is_coprime(25,45) == False
[BEGIN]
def gcd(p,q):

    while q != 0:

        p, q = q,p%q

    return p

def is_coprime(x,y):

    return gcd(x,y) == 1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given array by using merge sort. Your code should pass these tests:

assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]
assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]
assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]
[BEGIN]
def merge(a,b):

    c = []

    while len(a) != 0 and len(b) != 0:

        if a[0] < b[0]:

            c.append(a[0])

            a.remove(a[0])

        else:

            c.append(b[0])

            b.remove(b[0])

    if len(a) == 0:

        c += b

    else:

        c += a

    return c

def merge_sort(x):

    if len(x) == 0 or len(x) == 1:

        return x

    else:

        middle = len(x)//2

        a = merge_sort(x[:middle])

        b = merge_sort(x[middle:])

        return merge(a,b)


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the vertex of a parabola. Your code should pass these tests:

assert parabola_vertex(5,3,2)==(-0.3, 1.55)
assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)
assert parabola_vertex(2,4,6)==(-1.0, 4.0)
[BEGIN]
def parabola_vertex(a, b, c): 

  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))

  return vertex
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract every specified element from a given two dimensional list. Your code should pass these tests:

assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]
assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]
assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]
[BEGIN]
def specified_element(nums, N):

    result = [i[N] for i in nums]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to toggle all even bits of a given number. Your code should pass these tests:

assert even_bit_toggle_number(10) == 0
assert even_bit_toggle_number(20) == 30
assert even_bit_toggle_number(30) == 20
[BEGIN]
def even_bit_toggle_number(n) : 

    res = 0; count = 0; temp = n 

    while (temp > 0) :     

        if (count % 2 == 1) : 

            res = res | (1 << count)      

        count = count + 1

        temp >>= 1 

    return n ^ res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a tuple of string values to a tuple of integer values. Your code should pass these tests:

assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))
assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))
assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))
[BEGIN]
def tuple_int_str(tuple_str):

    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to reflect the run-length encoding from a list. Your code should pass these tests:

assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]
assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]
assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]
[BEGIN]
from itertools import groupby

def encode_list(list1):

    return [[len(list(group)), key] for key, group in groupby(list1)]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find k number of operations required to make all elements equal. Your code should pass these tests:

assert min_Ops([2,2,2,2],4,3) == 0
assert min_Ops([4,2,6,8],4,3) == -1
assert min_Ops([21,33,9,45,63],5,6) == 24
[BEGIN]
def min_Ops(arr,n,k): 

    max1 = max(arr) 

    res = 0

    for i in range(0,n):  

        if ((max1 - arr[i]) % k != 0): 

            return -1 

        else: 

            res += (max1 - arr[i]) / k 

    return int(res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print the season for the given month and day. Your code should pass these tests:

assert month_season('January',4)==('winter')
assert month_season('October',28)==('autumn')
assert month_season('June',6)==('spring')
[BEGIN]
def month_season(month,days):

 if month in ('January', 'February', 'March'):

	 season = 'winter'

 elif month in ('April', 'May', 'June'):

	 season = 'spring'

 elif month in ('July', 'August', 'September'):

	 season = 'summer'

 else:

	 season = 'autumn'

 if (month == 'March') and (days > 19):

	 season = 'spring'

 elif (month == 'June') and (days > 20):

	 season = 'summer'

 elif (month == 'September') and (days > 21):

	 season = 'autumn'

 elif (month == 'October') and (days > 21):

	 season = 'autumn'

 elif (month == 'November') and (days > 21):

	 season = 'autumn'

 elif (month == 'December') and (days > 20):

	 season = 'winter'

 return season
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find x and y that satisfies ax + by = n. Your code should pass these tests:

assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)
assert solution(4, 2, 7) == 'No solution'
assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)
[BEGIN]
def solution (a, b, n): 

	i = 0

	while i * a <= n: 

		if (n - (i * a)) % b == 0: 

			return ("x = ",i ,", y = ", 

			int((n - (i * a)) / b)) 

			return 0

		i = i + 1

	return ("No solution") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all elements from a given list present in another list. Your code should pass these tests:

assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]
assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]
[BEGIN]
def remove_elements(list1, list2):

    result = [x for x in list1 if x not in list2]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0). Your code should pass these tests:

assert sum_series(6)==12
assert sum_series(10)==30
assert sum_series(9)==25
[BEGIN]
def sum_series(n):

  if n < 1:

    return 0

  else:

    return n + sum_series(n - 2)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the area of a regular polygon. Your code should pass these tests:

assert area_polygon(4,20)==400.00000000000006
assert area_polygon(10,15)==1731.1969896610804
assert area_polygon(9,7)==302.90938549487214
[BEGIN]
from math import tan, pi

def area_polygon(s,l):

  area = s * (l ** 2) / (4 * tan(pi / s))

  return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the sum of divisors are same or not. Your code should pass these tests:

assert areEquivalent(36,57) == False
assert areEquivalent(2,4) == False
assert areEquivalent(23,47) == True
[BEGIN]
import math 

def divSum(n): 

    sum = 1; 

    i = 2; 

    while(i * i <= n): 

        if (n % i == 0): 

            sum = (sum + i +math.floor(n / i)); 

        i += 1; 

    return sum; 

def areEquivalent(num1,num2): 

    return divSum(num1) == divSum(num2); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet. Your code should pass these tests:

assert count_char_position("xbcefg") == 2
assert count_char_position("ABcED") == 3
assert count_char_position("AbgdeF") == 5
[BEGIN]
def count_char_position(str1): 

    count_chars = 0

    for i in range(len(str1)):

        if ((i == ord(str1[i]) - ord('A')) or 

            (i == ord(str1[i]) - ord('a'))): 

            count_chars += 1

    return count_chars 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the pairs with xor as an even number. Your code should pass these tests:

assert find_even_Pair([5,4,7,2,1],5) == 4
assert find_even_Pair([7,2,8,1,0,5,11],7) == 9
assert find_even_Pair([1,2,3],3) == 1
[BEGIN]
def find_even_Pair(A,N): 

    evenPair = 0

    for i in range(0,N): 

        for j in range(i+1,N): 

            if ((A[i] ^ A[j]) % 2 == 0): 

                evenPair+=1

    return evenPair; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find smallest power of 2 greater than or equal to n. Your code should pass these tests:

assert next_Power_Of_2(0) == 1
assert next_Power_Of_2(5) == 8
assert next_Power_Of_2(17) == 32
[BEGIN]
def next_Power_Of_2(n): 

    count = 0; 

    if (n and not(n & (n - 1))): 

        return n   

    while( n != 0): 

        n >>= 1

        count += 1

    return 1 << count; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the frequency of a number in a given array. Your code should pass these tests:

assert frequency([1,2,3],4) == 0
assert frequency([1,2,2,3,3,3,4],3) == 3
assert frequency([0,1,2,3,1,2],1) == 2
[BEGIN]
def frequency(a,x): 

    count = 0  

    for i in a: 

        if i == x: count += 1

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the nth pell number. Your code should pass these tests:

assert get_pell(4) == 12
assert get_pell(7) == 169
assert get_pell(8) == 408
[BEGIN]
def get_pell(n): 

	if (n <= 2): 

		return n 

	a = 1

	b = 2

	for i in range(3, n+1): 

		c = 2 * b + a 

		a = b 

		b = c 

	return b 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find sum of the numbers in a list between the indices of a specified range. Your code should pass these tests:

assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29
assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16
assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38
[BEGIN]
def sum_range_list(list1, m, n):                                                                                                                                                                                                

    sum_range = 0                                                                                                                                                                                                         

    for i in range(m, n+1, 1):                                                                                                                                                                                        

        sum_range += list1[i]                                                                                                                                                                                                  

    return sum_range   
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the perimeter of a pentagon. Your code should pass these tests:

assert perimeter_pentagon(5)==25
assert perimeter_pentagon(10)==50
assert perimeter_pentagon(15)==75
[BEGIN]
import math

def perimeter_pentagon(a):

  perimeter=(5*a)

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item Your code should pass these tests:

assert count_occurance("letstdlenstdporstd") == 3
assert count_occurance("truststdsolensporsd") == 1
assert count_occurance("makestdsostdworthit") == 2
[BEGIN]
def count_occurance(s):

  count=0

  for i in range(len(s)):

    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):

      count = count + 1

  return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove everything except alphanumeric characters from a string. Your code should pass these tests:

assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')
assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')
assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')
[BEGIN]
import re

def remove_splchar(text): 

 pattern = re.compile('[\W_]+')

 return (pattern.sub('', text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to group a sequence of key-value pairs into a dictionary of lists. Your code should pass these tests:

assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}
assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}
assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}
[BEGIN]
def group_keyvalue(l):

    result = {}

    for k, v in l:

         result.setdefault(k, []).append(v)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to verify validity of a string of parentheses. Your code should pass these tests:

assert is_valid_parenthese("(){}[]")==True
assert is_valid_parenthese("()[{)}")==False
assert is_valid_parenthese("()")==True
[BEGIN]
def is_valid_parenthese( str1):

        stack, pchar = [], {"(": ")", "{": "}", "[": "]"}

        for parenthese in str1:

            if parenthese in pchar:

                stack.append(parenthese)

            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:

                return False

        return len(stack) == 0
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the perimeter of a triangle. Your code should pass these tests:

assert perimeter_triangle(10,20,30)==60
assert perimeter_triangle(3,4,5)==12
assert perimeter_triangle(25,35,45)==105
[BEGIN]
def perimeter_triangle(a,b,c):

  perimeter=a+b+c

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find two distinct numbers such that their lcm lies within the given range. Your code should pass these tests:

assert answer(3,8) == (3,6)
assert answer(2,6) == (2,4)
assert answer(1,3) == (1,2)
[BEGIN]
def answer(L,R): 

    if (2 * L <= R): 

        return (L ,2*L)

    else: 

        return (-1) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to search some literals strings in a string. Your code should pass these tests:

assert string_literals(['language'],'python language')==('Matched!')
assert string_literals(['program'],'python language')==('Not Matched!')
assert string_literals(['python'],'programming language')==('Not Matched!')
[BEGIN]
import re

def string_literals(patterns,text):

  for pattern in patterns:

     if re.search(pattern,  text):

       return ('Matched!')

     else:

       return ('Not Matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find if the given number is a keith number or not. Your code should pass these tests:

assert is_num_keith(14) == True
assert is_num_keith(12) == False
assert is_num_keith(197) == True
[BEGIN]
def is_num_keith(x): 

	terms = [] 

	temp = x 

	n = 0 

	while (temp > 0): 

		terms.append(temp % 10) 

		temp = int(temp / 10) 

		n+=1 

	terms.reverse() 

	next_term = 0 

	i = n 

	while (next_term < x): 

		next_term = 0 

		for j in range(1,n+1): 

			next_term += terms[i - j] 

		terms.append(next_term) 

		i+=1 

	return (next_term == x) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate distance between two points using latitude and longitude. Your code should pass these tests:

assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429
assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514
assert distance_lat_long(10,20,30,40)==6783.751974994595
[BEGIN]
from math import radians, sin, cos, acos

def distance_lat_long(slat,slon,elat,elon):

 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))

 return dist
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest common prefix in the given set of strings. Your code should pass these tests:

assert common_prefix(["tablets", "tables", "taxi", "tamarind"], 4) == 'ta'
assert common_prefix(["apples", "ape", "april"], 3) == 'ap'
assert common_prefix(["teens", "teenager", "teenmar"], 3) == 'teen'
[BEGIN]
def common_prefix_util(str1, str2): 

	result = ""; 

	n1 = len(str1) 

	n2 = len(str2) 

	i = 0

	j = 0

	while i <= n1 - 1 and j <= n2 - 1: 

		if (str1[i] != str2[j]): 

			break

		result += str1[i] 

		i += 1

		j += 1

	return (result) 

def common_prefix (arr, n): 

	prefix = arr[0] 

	for i in range (1, n): 

		prefix = common_prefix_util(prefix, arr[i]) 

	return (prefix) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find uppercase, lowercase, special character and numeric values using regex. Your code should pass these tests:

assert find_character("ThisIsGeeksforGeeks") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])
assert find_character("Hithere2") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])
assert find_character("HeyFolks32") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])
[BEGIN]
import re

def find_character(string):

  uppercase_characters = re.findall(r"[A-Z]", string) 

  lowercase_characters = re.findall(r"[a-z]", string) 

  numerical_characters = re.findall(r"[0-9]", string) 

  special_characters = re.findall(r"[, .!?]", string) 

  return uppercase_characters, lowercase_characters, numerical_characters, special_characters
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count all the distinct pairs having a difference of k in any array. Your code should pass these tests:

assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2
assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5
assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3
[BEGIN]
def count_pairs(arr, n, k):

  count=0;

  for i in range(0,n):

    for j in range(i+1, n):

      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:

        count += 1

  return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all the values in a list that are greater than a specified number. Your code should pass these tests:

assert greater_specificnum([220, 330, 500],200)==True
assert greater_specificnum([12, 17, 21],20)==False
assert greater_specificnum([1,2,3,4],10)==False
[BEGIN]
def greater_specificnum(list,num):

 greater_specificnum=all(x >= num for x in list)

 return greater_specificnum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the focus of a parabola. Your code should pass these tests:

assert parabola_focus(5,3,2)==(-0.3, 1.6)
assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)
assert parabola_focus(2,4,6)==(-1.0, 4.125)
[BEGIN]
def parabola_focus(a, b, c): 

  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))

  return focus
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to search some literals strings in a string by using regex. Your code should pass these tests:

assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'
assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'
assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'
[BEGIN]
import re

def check_literals(text, patterns):

  for pattern in patterns:

    if re.search(pattern,  text):

        return ('Matched!')

    else:

        return ('Not Matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest common subsequence for the given two sequences. Your code should pass these tests:

assert longest_common_subsequence("AGGTAB" , "GXTXAYB", 6, 7) == 4
assert longest_common_subsequence("ABCDGH" , "AEDFHR", 6, 6) == 3
assert longest_common_subsequence("AXYT" , "AYZX", 4, 4) == 2
[BEGIN]
def longest_common_subsequence(X, Y, m, n): 

    if m == 0 or n == 0: 

       return 0 

    elif X[m-1] == Y[n-1]: 

       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 

    else: 

       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number can be represented by product of two squares or not. Your code should pass these tests:

assert prod_Square(25) == False
assert prod_Square(30) == False
assert prod_Square(16) == True
[BEGIN]
def prod_Square(n):

    for i in range(2,(n) + 1):

        if (i*i < (n+1)):

            for j in range(2,n + 1):

                if ((i*i*j*j) == n):

                    return True;

    return False;
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first missing positive number. Your code should pass these tests:

assert first_Missing_Positive([1,2,3,-1,5],5) == 4
assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2
assert first_Missing_Positive([0,1,2,5,-8],5) == 3
[BEGIN]
def first_Missing_Positive(arr,n): 

    ptr = 0

    for i in range(n):

        if arr[i] == 1:

            ptr = 1

            break

    if ptr == 0:

        return(1)

    for i in range(n):

        if arr[i] <= 0 or arr[i] > n:

            arr[i] = 1

    for i in range(n):

        arr[(arr[i] - 1) % n] += n

    for i in range(n):

        if arr[i] <= n:

            return(i + 1)

    return(n + 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of integral co-ordinates that lie inside a square. Your code should pass these tests:

assert count_Intgral_Points(1,1,4,4) == 4
assert count_Intgral_Points(1,2,1,2) == 1
assert count_Intgral_Points(4,2,6,4) == 1
[BEGIN]
def count_Intgral_Points(x1,y1,x2,y2): 

    return ((y2 - y1 - 1) * (x2 - x1 - 1)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given month name contains 30 days or not. Your code should pass these tests:

assert check_monthnumber("February")==False
assert check_monthnumber("June")==True
assert check_monthnumber("April")==True
[BEGIN]
def check_monthnumber(monthname3):

  if monthname3 =="April" or monthname3== "June" or monthname3== "September" or monthname3== "November":

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether a string has atleast one letter and one number. Your code should pass these tests:

assert check_String('thishasboth29') == True
assert check_String('python') == False
assert check_String ('string') == False
[BEGIN]
def check_String(str): 

    flag_l = False

    flag_n = False

    for i in str: 

        if i.isalpha(): 

            flag_l = True  

        if i.isdigit(): 

            flag_n = True

    return flag_l and flag_n 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove the duplicates from the given tuple. Your code should pass these tests:

assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)
assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)
assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)
[BEGIN]
def remove_tuple(test_tup):

  res = tuple(set(test_tup))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert octal number to decimal number. Your code should pass these tests:

assert octal_To_Decimal(25) == 21
assert octal_To_Decimal(30) == 24
assert octal_To_Decimal(40) == 32
[BEGIN]
def octal_To_Decimal(n):  

    num = n; 

    dec_value = 0; 

    base = 1; 

    temp = num; 

    while (temp): 

        last_digit = temp % 10; 

        temp = int(temp / 10); 

        dec_value += last_digit*base; 

        base = base * 8; 

    return dec_value; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first position of an element in a sorted array. Your code should pass these tests:

assert first([1,2,3,4,5,6,6],6,6) == 5
assert first([1,2,2,2,3,2,2,4,2],2,9) == 1
assert first([1,2,3],1,3) == 0
[BEGIN]
def first(arr,x,n): 

    low = 0

    high = n - 1

    res = -1  

    while (low <= high):

        mid = (low + high) // 2 

        if arr[mid] > x:

            high = mid - 1

        elif arr[mid] < x:

            low = mid + 1

        else:

            res = mid

            high = mid - 1

    return res
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all the tuples with length k. Your code should pass these tests:

assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]
assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]
assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]
[BEGIN]
def remove_tuples(test_list, K):

  res = [ele for ele in test_list if len(ele) != K]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform the exponentiation of the given two tuples. Your code should pass these tests:

assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)
assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)
assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)
[BEGIN]
def find_exponentio(test_tup1, test_tup2):

  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

  return (res)


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest triangle that can be inscribed in an ellipse. Your code should pass these tests:

assert largest_triangle(4,2)==10.392304845413264
assert largest_triangle(5,7)==4.639421805988064
assert largest_triangle(9,1)==105.2220865598093
[BEGIN]
import math

def largest_triangle(a,b): 

    if (a < 0 or b < 0): 

        return -1 

    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  

    return area 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find highest power of 2 less than or equal to given number. Your code should pass these tests:

assert highest_Power_of_2(10) == 8
assert highest_Power_of_2(19) == 16
assert highest_Power_of_2(32) == 32
[BEGIN]
def highest_Power_of_2(n): 

    res = 0; 

    for i in range(n, 0, -1):  

        if ((i & (i - 1)) == 0): 

            res = i; 

            break;      

    return res; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all index positions of the maximum values in a given list. Your code should pass these tests:

assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]
assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]
assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]
[BEGIN]
def position_max(list1):

    max_val = max(list1)

    max_result = [i for i, j in enumerate(list1) if j == max_val]

    return max_result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the elements in a list are same or not. Your code should pass these tests:

assert chkList(['one','one','one']) == True
assert chkList(['one','Two','Three']) == False
assert chkList(['bigdata','python','Django']) == False
[BEGIN]
def chkList(lst): 

    return len(set(lst)) == 1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove even characters in a string. Your code should pass these tests:

assert remove_even("python")==("pto")
assert remove_even("program")==("porm")
assert remove_even("language")==("lnug")
[BEGIN]
def remove_even(str1):

 str2 = ''

 for i in range(1, len(str1) + 1):

    if(i % 2 != 0):

        str2 = str2 + str1[i - 1]

 return str2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the hamming distance between given two integers. Your code should pass these tests:

assert hamming_Distance(4,8) == 2
assert hamming_Distance(2,4) == 2
assert hamming_Distance(1,2) == 2
[BEGIN]
def hamming_Distance(n1,n2) : 

    x = n1 ^ n2  

    setBits = 0

    while (x > 0) : 

        setBits += x & 1

        x >>= 1

    return setBits  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the occurrence of a given character in a string. Your code should pass these tests:

assert count("abcc","c") == 2
assert count("ababca","a") == 3
assert count("mnmm0pm","m") == 4
[BEGIN]
def count(s,c) : 

    res = 0 

    for i in range(len(s)) : 

        if (s[i] == c): 

            res = res + 1

    return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the inversions of tuple elements in the given tuple list. Your code should pass these tests:

assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)
assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)
assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)
[BEGIN]
def inversion_elements(test_tup):

  res = tuple(list(map(lambda x: ~x, list(test_tup))))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform the adjacent element concatenation in the given tuples. Your code should pass these tests:

assert concatenate_elements(("DSP ", "IS ", "BEST ", "FOR ", "ALL ", "UTS")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')
assert concatenate_elements(("RES ", "IS ", "BEST ", "FOR ", "ALL ", "QESR")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')
assert concatenate_elements(("MSAM", "IS ", "BEST ", "FOR ", "ALL ", "SKD")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')
[BEGIN]
def concatenate_elements(test_tup):

  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions. Your code should pass these tests:

assert find_longest_repeating_subseq("AABEBCDD") == 3
assert find_longest_repeating_subseq("aabb") == 2
assert find_longest_repeating_subseq("aab") == 1
[BEGIN]
def find_longest_repeating_subseq(str): 

	n = len(str) 

	dp = [[0 for k in range(n+1)] for l in range(n+1)] 

	for i in range(1, n+1): 

		for j in range(1, n+1): 

			if (str[i-1] == str[j-1] and i != j): 

				dp[i][j] = 1 + dp[i-1][j-1] 

			else: 

				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 

	return dp[n][n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check the given decimal with a precision of 2 by using regex. Your code should pass these tests:

assert is_decimal('123.11') == True
assert is_decimal('0.21') == True
assert is_decimal('123.1214') == False
[BEGIN]
import re

def is_decimal(num):

  num_fetch = re.compile(r"""^[0-9]+(\.[0-9]{1,2})?$""")

  result = num_fetch.search(num)

  return bool(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to delete the smallest element from the given heap and then insert a new item. Your code should pass these tests:

assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]
assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]
assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]
[BEGIN]
import heapq as hq

def heap_replace(heap,a):

  hq.heapify(heap)

  hq.heapreplace(heap, a)

  return heap
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex. Your code should pass these tests:

assert is_allowed_specific_char("ABCDEFabcdef123450") == True
assert is_allowed_specific_char("*&%@#!}{") == False
assert is_allowed_specific_char("HELLOhowareyou98765") == True
[BEGIN]
import re

def is_allowed_specific_char(string):

    get_char = re.compile(r'[^a-zA-Z0-9.]')

    string = get_char.search(string)

    return not bool(string)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count numbers whose oth and nth bits are set. Your code should pass these tests:

assert count_Num(2) == 1
assert count_Num(3) == 2
assert count_Num(1) == 1
[BEGIN]
def count_Num(n): 

    if (n == 1): 

        return 1

    count = pow(2,n - 2) 

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of fourth power of n natural numbers. Your code should pass these tests:

assert fourth_Power_Sum(2) == 17
assert fourth_Power_Sum(4) == 354
assert fourth_Power_Sum(6) == 2275
[BEGIN]
import math  

def fourth_Power_Sum(n): 

    sum = 0

    for i in range(1,n+1) : 

        sum = sum + (i*i*i*i) 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform the concatenation of two string tuples. Your code should pass these tests:

assert concatenate_strings(("Manjeet", "Nikhil", "Akshat"), (" Singh", " Meherwal", " Garg")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')
assert concatenate_strings(("Shaik", "Ayesha", "Sanya"), (" Dawood", " Begum", " Singh")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')
assert concatenate_strings(("Harpreet", "Priyanka", "Muskan"), ("Kour", " Agarwal", "Sethi")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')
[BEGIN]
def concatenate_strings(test_tup1, test_tup2):

  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert radians to degrees. Your code should pass these tests:

assert degree_radian(90)==5156.620156177409
assert degree_radian(60)==3437.746770784939
assert degree_radian(120)==6875.493541569878
[BEGIN]
import math

def degree_radian(radian):

 degree = radian*(180/math.pi)

 return degree
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to decode a run-length encoded given list. Your code should pass these tests:

assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]
assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']
assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']
[BEGIN]
def decode_list(alist):

    def aux(g):

        if isinstance(g, list):

            return [(g[1], range(g[0]))]

        else:

            return [(g, [0])]

    return [x for g in alist for x, R in aux(g) for i in R]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a nested list is a subset of another nested list. Your code should pass these tests:

assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False
assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True
assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False
[BEGIN]
def check_subset_list(list1, list2): 

    l1, l2 = list1[0], list2[0] 

    exist = True

    for i in list2: 

        if i not in list1: 

            exist = False

    return exist 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first repeated character in a given string. Your code should pass these tests:

assert first_Repeated_Char("Google") == "o"
assert first_Repeated_Char("data") == "a"
assert first_Repeated_Char("python") == '\0'
[BEGIN]
def first_Repeated_Char(str): 

    h = {}

    for ch in str:

        if ch in h: 

            return ch;

        else: 

            h[ch] = 0

    return '\0'
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum operations required to make two numbers equal. Your code should pass these tests:

assert min_Operations(2,4) == 1
assert min_Operations(4,10) == 4
assert min_Operations(1,4) == 3
[BEGIN]
import math   

def min_Operations(A,B):  

    if (A > B): 

        swap(A,B)  

    B = B // math.gcd(A,B);  

    return B - 1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract maximum and minimum k elements in the given tuple. Your code should pass these tests:

assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)
assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)
assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)
[BEGIN]


def extract_min_max(test_tup, K):

  res = []

  test_tup = list(test_tup)

  temp = sorted(test_tup)

  for idx, val in enumerate(temp):

    if idx < K or idx >= len(temp) - K:

      res.append(val)

  res = tuple(res)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon. Your code should pass these tests:

assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')
assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')
assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')
[BEGIN]
import re

def replace_max_specialchar(text,n):

 return (re.sub("[ ,.]", ":", text, n))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first even number in a given list of numbers. Your code should pass these tests:

assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert first_even([2, 3, 4]) == 2
assert first_even([5, 6, 7]) == 6
[BEGIN]
def first_even(nums):

    first_even = next((el for el in nums if el%2==0),-1)

    return first_even
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if all the elements in tuple have same data type or not. Your code should pass these tests:

assert check_type((5, 6, 7, 3, 5, 6) ) == True
assert check_type((1, 2, "4") ) == False
assert check_type((3, 2, 1, 4, 5) ) == True
[BEGIN]
def check_type(test_tuple):

  res = True

  for ele in test_tuple:

    if not isinstance(ele, type(test_tuple[0])):

      res = False

      break

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check for majority element in the given sorted array. Your code should pass these tests:

assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True
assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False
assert is_majority([1, 1, 1, 2, 2], 5, 1) == True
[BEGIN]
def is_majority(arr, n, x):

	i = binary_search(arr, 0, n-1, x)

	if i == -1:

		return False

	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:

		return True

	else:

		return False

def binary_search(arr, low, high, x):

	if high >= low:

		mid = (low + high)//2 

		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):

			return mid

		elif x > arr[mid]:

			return binary_search(arr, (mid + 1), high, x)

		else:

			return binary_search(arr, low, (mid -1), x)

	return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count set bits of a given number. Your code should pass these tests:

assert count_Set_Bits(2) == 1
assert count_Set_Bits(4) == 1
assert count_Set_Bits(6) == 2
[BEGIN]
def count_Set_Bits(n): 

    count = 0

    while (n): 

        count += n & 1

        n >>= 1

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum element in a sorted and rotated array. Your code should pass these tests:

assert find_Min([1,2,3,4,5],0,4) == 1
assert find_Min([4,6,8],0,2) == 4
assert find_Min([2,3,5,7,9],0,4) == 2
[BEGIN]
def find_Min(arr,low,high): 

    while (low < high): 

        mid = low + (high - low) // 2;   

        if (arr[mid] == arr[high]): 

            high -= 1; 

        elif (arr[mid] > arr[high]): 

            low = mid + 1; 

        else: 

            high = mid; 

    return arr[high]; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove the characters which have odd index values of a given string. Your code should pass these tests:

assert odd_values_string('abcdef') == 'ace'
assert odd_values_string('python') == 'pto'
assert odd_values_string('data') == 'dt'
[BEGIN]
def odd_values_string(str):

  result = "" 

  for i in range(len(str)):

    if i % 2 == 0:

      result = result + str[i]

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find minimum of three numbers. Your code should pass these tests:

assert min_of_three(10,20,0)==0
assert min_of_three(19,15,18)==15
assert min_of_three(-10,-20,-30)==-30
[BEGIN]
def min_of_three(a,b,c): 

      if (a <= b) and (a <= c): 

        smallest = a 

      elif (b <= a) and (b <= c): 

        smallest = b 

      else: 

        smallest = c 

      return smallest 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether all the bits are unset in the given range or not. Your code should pass these tests:

assert all_Bits_Set_In_The_Given_Range(4,1,2) == True
assert all_Bits_Set_In_The_Given_Range(17,2,4) == True
assert all_Bits_Set_In_The_Given_Range(39,4,6) == False
[BEGIN]
def all_Bits_Set_In_The_Given_Range(n,l,r):  

    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 

    new_num = n & num

    if (new_num == 0): 

        return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones. Your code should pass these tests:

assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]
assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]
assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]
[BEGIN]
def re_arrange_array(arr, n):

  j=0

  for i in range(0, n):

    if (arr[i] < 0):

      temp = arr[i]

      arr[i] = arr[j]

      arr[j] = temp

      j = j + 1

  return arr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace blank spaces with any character in a string. Your code should pass these tests:

assert replace_blank("hello people",'@')==("hello@people")
assert replace_blank("python program language",'$')==("python$program$language")
assert replace_blank("blank space","-")==("blank-space")
[BEGIN]
def replace_blank(str1,char):

 str2 = str1.replace(' ', char)

 return str2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum in the given right triangle of numbers. Your code should pass these tests:

assert max_sum([[1], [2,1], [3,3,2]], 3) == 6
assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 
assert max_sum([[2], [3,2], [13,23,12]], 3) == 28
[BEGIN]
def max_sum(tri, n): 

	if n > 1: 

		tri[1][1] = tri[1][1]+tri[0][0] 

		tri[1][0] = tri[1][0]+tri[0][0] 

	for i in range(2, n): 

		tri[i][0] = tri[i][0] + tri[i-1][0] 

		tri[i][i] = tri[i][i] + tri[i-1][i-1] 

		for j in range(1, i): 

			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 

				tri[i][j] = tri[i][j] + tri[i-1][j-1] 

			else: 

				tri[i][j] = tri[i][j]+tri[i-1][j] 

	return (max(tri[n-1]))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the n largest items from a dataset. Your code should pass these tests:

assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]
assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]
assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]
[BEGIN]
import heapq

def larg_nnum(list1,n):

 largest=heapq.nlargest(n,list1)

 return largest
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the lateral surface area of a cylinder. Your code should pass these tests:

assert lateralsuface_cylinder(10,5)==314.15000000000003
assert lateralsuface_cylinder(4,5)==125.66000000000001
assert lateralsuface_cylinder(4,10)==251.32000000000002
[BEGIN]
def lateralsuface_cylinder(r,h):

  lateralsurface= 2*3.1415*r*h

  return lateralsurface
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the volume of a cube. Your code should pass these tests:

assert volume_cube(3)==27
assert volume_cube(2)==8
assert volume_cube(5)==125
[BEGIN]
def volume_cube(l):

  volume = l * l * l

  return volume
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to set all even bits of a given number. Your code should pass these tests:

assert even_bit_set_number(10) == 10
assert even_bit_set_number(20) == 30
assert even_bit_set_number(30) == 30
[BEGIN]
def even_bit_set_number(n): 

    count = 0;res = 0;temp = n 

    while(temp > 0): 

        if (count % 2 == 1): 

            res |= (1 << count)

        count+=1

        temp >>= 1

    return (n | res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle. Your code should pass these tests:

assert No_of_Triangle(4,2) == 7
assert No_of_Triangle(4,3) == 3
assert No_of_Triangle(1,3) == -1
[BEGIN]
def No_of_Triangle(N,K):

    if (N < K):

        return -1;

    else:

        Tri_up = 0;

        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;

        Tri_down = 0;

        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;

        return Tri_up + Tri_down;
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check the occurrences of records which occur similar times in the given tuples. Your code should pass these tests:

assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}
assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}
assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}
[BEGIN]
from collections import Counter 

def check_occurences(test_list):

  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))

  return  (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count number of non-empty substrings of a given string. Your code should pass these tests:

assert number_of_substrings("abc") == 6
assert number_of_substrings("abcd") == 10
assert number_of_substrings("abcde") == 15
[BEGIN]
def number_of_substrings(str): 

	str_len = len(str); 

	return int(str_len * (str_len + 1) / 2); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m. Your code should pass these tests:

assert get_total_number_of_sequences(10, 4) == 4
assert get_total_number_of_sequences(5, 2) == 6
assert get_total_number_of_sequences(16, 3) == 84
[BEGIN]
def get_total_number_of_sequences(m,n): 

	T=[[0 for i in range(n+1)] for i in range(m+1)] 

	for i in range(m+1): 

		for j in range(n+1): 

			if i==0 or j==0: 

				T[i][j]=0

			elif i<j: 

				T[i][j]=0

			elif j==1: 

				T[i][j]=i 

			else: 

				T[i][j]=T[i-1][j]+T[i//2][j-1] 

	return T[m][n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace the last element of the list with another list. Your code should pass these tests:

assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]
assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]
assert replace_list(["red","blue","green"],["yellow"])==["red","blue","yellow"]
[BEGIN]
def replace_list(list1,list2):

 list1[-1:] = list2

 replace_list=list1

 return replace_list


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to generate a 3d array having each element as '*'. Your code should pass these tests:

assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]
assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]
assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]
[BEGIN]
def array_3d(m,n,o):

 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]

 return array_3d
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count total characters in a string. Your code should pass these tests:

assert count_charac("python programming")==18
assert count_charac("language")==8
assert count_charac("words")==5
[BEGIN]
def count_charac(str1):

 total = 0

 for i in str1:

    total = total + 1

 return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given list based on the occurrence of first element of tuples. Your code should pass these tests:

assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]
assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]
assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]
[BEGIN]
def sort_on_occurence(lst): 

	dct = {} 

	for i, j in lst: 

		dct.setdefault(i, []).append(j) 

	return ([(i, *dict.fromkeys(j), len(j)) 

				for i, j in dct.items()]) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the next perfect square greater than a given number. Your code should pass these tests:

assert next_Perfect_Square(35) == 36
assert next_Perfect_Square(6) == 9
assert next_Perfect_Square(9) == 16
[BEGIN]
import math  

def next_Perfect_Square(N): 

    nextN = math.floor(math.sqrt(N)) + 1

    return nextN * nextN 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum of bi-tonic sub-sequence for the given array. Your code should pass these tests:

assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194
assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210
assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138
[BEGIN]
def max_sum(arr, n): 

	MSIBS = arr[:] 

	for i in range(n): 

		for j in range(0, i): 

			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 

				MSIBS[i] = MSIBS[j] + arr[i] 

	MSDBS = arr[:] 

	for i in range(1, n + 1): 

		for j in range(1, i): 

			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 

				MSDBS[-i] = MSDBS[-j] + arr[-i] 

	max_sum = float("-Inf") 

	for i, j, k in zip(MSIBS, MSDBS, arr): 

		max_sum = max(max_sum, i + j - k) 

	return max_sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function for computing square roots using the babylonian method. Your code should pass these tests:

assert babylonian_squareroot(10)==3.162277660168379
assert babylonian_squareroot(2)==1.414213562373095
assert babylonian_squareroot(9)==3.0
[BEGIN]
def babylonian_squareroot(number):

    if(number == 0):

        return 0;

    g = number/2.0;

    g2 = g + 1;

    while(g != g2):

        n = number/ g;

        g2 = g;

        g = (g + n)/2;

    return g;
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest palindromic subsequence in the given string. Your code should pass these tests:

assert lps("TENS FOR TENS") == 5 
assert lps("CARDIO FOR CARDS") == 7
assert lps("PART OF THE JOURNEY IS PART") == 9 
[BEGIN]
def lps(str): 

	n = len(str) 

	L = [[0 for x in range(n)] for x in range(n)] 

	for i in range(n): 

		L[i][i] = 1

	for cl in range(2, n+1): 

		for i in range(n-cl+1): 

			j = i+cl-1

			if str[i] == str[j] and cl == 2: 

				L[i][j] = 2

			elif str[i] == str[j]: 

				L[i][j] = L[i+1][j-1] + 2

			else: 

				L[i][j] = max(L[i][j-1], L[i+1][j]); 

	return L[0][n-1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the harmonic sum of n-1. Your code should pass these tests:

assert harmonic_sum(7) == 2.5928571428571425
assert harmonic_sum(4) == 2.083333333333333
assert harmonic_sum(19) == 3.547739657143682
[BEGIN]
def harmonic_sum(n):

  if n < 2:

    return 1

  else:

    return 1 / n + (harmonic_sum(n - 1)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the intersection of two arrays using lambda function. Your code should pass these tests:

assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]
assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]
assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]
[BEGIN]
def intersection_array(array_nums1,array_nums2):

 result = list(filter(lambda x: x in array_nums1, array_nums2)) 

 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the occcurences of an element in a tuple. Your code should pass these tests:

assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4
[BEGIN]
def count_X(tup, x): 

    count = 0

    for ele in tup: 

        if (ele == x): 

            count = count + 1

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to insert an element before each element of a list. Your code should pass these tests:

assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] 
assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] 
assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] 
[BEGIN]
def insert_element(list,element):

 list = [v for elt in list for v in (element, elt)]

 return list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert complex numbers to polar coordinates. Your code should pass these tests:

assert convert(1) == (1.0, 0.0)
assert convert(4) == (4.0,0.0)
assert convert(5) == (5.0,0.0)
[BEGIN]
import cmath  

def convert(numbers):    

  num = cmath.polar(numbers)  

  return (num) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count integers from a given list. Your code should pass these tests:

assert count_integer([1,2,'abc',1.2]) == 2
assert count_integer([1,2,3]) == 3
assert count_integer([1,1.2,4,5.1]) == 2
[BEGIN]
def count_integer(list1):

    ctr = 0

    for i in list1:

        if isinstance(i, int):

            ctr = ctr + 1

    return ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all words starting with 'a' or 'e' in a given string. Your code should pass these tests:

assert words_ae("python programe")==['ame']
assert words_ae("python programe language")==['ame','anguage']
assert words_ae("assert statement")==['assert', 'atement']
[BEGIN]
import re

def words_ae(text):

 list = re.findall("[ae]\w+", text)

 return list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions. Your code should pass these tests:

assert combinations_colors( ["Red","Green","Blue"],1)==[('Red',), ('Green',), ('Blue',)]
assert combinations_colors( ["Red","Green","Blue"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]
assert combinations_colors( ["Red","Green","Blue"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]
[BEGIN]
from itertools import combinations_with_replacement 

def combinations_colors(l, n):

    return list(combinations_with_replacement(l,n))

[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of prime numbers less than a given non-negative number. Your code should pass these tests:

assert count_Primes_nums(5) == 2
assert count_Primes_nums(10) == 4
assert count_Primes_nums(100) == 25
[BEGIN]
def count_Primes_nums(n):

    ctr = 0

    for num in range(n):

        if num <= 1:

            continue

        for i in range(2,num):

            if (num % i) == 0:

                break

        else:

            ctr += 1

    return ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to swap two numbers. Your code should pass these tests:

assert swap_numbers(10,20)==(20,10)
assert swap_numbers(15,17)==(17,15)
assert swap_numbers(100,200)==(200,100)
[BEGIN]
def swap_numbers(a,b):

 temp = a

 a = b

 b = temp

 return (a,b)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find number of odd elements in the given list using lambda function. Your code should pass these tests:

assert count_odd([1, 2, 3, 5, 7, 8, 10])==4
assert count_odd([10,15,14,13,-18,12,-20])==2
assert count_odd([1, 2, 4, 8, 9])==2
[BEGIN]
def count_odd(array_nums):

   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))

   return count_odd
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to maximize the given two tuples. Your code should pass these tests:

assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))
assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))
assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))
[BEGIN]
def maximize_elements(test_tup1, test_tup2):

  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))

   for tup1, tup2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth newman–shanks–williams prime number. Your code should pass these tests:

assert newman_prime(3) == 7 
assert newman_prime(4) == 17
assert newman_prime(5) == 41
[BEGIN]
def newman_prime(n): 

	if n == 0 or n == 1: 

		return 1

	return 2 * newman_prime(n - 1) + newman_prime(n - 2)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform mathematical division operation across the given tuples. Your code should pass these tests:

assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)
assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)
assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)
[BEGIN]
def division_elements(test_tup1, test_tup2):

  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to split a given list into two parts where the length of the first part of the list is given. Your code should pass these tests:

assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])
[BEGIN]
def split_two_parts(list1, L):

    return list1[:L], list1[L:]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to merge two dictionaries. Your code should pass these tests:

assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}
assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}
assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}
[BEGIN]
def merge_dict(d1,d2):

 d = d1.copy()

 d.update(d2)

 return d
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate a dog's age in dog's years. Your code should pass these tests:

assert dog_age(12)==61
assert dog_age(15)==73
assert dog_age(24)==109
[BEGIN]
def dog_age(h_age):

 if h_age < 0:

 	exit()

 elif h_age <= 2:

	 d_age = h_age * 10.5

 else:

	 d_age = 21 + (h_age - 2)*4

 return d_age
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to split a list for every nth element. Your code should pass these tests:

assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] 
assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] 
assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] 
[BEGIN]
def list_split(S, step):

    return [S[i::step] for i in range(step)]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the lateral surface area of a cube. Your code should pass these tests:

assert lateralsurface_cube(5)==100
assert lateralsurface_cube(9)==324
assert lateralsurface_cube(10)==400
[BEGIN]
def lateralsurface_cube(l):

  LSA = 4 * (l * l)

  return LSA
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of squares of first n odd natural numbers. Your code should pass these tests:

assert square_Sum(2) == 10
assert square_Sum(3) == 35
assert square_Sum(4) == 84
[BEGIN]
def square_Sum(n):  

    return int(n*(4*n*n-1)/3) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n'th star number. Your code should pass these tests:

assert find_star_num(3) == 37
assert find_star_num(4) == 73
assert find_star_num(5) == 121
[BEGIN]
def find_star_num(n): 

	return (6 * n * (n - 1) + 1) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the ascii value of a character. Your code should pass these tests:

assert ascii_value('A')==65
assert ascii_value('R')==82
assert ascii_value('S')==83
[BEGIN]
def ascii_value(k):

  ch=k

  return ord(ch)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of even numbers at even positions. Your code should pass these tests:

assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30
assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26
assert sum_even_and_even_index([5, 6, 12, 1],4) == 12
[BEGIN]
def sum_even_and_even_index(arr,n):  

    i = 0

    sum = 0

    for i in range(0,n,2): 

        if (arr[i] % 2 == 0) : 

            sum += arr[i]  

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of fifth power of first n even natural numbers. Your code should pass these tests:

assert even_Power_Sum(2) == 1056
assert even_Power_Sum(3) == 8832
assert even_Power_Sum(1) == 32
[BEGIN]
def even_Power_Sum(n): 

    sum = 0; 

    for i in range(1,n+1): 

        j = 2*i; 

        sum = sum + (j*j*j*j*j); 

    return sum; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perfom the rear element extraction from list of tuples records. Your code should pass these tests:

assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]
assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]
assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]
[BEGIN]
def rear_extract(test_list):

  res = [lis[-1] for lis in test_list]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to substract the contents of one tuple with corresponding index of other tuple. Your code should pass these tests:

assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
[BEGIN]
def substract_elements(test_tup1, test_tup2):

  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of even index binomial coefficients. Your code should pass these tests:

assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
[BEGIN]
import math  

def even_binomial_Coeff_Sum( n): 

    return (1 << (n - 1)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the position of the last removed element from the given array. Your code should pass these tests:

assert get_Position([2,5,4],3,2) == 2
assert get_Position([4,3],2,2) == 2
assert get_Position([1,2,3,4],4,1) == 4
[BEGIN]
import math as mt 

def get_Position(a,n,m): 

    for i in range(n): 

        a[i] = (a[i] // m + (a[i] % m != 0))  

    result,maxx = -1,-1

    for i in range(n - 1,-1,-1): 

        if (maxx < a[i]): 

            maxx = a[i] 

            result = i 

    return result + 1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the volume of a cylinder. Your code should pass these tests:

assert volume_cylinder(10,5)==1570.7500000000002
assert volume_cylinder(4,5)==251.32000000000002
assert volume_cylinder(4,10)==502.64000000000004
[BEGIN]
def volume_cylinder(r,h):

  volume=3.1415*r*r*h

  return volume
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to filter a dictionary based on values. Your code should pass these tests:

assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}
assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}
assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}
[BEGIN]
def dict_filter(dict,n):

 result = {key:value for (key, value) in dict.items() if value >=n}

 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the element count that occurs before the record in the given tuple. Your code should pass these tests:

assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3
assert count_first_elements((2, 9, (5, 7), 11) ) == 2
assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4
[BEGIN]
def count_first_elements(test_tup):

  for count, ele in enumerate(test_tup):

    if isinstance(ele, tuple):

      break

  return (count) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth decagonal number. Your code should pass these tests:

assert is_num_decagonal(3) == 27
assert is_num_decagonal(7) == 175
assert is_num_decagonal(10) == 370
[BEGIN]
def is_num_decagonal(n): 

	return 4 * n * n - 3 * n 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to search an element in the given array by using sequential search. Your code should pass these tests:

assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)
[BEGIN]
def sequential_search(dlist, item):

    pos = 0

    found = False

    while pos < len(dlist) and not found:

        if dlist[pos] == item:

            found = True

        else:

            pos = pos + 1

    return found, pos
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check if the elements of a given list are unique or not. Your code should pass these tests:

assert all_unique([1,2,3]) == True
assert all_unique([1,2,1,2]) == False
assert all_unique([1,2,3,4,5]) == True
[BEGIN]
def all_unique(test_list):

    if len(test_list) > len(set(test_list)):

        return False

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to substaract two lists using map and lambda function. Your code should pass these tests:

assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]
assert sub_list([1,2],[3,4])==[-2,-2]
assert sub_list([90,120],[50,70])==[40,50]
[BEGIN]
def sub_list(nums1,nums2):

  result = map(lambda x, y: x - y, nums1, nums2)

  return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the frequency of each digit is less than or equal to the digit itself. Your code should pass these tests:

assert validate(1234) == True
assert validate(51241) == False
assert validate(321) == True
[BEGIN]
def validate(n): 

    for i in range(10): 

        temp = n;  

        count = 0; 

        while (temp): 

            if (temp % 10 == i): 

                count+=1;  

            if (count > i): 

                return False

            temp //= 10; 

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether all items of a list are equal to a given string. Your code should pass these tests:

assert check_element(["green", "orange", "black", "white"],'blue')==False
assert check_element([1,2,3,4],7)==False
assert check_element(["green", "green", "green", "green"],'green')==True
[BEGIN]
def check_element(list,element):

  check_element=all(v== element for v in list)

  return check_element
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an a followed by two to three 'b'. Your code should pass these tests:

assert text_match_two_three("ac")==('Not matched!')
assert text_match_two_three("dc")==('Not matched!')
assert text_match_two_three("abbbba")==('Found a match!')
[BEGIN]
import re

def text_match_two_three(text):

        patterns = 'ab{2,3}'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times. Your code should pass these tests:

assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30
assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59
assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1
[BEGIN]
def max_sub_array_sum_repeated(a, n, k): 

	max_so_far = -2147483648

	max_ending_here = 0

	for i in range(n*k): 

		max_ending_here = max_ending_here + a[i%n] 

		if (max_so_far < max_ending_here): 

			max_so_far = max_ending_here 

		if (max_ending_here < 0): 

			max_ending_here = 0

	return max_so_far
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of squares of first n even natural numbers. Your code should pass these tests:

assert square_Sum(2) == 20
assert square_Sum(3) == 56
assert square_Sum(4) == 120
[BEGIN]
def square_Sum(n):  

    return int(2*n*(n+1)*(2*n+1)/3)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count array elements having modular inverse under given prime number p equal to itself. Your code should pass these tests:

assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2
assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3
assert modular_inverse([2, 3, 4, 5], 4, 6) == 1
[BEGIN]
def modular_inverse(arr, N, P):

	current_element = 0

	for i in range(0, N):

		if ((arr[i] * arr[i]) % P == 1):

			current_element = current_element + 1

	return current_element
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to calculate the number of odd days in a given year. Your code should pass these tests:

assert odd_Days(100) == 5
assert odd_Days(50) ==6
assert odd_Days(75) == 2
[BEGIN]
def odd_Days(N): 

    hund1 = N // 100

    hund4 = N // 400

    leap = N >> 2

    ordd = N - leap 

    if (hund1): 

        ordd += hund1 

        leap -= hund1 

    if (hund4): 

        ordd -= hund4 

        leap += hund4 

    days = ordd + leap * 2

    odd = days % 7

    return odd 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the list of lists with maximum length. Your code should pass these tests:

assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])
assert max_length([[5], [15,20,25]])==(3, [15,20,25])
[BEGIN]
def max_length(list1):

    max_length = max(len(x) for x in  list1 )  

    max_list = max((x) for x in   list1)

    return(max_length, max_list)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors. Your code should pass these tests:

assert count_no_of_ways(2, 4) == 16
assert count_no_of_ways(3, 2) == 6
assert count_no_of_ways(4, 4) == 228
[BEGIN]
def count_no_of_ways(n, k): 

	dp = [0] * (n + 1) 

	total = k 

	mod = 1000000007

	dp[1] = k 

	dp[2] = k * k	 

	for i in range(3,n+1): 

		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 

	return dp[n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find quotient of two numbers. Your code should pass these tests:

assert find(10,3) == 3
assert find(4,2) == 2
assert find(20,5) == 4
[BEGIN]
def find(n,m):  

    q = n//m 

    return (q)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the third side of a right angled triangle. Your code should pass these tests:

assert otherside_rightangle(7,8)==10.63014581273465
assert otherside_rightangle(3,4)==5
assert otherside_rightangle(7,15)==16.55294535724685
[BEGIN]
import math

def otherside_rightangle(w,h):

  s=math.sqrt((w*w)+(h*h))

  return s
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum value in a given heterogeneous list. Your code should pass these tests:

assert max_val(['Python', 3, 2, 4, 5, 'version'])==5
assert max_val(['Python', 15, 20, 25])==25
assert max_val(['Python', 30, 20, 40, 50, 'version'])==50
[BEGIN]
def max_val(listval):

     max_val = max(i for i in listval if isinstance(i, int)) 

     return(max_val)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to return the sum of all divisors of a number. Your code should pass these tests:

assert sum_div(8)==7
assert sum_div(12)==16
assert sum_div(7)==1
[BEGIN]
def sum_div(number):

    divisors = [1]

    for i in range(2, number):

        if (number % i)==0:

            divisors.append(i)

    return sum(divisors)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count inversions in an array. Your code should pass these tests:

assert get_Inv_Count([1,20,6,4,5],5) == 5
assert get_Inv_Count([1,2,1],3) == 1
assert get_Inv_Count([1,2,5,6,1],5) == 3
[BEGIN]
def get_Inv_Count(arr,n): 

    inv_count = 0

    for i in range(n): 

        for j in range(i + 1,n): 

            if (arr[i] > arr[j]): 

                inv_count += 1

    return inv_count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to flatten a given nested list structure. Your code should pass these tests:

assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
[BEGIN]
def flatten_list(list1):

    result_list = []

    if not list1: return result_list

    stack = [list(list1)]

    while stack:

        c_num = stack.pop()

        next = c_num.pop()

        if c_num: stack.append(c_num)

        if isinstance(next, list):

            if next: stack.append(list(next))

        else: result_list.append(next)

    result_list.reverse()

    return result_list 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nested list elements which are present in another list. Your code should pass these tests:

assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]
assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]
assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]
[BEGIN]
def intersection_nested_lists(l1, l2):

    result = [[n for n in lst if n in l1] for lst in l2]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the maximum aggregate from the list of tuples. Your code should pass these tests:

assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)
assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)
assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)
[BEGIN]
from collections import defaultdict

def max_aggregate(stdata):

    temp = defaultdict(int)

    for name, marks in stdata:

        temp[name] += marks

    return max(temp.items(), key=lambda x: x[1])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. Your code should pass these tests:

assert count_binary_seq(1) == 2.0
assert count_binary_seq(2) == 6.0
assert count_binary_seq(3) == 20.0
[BEGIN]
def count_binary_seq(n): 

	nCr = 1

	res = 1

	for r in range(1, n + 1): 

		nCr = (nCr * (n + 1 - r)) / r 

		res += nCr * nCr 

	return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the depth of a dictionary. Your code should pass these tests:

assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4
assert dict_depth({'a':1, 'b': {'c':'python'}})==2
assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3
[BEGIN]
def dict_depth(d):

    if isinstance(d, dict):

        return 1 + (max(map(dict_depth, d.values())) if d else 0)

    return 0
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the most significant bit number which is also a set bit. Your code should pass these tests:

assert set_Bit_Number(6) == 4
assert set_Bit_Number(10) == 8
assert set_Bit_Number(18) == 16
[BEGIN]
def set_Bit_Number(n): 

    if (n == 0): 

        return 0; 

    msb = 0; 

    n = int(n / 2); 

    while (n > 0): 

        n = int(n / 2); 

        msb += 1; 

    return (1 << msb)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the count of inversion of two types are same or not. Your code should pass these tests:

assert solve([1,0,2],3) == True
assert solve([1,2,0],3) == False
assert solve([1,2,1],3) == True
[BEGIN]
import sys 

def solve(a,n):   

    mx = -sys.maxsize - 1

    for j in range(1,n):  

        if (mx > a[j]):  

            return False  

        mx = max(mx,a[j - 1])    

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find element at a given index after number of rotations. Your code should pass these tests:

assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3
assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3
assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1
[BEGIN]
def find_Element(arr,ranges,rotations,index) :  

    for i in range(rotations - 1,-1,-1 ) : 

        left = ranges[i][0] 

        right = ranges[i][1] 

        if (left <= index and right >= index) : 

            if (index == left) : 

                index = right 

            else : 

                index = index - 1 

    return arr[index] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to match two words from a list of words starting with letter 'p'. Your code should pass these tests:

assert start_withp(["Python PHP", "Java JavaScript", "c c++"])==('Python', 'PHP')
assert start_withp(["Python Programming","Java Programming"])==('Python','Programming')
assert start_withp(["Pqrst Pqr","qrstuv"])==('Pqrst','Pqr')
[BEGIN]
import re

def start_withp(words):

 for w in words:

        m = re.match("(P\w+)\W(P\w+)", w)

        if m:

            return m.groups()
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i . Your code should pass these tests:

assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11
assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7
assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71
[BEGIN]
def max_sum_increasing_subseq(a, n, index, k):

	dp = [[0 for i in range(n)] 

			for i in range(n)]

	for i in range(n):

		if a[i] > a[0]:

			dp[0][i] = a[i] + a[0]

		else:

			dp[0][i] = a[i]

	for i in range(1, n):

		for j in range(n):

			if a[j] > a[i] and j > i:

				if dp[i - 1][i] + a[j] > dp[i - 1][j]:

					dp[i][j] = dp[i - 1][i] + a[j]

				else:

					dp[i][j] = dp[i - 1][j]

			else:

				dp[i][j] = dp[i - 1][j]

	return dp[index][k]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get a colon of a tuple. Your code should pass these tests:

assert colon_tuplex(("HELLO", 5, [], True) ,2,50)==("HELLO", 5, [50], True) 
assert colon_tuplex(("HELLO", 5, [], True) ,2,100)==(("HELLO", 5, [100],True))
assert colon_tuplex(("HELLO", 5, [], True) ,2,500)==("HELLO", 5, [500], True)
[BEGIN]
from copy import deepcopy

def colon_tuplex(tuplex,m,n):

  tuplex_colon = deepcopy(tuplex)

  tuplex_colon[m].append(n)

  return tuplex_colon
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the specified number of largest products from two given lists. Your code should pass these tests:

assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]
assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]
assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]
[BEGIN]
def large_product(nums1, nums2, N):

    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum of two numbers. Your code should pass these tests:

assert maximum(5,10) == 10
assert maximum(-1,-2) == -1
assert maximum(9,7) == 9
[BEGIN]
def maximum(a,b):   

    if a >= b: 

        return a 

    else: 

        return b 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a given string to a tuple. Your code should pass these tests:

assert string_to_tuple("python 3.0")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
assert string_to_tuple("item1")==('i', 't', 'e', 'm', '1')
assert string_to_tuple("15.10")==('1', '5', '.', '1', '0')
[BEGIN]
def string_to_tuple(str1):

    result = tuple(x for x in str1 if not x.isspace()) 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to set the left most unset bit. Your code should pass these tests:

assert set_left_most_unset_bit(10) == 14
assert set_left_most_unset_bit(12) == 14
assert set_left_most_unset_bit(15) == 15
[BEGIN]
def set_left_most_unset_bit(n): 

    if not (n & (n + 1)): 

        return n 

    pos, temp, count = 0, n, 0 

    while temp: 

        if not (temp & 1): 

            pos = count      

        count += 1; temp>>=1

    return (n | (1 << (pos))) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the volume of a cone. Your code should pass these tests:

assert volume_cone(5,12)==314.15926535897927
assert volume_cone(10,15)==1570.7963267948965
assert volume_cone(19,17)==6426.651371693521
[BEGIN]
import math

def volume_cone(r,h):

  volume = (1.0/3) * math.pi * r * r * h

  return volume
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to print positive numbers in a list. Your code should pass these tests:

assert pos_nos([-1,-2,1,2]) == 1,2
assert pos_nos([3,4,-5]) == 3,4
assert pos_nos([-2,-3,1]) == 1
[BEGIN]
def pos_nos(list1):

  for num in list1: 

    if num >= 0: 

       return num 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n. Your code should pass these tests:

assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7
assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24
assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81
[BEGIN]
def max_sum_rectangular_grid(grid, n) : 

	incl = max(grid[0][0], grid[1][0]) 

	excl = 0

	for i in range(1, n) : 

		excl_new = max(excl, incl) 

		incl = excl + max(grid[0][i], grid[1][i]) 

		excl = excl_new 

	return max(excl, incl)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first maximum length of even word. Your code should pass these tests:

assert find_Max_Len_Even("python language") == "language"
assert find_Max_Len_Even("maximum even length") == "length"
assert find_Max_Len_Even("eve") == "-1"
[BEGIN]
def find_Max_Len_Even(str): 

    n = len(str) 

    i = 0

    currlen = 0

    maxlen = 0

    st = -1

    while (i < n): 

        if (str[i] == ' '): 

            if (currlen % 2 == 0): 

                if (maxlen < currlen): 

                    maxlen = currlen 

                    st = i - currlen 

            currlen = 0 

        else : 

            currlen += 1

        i += 1

    if (currlen % 2 == 0): 

        if (maxlen < currlen): 

            maxlen = currlen 

            st = i - currlen 

    if (st == -1): 

        return "-1" 

    return str[st: st + maxlen] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the index of the last occurrence of a given number in a sorted array. Your code should pass these tests:

assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3
assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9
assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6
[BEGIN]
def find_last_occurrence(A, x):

    (left, right) = (0, len(A) - 1)

    result = -1

    while left <= right:

        mid = (left + right) // 2

        if x == A[mid]:

            result = mid

            left = mid + 1

        elif x < A[mid]:

            right = mid - 1

        else:

            left = mid + 1

    return result 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to reflect the modified run-length encoding from a list. Your code should pass these tests:

assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]
assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']
assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']
[BEGIN]
from itertools import groupby

def modified_encode(alist):

        def ctr_ele(el):

            if len(el)>1: return [len(el), el[0]]

            else: return el[0]

        return [ctr_ele(list(group)) for key, group in groupby(alist)]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum volume of a cuboid with given sum of sides. Your code should pass these tests:

assert max_volume(8) == 18
assert max_volume(4) == 2
assert max_volume(1) == 0
[BEGIN]
def max_volume (s): 

    maxvalue = 0

    i = 1

    for i in range(s - 1): 

        j = 1

        for j in range(s): 

            k = s - i - j 

            maxvalue = max(maxvalue, i * j * k)         

    return maxvalue 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all five characters long word in the given string by using regex. Your code should pass these tests:

assert find_long_word('Please move back to strem') == ['strem']
assert find_long_word('4K Ultra HD streaming player') == ['Ultra']
assert find_long_word('Streaming Media Player') == ['Media']
[BEGIN]
import re

def find_long_word(text):

  return (re.findall(r"\b\w{5}\b", text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers. Your code should pass these tests:

assert sum_difference(12)==5434
assert sum_difference(20)==41230
assert sum_difference(54)==2151270
[BEGIN]
def sum_difference(n):

    sumofsquares = 0

    squareofsum = 0

    for num in range(1, n+1):

        sumofsquares += num * num

        squareofsum += num

    squareofsum = squareofsum ** 2

    return squareofsum - sumofsquares
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the demlo number for the given number. Your code should pass these tests:

assert find_demlo("111111") == '12345654321'
assert find_demlo("1111") == '1234321'
assert find_demlo("13333122222") == '123456789101110987654321'
[BEGIN]
def find_demlo(s): 

	l = len(s) 

	res = "" 

	for i in range(1,l+1): 

		res = res + str(i) 

	for i in range(l-1,0,-1): 

		res = res + str(i) 

	return res 	
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all index positions of the minimum values in a given list. Your code should pass these tests:

assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]
assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]
assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]
[BEGIN]
def position_min(list1):

    min_val = min(list1)

    min_result = [i for i, j in enumerate(list1) if j == min_val]

    return min_result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to re-arrange the given array in alternating positive and negative items. Your code should pass these tests:

assert re_arrange([-5, -2, 5, 2, 4,	7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]
assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]
assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]
[BEGIN]
def right_rotate(arr, n, out_of_place, cur):

	temp = arr[cur]

	for i in range(cur, out_of_place, -1):

		arr[i] = arr[i - 1]

	arr[out_of_place] = temp

	return arr

def re_arrange(arr, n):

	out_of_place = -1

	for index in range(n):

		if (out_of_place >= 0):

			if ((arr[index] >= 0 and arr[out_of_place] < 0) or

			(arr[index] < 0 and arr[out_of_place] >= 0)):

				arr = right_rotate(arr, n, out_of_place, index)

				if (index-out_of_place > 2):

					out_of_place += 2

				else:

					out_of_place = - 1

		if (out_of_place == -1):

			if ((arr[index] >= 0 and index % 2 == 0) or

			 (arr[index] < 0 and index % 2 == 1)):

				out_of_place = index

	return arr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the sum of alternate chains of tuples. Your code should pass these tests:

assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)
assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)
assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)
[BEGIN]
def sum_of_alternates(test_tuple):

  sum1 = 0

  sum2 = 0

  for idx, ele in enumerate(test_tuple):

    if idx % 2:

      sum1 += ele

    else:

      sum2 += ele

  return ((sum1),(sum2)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum number of squares whose sum is equal to a given number. Your code should pass these tests:

assert get_Min_Squares(6) == 3
assert get_Min_Squares(2) == 2
assert get_Min_Squares(4) == 1
[BEGIN]
def get_Min_Squares(n):

    if n <= 3:

        return n;

    res = n 

    for x in range(1,n + 1):

        temp = x * x;

        if temp > n:

            break

        else:

            res = min(res,1 + get_Min_Squares(n  - temp)) 

    return res;
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the word with most number of occurrences in the given strings list. Your code should pass these tests:

assert most_occurrences(["UTS is best for RTF", "RTF love UTS", "UTS is best"] ) == 'UTS'
assert most_occurrences(["Its been a great year", "this year is so worse", "this year is okay"] ) == 'year'
assert most_occurrences(["Families can be reunited", "people can be reunited", "Tasks can be achieved "] ) == 'can'
[BEGIN]
from collections import defaultdict 



def most_occurrences(test_list):

  temp = defaultdict(int)

  for sub in test_list:

    for wrd in sub.split():

      temp[wrd] += 1

  res = max(temp, key=temp.get)

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print check if the triangle is isosceles or not. Your code should pass these tests:

assert check_isosceles(6,8,12)==False 
assert check_isosceles(6,6,12)==True
assert check_isosceles(6,16,20)==False
[BEGIN]
def check_isosceles(x,y,z):

  if x==y or y==z or z==x:

	   return True

  else:

     return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to rotate a given list by specified number of items to the left direction. Your code should pass these tests:

assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]
assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]
assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]
[BEGIN]
def rotate_left(list1,m,n):

  result =  list1[m:]+list1[:n]

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count negative numbers in a list. Your code should pass these tests:

assert neg_count([-1,-2,3,-4,-5]) == 4
assert neg_count([1,2,3]) == 0
assert neg_count([1,2,-3,-10,20]) == 2
[BEGIN]
def neg_count(list):

  neg_count= 0

  for num in list: 

    if num <= 0: 

      neg_count += 1

  return neg_count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all three, four, five characters long words in the given string by using regex. Your code should pass these tests:

assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']
assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']
assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']
[BEGIN]
import re

def find_char(text):

  return (re.findall(r"\b\w{3,5}\b", text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count unset bits of a given number. Your code should pass these tests:

assert count_unset_bits(2) == 1
assert count_unset_bits(4) == 2
assert count_unset_bits(6) == 1
[BEGIN]
def count_unset_bits(n): 

    count = 0

    x = 1

    while(x < n + 1): 

        if ((x & n) == 0): 

            count += 1

        x = x << 1

    return count  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count character frequency of a given string. Your code should pass these tests:

assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}
assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}
assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}
[BEGIN]
def char_frequency(str1):

    dict = {}

    for n in str1:

        keys = dict.keys()

        if n in keys:

            dict[n] += 1

        else:

            dict[n] = 1

    return dict
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to sort a list according to the second element in sublist. Your code should pass these tests:

assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]
assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]
assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]
[BEGIN]
def Sort(sub_li): 

    sub_li.sort(key = lambda x: x[1]) 

    return sub_li 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the triangle is valid or not if sides are given. Your code should pass these tests:

assert check_Validity(1,2,3) == False
assert check_Validity(2,3,5) == False
assert check_Validity(7,10,5) == True
[BEGIN]
def check_Validity(a,b,c):  

    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 

        return False

    else: 

        return True        
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the sum of arithmetic progression. Your code should pass these tests:

assert ap_sum(1,5,2)==25
assert ap_sum(2,6,4)==72
assert ap_sum(1,4,5)==34
[BEGIN]
def ap_sum(a,n,d):

  total = (n * (2 * a + (n - 1) * d)) / 2

  return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given month name contains 28 days or not. Your code should pass these tests:

assert check_monthnum("February")==True
assert check_monthnum("January")==False
assert check_monthnum("March")==False
[BEGIN]
def check_monthnum(monthname1):

  if monthname1 == "February":

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a word at the end of a string, with optional punctuation. Your code should pass these tests:

assert text_match_word("python.")==('Found a match!')
assert text_match_word("python.")==('Found a match!')
assert text_match_word("  lang  .")==('Not matched!')
[BEGIN]
import re

def text_match_word(text):

        patterns = '\w+\S*$'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return 'Not matched!'
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of substrings with same first and last characters. Your code should pass these tests:

assert count_Substring_With_Equal_Ends('aba') == 4
assert count_Substring_With_Equal_Ends('abcab') == 7
assert count_Substring_With_Equal_Ends('abc') == 3
[BEGIN]
def check_Equality(s): 

    return (ord(s[0]) == ord(s[len(s) - 1])); 

def count_Substring_With_Equal_Ends(s): 

    result = 0; 

    n = len(s); 

    for i in range(n):

        for j in range(1,n-i+1): 

            if (check_Equality(s[i:i+j])): 

                result+=1; 

    return result; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum occuring divisor in an interval. Your code should pass these tests:

assert find_Divisor(2,2) == 2
assert find_Divisor(2,5) == 2
assert find_Divisor(5,10) == 2
[BEGIN]
def find_Divisor(x,y):  

    if (x==y): 

        return y 

    return 2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of the three lowest positive numbers from a given list of numbers. Your code should pass these tests:

assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37
assert sum_three_smallest_nums([1,2,3,4,5]) == 6
assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6
[BEGIN]
def sum_three_smallest_nums(lst):

	return sum(sorted([x for x in lst if x > 0])[:3])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given set into tuples. Your code should pass these tests:

assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)
assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)
assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)
[BEGIN]
def set_to_tuple(s):

  t = tuple(s)

  return (t)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the smallest range that includes at-least one element from each of the given arrays. Your code should pass these tests:

assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)
assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)
assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)
[BEGIN]
from heapq import heappop, heappush

class Node:

    def __init__(self, value, list_num, index):

        self.value = value

        self.list_num = list_num

        self.index = index

    def __lt__(self, other):

        return self.value < other.value

def find_minimum_range(list):

    high = float('-inf')

    p = (0, float('inf'))

    pq = []

    for i in range(len(list)):

        heappush(pq, Node(list[i][0], i, 0))

        high = max(high, list[i][0])

    while True:

        top = heappop(pq)

        low = top.value

        i = top.list_num

        j = top.index

        if high - low < p[1] - p[0]:

            p = (low, high)

        if j == len(list[i]) - 1:

            return p

        heappush(pq, Node(list[i][j + 1], i, j + 1))

        high = max(high, list[i][j + 1])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the number of digits and letters in a string. Your code should pass these tests:

assert dig_let("python")==(6,0)
assert dig_let("program")==(7,0)
assert dig_let("python3.0")==(6,2)
[BEGIN]
def dig_let(s):

 d=l=0

 for c in s:

    if c.isdigit():

        d=d+1

    elif c.isalpha():

        l=l+1

    else:

        pass

 return (l,d)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find number of elements with odd factors in a given range. Your code should pass these tests:

assert count_Odd_Squares(5,100) == 8
assert count_Odd_Squares(8,65) == 6
assert count_Odd_Squares(2,5) == 1
[BEGIN]
def count_Odd_Squares(n,m): 

    return int(m**0.5) - int((n-1)**0.5) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the difference between two consecutive numbers in a given list. Your code should pass these tests:

assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]
assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]
assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]
[BEGIN]
def diff_consecutivenums(nums):

    result = [b-a for a, b in zip(nums[:-1], nums[1:])]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find entringer number e(n, k). Your code should pass these tests:

assert zigzag(4, 3) == 5
assert zigzag(4, 2) == 4
assert zigzag(3, 1) == 1
[BEGIN]
def zigzag(n, k): 

	if (n == 0 and k == 0): 

		return 1

	if (k == 0): 

		return 0

	return zigzag(n, k - 1) + zigzag(n - 1, n - k)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of squares in a rectangle. Your code should pass these tests:

assert count_Squares(4,3) == 20
assert count_Squares(1,2) == 2
assert count_Squares(2,2) == 5
[BEGIN]
def count_Squares(m,n): 

    if (n < m): 

        temp = m 

        m = n 

        n = temp 

    return n * (n + 1) * (3 * m - n + 1) // 6
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values. Your code should pass these tests:

assert find_ways(4) == 2
assert find_ways(6) == 5
assert find_ways(8) == 14
[BEGIN]
def bin_coff(n, r): 

	val = 1

	if (r > (n - r)): 

		r = (n - r) 

	for i in range(0, r): 

		val *= (n - i) 

		val //= (i + 1) 

	return val 

def find_ways(M): 

	n = M // 2

	a = bin_coff(2 * n, n) 

	b = a // (n + 1) 

	return (b) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given string is a binary string or not. Your code should pass these tests:

assert check("01010101010") == "Yes"
assert check("name0") == "No"
assert check("101") == "Yes"
[BEGIN]
def check(string) :

    p = set(string) 

    s = {'0', '1'} 

    if s == p or p == {'0'} or p == {'1'}: 

        return ("Yes") 

    else : 

        return ("No") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to minimize the length of the string by removing occurrence of only one character. Your code should pass these tests:

assert minimum_Length("mnm") == 1
assert minimum_Length("abcda") == 3
assert minimum_Length("abcb") == 2
[BEGIN]
def minimum_Length(s) : 

    maxOcc = 0

    n = len(s) 

    arr = [0]*26

    for i in range(n) : 

        arr[ord(s[i]) -ord('a')] += 1

    for i in range(26) : 

        if arr[i] > maxOcc : 

            maxOcc = arr[i] 

    return n - maxOcc 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first element occurring k times in a given array. Your code should pass these tests:

assert first_Element([0,1,2,3,4,5],6,1) == 0
assert first_Element([1,2,1,3,4],5,2) == 1
assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2
[BEGIN]
def first_Element(arr,n,k): 

    count_map = {}; 

    for i in range(0, n): 

        if(arr[i] in count_map.keys()): 

            count_map[arr[i]] += 1

        else: 

            count_map[arr[i]] = 1

        i += 1

    for i in range(0, n):  

        if (count_map[arr[i]] == k): 

            return arr[i] 

        i += 1 

    return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether all the characters in a given string are unique. Your code should pass these tests:

assert unique_Characters('aba') == False
assert unique_Characters('abc') == True
assert unique_Characters('abab') == False
[BEGIN]
def unique_Characters(str):

    for i in range(len(str)):

        for j in range(i + 1,len(str)): 

            if (str[i] == str[j]):

                return False;

    return True;
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove a specified column from a given nested list. Your code should pass these tests:

assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]
assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]
assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]
[BEGIN]
def remove_column(list1, n):

   for i in list1: 

    del i[n] 

   return list1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find t-nth term of arithemetic progression. Your code should pass these tests:

assert tn_ap(1,5,2)==9
assert tn_ap(2,6,4)==22
assert tn_ap(1,4,5)==16
[BEGIN]
def tn_ap(a,n,d):

  tn = a + (n - 1) * d

  return tn
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of rectangles in a circle of radius r. Your code should pass these tests:

assert count_Rectangles(2) == 8
assert count_Rectangles(1) == 1
assert count_Rectangles(0) == 0
[BEGIN]
def count_Rectangles(radius):  

    rectangles = 0 

    diameter = 2 * radius 

    diameterSquare = diameter * diameter 

    for a in range(1, 2 * radius):  

        for b in range(1, 2 * radius): 

            diagnalLengthSquare = (a * a +  b * b)  

            if (diagnalLengthSquare <= diameterSquare) : 

                rectangles += 1

    return rectangles 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the third angle of a triangle using two angles. Your code should pass these tests:

assert find_angle(47,89)==44
assert find_angle(45,95)==40
assert find_angle(50,40)==90
[BEGIN]
def find_angle(a,b):

 c = 180 - (a + b)

 return c


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum element of all the given tuple records. Your code should pass these tests:

assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10
assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11
assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12
[BEGIN]
def find_max(test_list):

  res = max(int(j) for i in test_list for j in i)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find modulo division of two lists using map and lambda function. Your code should pass these tests:

assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]
assert moddiv_list([3,2],[1,4])==[0, 2]
assert moddiv_list([90,120],[50,70])==[40, 50]
[BEGIN]
def moddiv_list(nums1,nums2):

  result = map(lambda x, y: x % y, nums1, nums2)

  return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether one root of the quadratic equation is twice of the other or not. Your code should pass these tests:

assert Check_Solution(1,3,2) == "Yes"
assert Check_Solution(1,2,3) == "No"
assert Check_Solution(1,-5,6) == "No"
[BEGIN]
def Check_Solution(a,b,c): 

    if (2*b*b == 9*a*c): 

        return ("Yes"); 

    else: 

        return ("No"); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n’th carol number. Your code should pass these tests:

assert get_carol(2) == 7
assert get_carol(4) == 223
assert get_carol(5) == 959
[BEGIN]
def get_carol(n): 

	result = (2**n) - 1

	return result * result - 2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove empty lists from a given list of lists. Your code should pass these tests:

assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']
assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']
assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']
[BEGIN]
def remove_empty(list1):

  remove_empty = [x for x in list1 if x]

  return remove_empty
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the item with maximum occurrences in a given list. Your code should pass these tests:

assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2
assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0
assert max_occurrences([1,2,3,1,2,4,1]) == 1
[BEGIN]
def max_occurrences(nums):

    max_val = 0

    result = nums[0] 

    for i in nums:

        occu = nums.count(i)

        if occu > max_val:

            max_val = occu

            result = i 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add the k elements to each element in the tuple. Your code should pass these tests:

assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]
assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]
assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]
[BEGIN]
def add_K_element(test_list, K):

  res = [tuple(j + K for j in sub ) for sub in test_list]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number of flips required to make the given binary string a sequence of alternate characters. Your code should pass these tests:

assert min_flip_to_make_string_alternate("0001010111") == 2
assert min_flip_to_make_string_alternate("001") == 1
assert min_flip_to_make_string_alternate("010111011") == 2 
[BEGIN]
def make_flip(ch): 

	return '1' if (ch == '0') else '0'

def get_flip_with_starting_charcter(str, expected): 

	flip_count = 0

	for i in range(len( str)): 

		if (str[i] != expected): 

			flip_count += 1

		expected = make_flip(expected) 

	return flip_count 

def min_flip_to_make_string_alternate(str): 

	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of digits of a given number. Your code should pass these tests:

assert count_Digit(12345) == 5
assert count_Digit(11223305) == 8
assert count_Digit(4123459) == 7
[BEGIN]
def count_Digit(n):

    count = 0

    while n != 0:

        n //= 10

        count += 1

    return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the largest product of the pair of adjacent elements from a given list of integers. Your code should pass these tests:

assert adjacent_num_product([1,2,3,4,5,6]) == 30
assert adjacent_num_product([1,2,3,4,5]) == 20
assert adjacent_num_product([2,3]) == 6
[BEGIN]
def adjacent_num_product(list_nums):

    return max(a*b for a, b in zip(list_nums, list_nums[1:]))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a binary tree is balanced or not. Your code should pass these tests:

assert is_tree_balanced(root) == False
assert is_tree_balanced(root1) == True
assert is_tree_balanced(root2) == False 
[BEGIN]
class Node: 

	def __init__(self, data): 

		self.data = data 

		self.left = None

		self.right = None

def get_height(root): 

	if root is None: 

		return 0

	return max(get_height(root.left), get_height(root.right)) + 1

def is_tree_balanced(root): 

	if root is None: 

		return True

	lh = get_height(root.left) 

	rh = get_height(root.right) 

	if (abs(lh - rh) <= 1) and is_tree_balanced( 

	root.left) is True and is_tree_balanced( root.right) is True: 

		return True

	return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to repeat the given tuple n times. Your code should pass these tests:

assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))
assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))
assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))
[BEGIN]
def repeat_tuples(test_tup, N):

  res = ((test_tup, ) * N)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the lateral surface area of cuboid Your code should pass these tests:

assert lateralsurface_cuboid(8,5,6)==156
assert lateralsurface_cuboid(7,9,10)==320
assert lateralsurface_cuboid(10,20,30)==1800
[BEGIN]
def lateralsurface_cuboid(l,w,h):

  LSA = 2*h*(l+w)

  return LSA
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a tuple by its float element. Your code should pass these tests:

assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] 
assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] 
assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] 
[BEGIN]
def float_sort(price):

  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)

  return float_sort
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the smallest missing element in a sorted array. Your code should pass these tests:

assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7
assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3
assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0
[BEGIN]
def smallest_missing(A, left_element, right_element):

    if left_element > right_element:

        return left_element

    mid = left_element + (right_element - left_element) // 2

    if A[mid] == mid:

        return smallest_missing(A, mid + 1, right_element)

    else:

        return smallest_missing(A, left_element, mid - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a given list of elements in ascending order using heap queue algorithm. Your code should pass these tests:

assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]
assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[BEGIN]
import heapq as hq

def heap_assending(nums):

  hq.heapify(nums)

  s_result = [hq.heappop(nums) for i in range(len(nums))]

  return s_result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the volume of a cuboid. Your code should pass these tests:

assert volume_cuboid(1,2,3)==6
assert volume_cuboid(5,7,9)==315
assert volume_cuboid(10,15,21)==3150
[BEGIN]
def volume_cuboid(l,w,h):

  volume=l*w*h

  return volume
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print all permutations of a given string including duplicates. Your code should pass these tests:

assert permute_string('ab')==['ab', 'ba']
assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']
assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']
[BEGIN]
def permute_string(str):

    if len(str) == 0:

        return ['']

    prev_list = permute_string(str[1:len(str)])

    next_list = []

    for i in range(0,len(prev_list)):

        for j in range(0,len(str)):

            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]

            if new_str not in next_list:

                next_list.append(new_str)

    return next_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to round the given number to the nearest multiple of a specific number. Your code should pass these tests:

assert round_num(4722,10)==4720
assert round_num(1111,5)==1110
assert round_num(219,2)==218
[BEGIN]
def round_num(n,m):

    a = (n //m) * m

    b = a + m

    return (b if n - a > b - n else a)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value. Your code should pass these tests:

assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')
assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')
assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')
[BEGIN]
def remove_replica(test_tup):

  temp = set()

  res = tuple(ele if ele not in temp and not temp.add(ele) 

				else 'MSP' for ele in test_tup)

  return (res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove all occurrences of a character in a given string. Your code should pass these tests:

assert remove_Char("aba",'a') == "b"
assert remove_Char("toggle",'g') == "tole"
assert remove_Char("aabbc",'b') == "aac"
[BEGIN]
def remove_Char(s,c) :  

    counts = s.count(c) 

    s = list(s) 

    while counts :  

        s.remove(c) 

        counts -= 1 

    s = '' . join(s)   

    return (s) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to shift last element to first position in the given list. Your code should pass these tests:

assert move_first([1,2,3,4]) == [4,1,2,3]
assert move_first([0,1,2,3]) == [3,0,1,2]
assert move_first([9,8,7,1]) == [1,9,8,7]
[BEGIN]
def move_first(test_list):

  test_list = test_list[-1:] + test_list[:-1]  

  return test_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the surface area of a cuboid. Your code should pass these tests:

assert surfacearea_cuboid(1,2,3)==22
assert surfacearea_cuboid(5,7,9)==286
assert surfacearea_cuboid(10,15,21)==1350
[BEGIN]
def surfacearea_cuboid(l,w,h):

  SA = 2*(l*w + l * h + w * h)

  return SA
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to generate a two-dimensional array. Your code should pass these tests:

assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] 
assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]
assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]
[BEGIN]
def multi_list(rownum,colnum):

  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]

  for row in range(rownum):

    for col in range(colnum):

        multi_list[row][col]= row*col

  return multi_list


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of lists by a given index of the inner list. Your code should pass these tests:

assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]
[BEGIN]
from operator import itemgetter

def index_on_inner_list(list_data, index_no):

    result = sorted(list_data, key=itemgetter(index_no))

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number of rotations in a circularly sorted array. Your code should pass these tests:

assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3
assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3
assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0
[BEGIN]
def find_rotation_count(A):

    (left, right) = (0, len(A) - 1)

    while left <= right:

        if A[left] <= A[right]:

            return left

        mid = (left + right) // 2

        next = (mid + 1) % len(A)

        prev = (mid - 1 + len(A)) % len(A)

        if A[mid] <= A[next] and A[mid] <= A[prev]:

            return mid

        elif A[mid] <= A[right]:

            right = mid - 1

        elif A[mid] >= A[left]:

            left = mid + 1

    return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to toggle all odd bits of a given number. Your code should pass these tests:

assert even_bit_toggle_number(10) == 15
assert even_bit_toggle_number(20) == 1
assert even_bit_toggle_number(30) == 11
[BEGIN]
def even_bit_toggle_number(n) : 

    res = 0; count = 0; temp = n    

    while(temp > 0 ) : 

        if (count % 2 == 0) : 

            res = res | (1 << count)      

        count = count + 1

        temp >>= 1 

    return n ^ res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the frequency of the smallest value in a given array. Your code should pass these tests:

assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1
assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1
assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3
[BEGIN]
def frequency_Of_Smallest(n,arr): 

    mn = arr[0] 

    freq = 1

    for i in range(1,n): 

        if (arr[i] < mn): 

            mn = arr[i] 

            freq = 1

        elif (arr[i] == mn): 

            freq += 1

    return freq 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n'th perrin number using recursion. Your code should pass these tests:

assert get_perrin(9) == 12
assert get_perrin(4) == 2
assert get_perrin(6) == 5
[BEGIN]
def get_perrin(n):

  if (n == 0):

    return 3

  if (n == 1):

    return 0

  if (n == 2):

    return 2 

  return get_perrin(n - 2) + get_perrin(n - 3)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find out the minimum no of swaps required for bracket balancing in the given string. Your code should pass these tests:

assert swap_count("[]][][") == 2
assert swap_count("[[][]]") == 0
assert swap_count("[[][]]][") == 1
[BEGIN]
def swap_count(s):

	chars = s

	count_left = 0

	count_right = 0

	swap = 0

	imbalance = 0; 

	for i in range(len(chars)):

		if chars[i] == '[':

			count_left += 1

			if imbalance > 0:

				swap += imbalance

				imbalance -= 1

		elif chars[i] == ']':

			count_right += 1

			imbalance = (count_right - count_left) 

	return swap
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the hexadecimal number is even or odd. Your code should pass these tests:

assert even_or_odd("AB3454D") =="Odd"
assert even_or_odd("ABC") == "Even"
assert even_or_odd("AAD") == "Odd"
[BEGIN]
def even_or_odd(N): 

    l = len(N) 

    if (N[l-1] =='0'or N[l-1] =='2'or 

        N[l-1] =='4'or N[l-1] =='6'or 

        N[l-1] =='8'or N[l-1] =='A'or 

        N[l-1] =='C'or N[l-1] =='E'): 

        return ("Even") 

    else: 

        return ("Odd") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the highest power of 2 that is less than or equal to n. Your code should pass these tests:

assert highest_Power_of_2(10) == 8
assert highest_Power_of_2(19) == 16
assert highest_Power_of_2(32) == 32
[BEGIN]
def highest_Power_of_2(n): 

    res = 0; 

    for i in range(n, 0, -1): 

        if ((i & (i - 1)) == 0): 

            res = i; 

            break; 

    return res; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n'th lucas number. Your code should pass these tests:

assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
[BEGIN]
def find_lucas(n): 

	if (n == 0): 

		return 2

	if (n == 1): 

		return 1

	return find_lucas(n - 1) + find_lucas(n - 2) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to insert a given string at the beginning of all items in a list. Your code should pass these tests:

assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']
assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']
assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']
[BEGIN]
def add_string(list,string):

 add_string=[string.format(i) for i in  list]

 return add_string
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert more than one list to nested dictionary. Your code should pass these tests:

assert convert_list_dictionary(["S001", "S002", "S003", "S004"],["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]
assert convert_list_dictionary(["abc","def","ghi","jkl"],["python","program","language","programs"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]
assert convert_list_dictionary(["A1","A2","A3","A4"],["java","C","C++","DBMS"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]
[BEGIN]
def convert_list_dictionary(l1, l2, l3):

     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]

     return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n). Your code should pass these tests:

assert get_max_sum(60) == 106
assert get_max_sum(10) == 12
assert get_max_sum(2) == 2
[BEGIN]
def get_max_sum (n):

	res = list()

	res.append(0)

	res.append(1)

	i = 2

	while i<n + 1:

		res.append(max(i, (res[int(i / 2)] 

						+ res[int(i / 3)] +

							res[int(i / 4)]

						+ res[int(i / 5)])))

		i = i + 1

	return res[n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the list with maximum length using lambda function. Your code should pass these tests:

assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])
assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])
assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])
[BEGIN]
def max_length_list(input_list):

    max_length = max(len(x) for x in input_list )   

    max_list = max(input_list, key = lambda i: len(i))    

    return(max_length, max_list)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if given tuple is distinct or not. Your code should pass these tests:

assert check_distinct((1, 4, 5, 6, 1, 4)) == False
assert check_distinct((1, 4, 5, 6)) == True
assert check_distinct((2, 3, 4, 5, 6)) == True
[BEGIN]
def check_distinct(test_tup):

  res = True

  temp = set()

  for ele in test_tup:

    if ele in temp:

      res = False

      break

    temp.add(ele)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first non-repeated character in a given string. Your code should pass these tests:

assert first_non_repeating_character("abcabc") == None
assert first_non_repeating_character("abc") == "a"
assert first_non_repeating_character("ababc") == "c"
[BEGIN]
def first_non_repeating_character(str1):

  char_order = []

  ctr = {}

  for c in str1:

    if c in ctr:

      ctr[c] += 1

    else:

      ctr[c] = 1 

      char_order.append(c)

  for c in char_order:

    if ctr[c] == 1:

      return c

  return None
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given string starts and ends with the same character or not using regex. Your code should pass these tests:

assert check_char("abba") == "Valid"
assert check_char("a") == "Valid"
assert check_char("abcd") == "Invalid"
[BEGIN]
import re  

regex = r'^[a-z]$|^([a-z]).*\1$'

def check_char(string): 

	if(re.search(regex, string)): 

		return "Valid" 

	else: 

		return "Invalid" 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the median of three specific numbers. Your code should pass these tests:

assert median_numbers(25,55,65)==55.0
assert median_numbers(20,10,30)==20.0
assert median_numbers(15,45,75)==45.0
[BEGIN]
def median_numbers(a,b,c):

 if a > b:

    if a < c:

        median = a

    elif b > c:

        median = b

    else:

        median = c

 else:

    if a > c:

        median = a

    elif b < c:

        median = b

    else:

        median = c

 return median
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to compute the sum of digits of each number of a given list. Your code should pass these tests:

assert sum_of_digits([10,2,56])==14
assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19
assert sum_of_digits([10,20,-4,5,-70])==19
[BEGIN]
def sum_of_digits(nums):

    return sum(int(el) for n in nums for el in str(n) if el.isdigit())
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform the mathematical bitwise xor operation across the given tuples. Your code should pass these tests:

assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)
assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)
assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)
[BEGIN]
def bitwise_xor(test_tup1, test_tup2):

  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the frequency of unique tuples in the given list order irrespective. Your code should pass these tests:

assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3
assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4
assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4
[BEGIN]
def extract_freq(test_list):

  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))

  return (res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform index wise addition of tuple elements in the given two nested tuples. Your code should pass these tests:

assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))
assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))
assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))
[BEGIN]
def add_nested_tuples(test_tup1, test_tup2):

  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))

   for tup1, tup2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to compute the value of ncr%p. Your code should pass these tests:

assert ncr_modp(10,2,13)==6
assert ncr_modp(15,12,43)==25
assert ncr_modp(17,9,18)==10
[BEGIN]
def ncr_modp(n, r, p): 

    C = [0 for i in range(r+1)]   

    C[0] = 1

    for i in range(1, n+1): 

        for j in range(min(i, r), 0, -1): 

            C[j] = (C[j] + C[j-1]) % p   

    return C[r] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a url is valid or not using regex. Your code should pass these tests:

assert is_valid_URL("https://www.google.com") == True
assert is_valid_URL("https:/www.gmail.com") == False
assert is_valid_URL("https:// www.redit.com") == False
[BEGIN]
import re

def is_valid_URL(str):

	regex = ("((http|https)://)(www.)?" +

			"[a-zA-Z0-9@:%._\\+~#?&//=]" +

			"{2,256}\\.[a-z]" +

			"{2,6}\\b([-a-zA-Z0-9@:%" +

			"._\\+~#?&//=]*)")

	p = re.compile(regex)

	if (str == None):

		return False

	if(re.search(p, str)):

		return True

	else:

		return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum of two numbers. Your code should pass these tests:

assert minimum(1,2) == 1
assert minimum(-5,-4) == -5
assert minimum(0,0) == 0
[BEGIN]
def minimum(a,b):   

    if a <= b: 

        return a 

    else: 

        return b 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether an element exists within a tuple. Your code should pass these tests:

assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'r')==True
assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),'5')==False
assert check_tuplex(("w", 3, "r", "e", "s", "o", "u", "r", "c","e"),3)==True
[BEGIN]
def check_tuplex(tuplex,tuple1): 

  if tuple1 in tuplex:

    return True

  else:

     return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the parity of a given number. Your code should pass these tests:

assert find_Parity(12) == "Even Parity"
assert find_Parity(7) == "Odd Parity"
assert find_Parity(10) == "Even Parity"
[BEGIN]
def find_Parity(x): 

    y = x ^ (x >> 1); 

    y = y ^ (y >> 2); 

    y = y ^ (y >> 4); 

    y = y ^ (y >> 8); 

    y = y ^ (y >> 16); 

    if (y & 1): 

        return ("Odd Parity"); 

    return ("Even Parity"); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to create the next bigger number by rearranging the digits of a given number. Your code should pass these tests:

assert rearrange_bigger(12)==21
assert rearrange_bigger(10)==False
assert rearrange_bigger(102)==120
[BEGIN]
def rearrange_bigger(n):

    nums = list(str(n))

    for i in range(len(nums)-2,-1,-1):

        if nums[i] < nums[i+1]:

            z = nums[i:]

            y = min(filter(lambda x: x > z[0], z))

            z.remove(y)

            z.sort()

            nums[i:] = [y] + z

            return int("".join(nums))

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find k number of pairs which consist of one element from the first array and one element from the second array. Your code should pass these tests:

assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]
assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]
assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]
[BEGIN]
import heapq

def k_smallest_pairs(nums1, nums2, k):

   queue = []

   def push(i, j):

       if i < len(nums1) and j < len(nums2):

           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])

   push(0, 0)

   pairs = []

   while queue and len(pairs) < k:

       _, i, j = heapq.heappop(queue)

       pairs.append([nums1[i], nums2[j]])

       push(i, j + 1)

       if j == 0:

           push(i + 1, 0)

   return pairs
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum product from the pairs of tuples within a given list. Your code should pass these tests:

assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8
assert min_product_tuple([(10,20), (15,2), (5,10)] )==30
assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100
[BEGIN]
def min_product_tuple(list1):

    result_min = min([abs(x * y) for x, y in list1] )

    return result_min
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum value in a given heterogeneous list. Your code should pass these tests:

assert min_val(['Python', 3, 2, 4, 5, 'version'])==2
assert min_val(['Python', 15, 20, 25])==15
assert min_val(['Python', 30, 20, 40, 50, 'version'])==20
[BEGIN]
def min_val(listval):

     min_val = min(i for i in listval if isinstance(i, int))

     return min_val
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given snake case string to camel case string by using regex. Your code should pass these tests:

assert snake_to_camel('android_tv') == 'AndroidTv'
assert snake_to_camel('google_pixel') == 'GooglePixel'
assert snake_to_camel('apple_watch') == 'AppleWatch'
[BEGIN]
import re

def snake_to_camel(word):

  return ''.join(x.capitalize() or '_' for x in word.split('_'))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove odd numbers from a given list. Your code should pass these tests:

assert remove_odd([1,2,3]) == [2]
assert remove_odd([2,4,6]) == [2,4,6]
assert remove_odd([10,20,3]) == [10,20]
[BEGIN]
def remove_odd(l):

    for i in l:

        if i % 2 != 0:

            l.remove(i)

    return l
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the nth element from a given list of tuples. Your code should pass these tests:

assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]
assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]
[BEGIN]
def extract_nth_element(list1, n):

    result = [x[n] for x in list1]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the value exists in a sequence or not. Your code should pass these tests:

assert overlapping([1,2,3,4,5],[6,7,8,9]) == False
assert overlapping([1,2,3],[4,5,6]) == False
assert overlapping([1,4,5],[1,4,5]) == True
[BEGIN]
def overlapping(list1,list2):  

    c=0

    d=0

    for i in list1: 

        c+=1

    for i in list2: 

        d+=1

    for i in range(0,c): 

        for j in range(0,d): 

            if(list1[i]==list2[j]): 

                return 1

    return 0
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find a pair with highest product from a given array of integers. Your code should pass these tests:

assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)
assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)
assert max_Product([1,2,3]) == (2,3)
[BEGIN]
def max_Product(arr): 

    arr_len = len(arr) 

    if (arr_len < 2): 

        return ("No pairs exists")           

    x = arr[0]; y = arr[1]      

    for i in range(0,arr_len): 

        for j in range(i + 1,arr_len): 

            if (arr[i] * arr[j] > x * y): 

                x = arr[i]; y = arr[j] 

    return x,y    
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number. Your code should pass these tests:

assert breakSum(12) == 13
assert breakSum(24) == 27
assert breakSum(23) == 23
[BEGIN]
MAX = 1000000

def breakSum(n): 

	dp = [0]*(n+1) 

	dp[0] = 0

	dp[1] = 1

	for i in range(2, n+1): 

		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 

	return dp[n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find common first element in given list of tuple. Your code should pass these tests:

assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]
assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]
assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]
[BEGIN]
def group_tuples(Input): 

	out = {} 

	for elem in Input: 

		try: 

			out[elem[0]].extend(elem[1:]) 

		except KeyError: 

			out[elem[0]] = list(elem) 

	return [tuple(values) for values in out.values()] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sublist having maximum length. Your code should pass these tests:

assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']
assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]
assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]
[BEGIN]
def Find_Max(lst): 

    maxList = max((x) for x in lst) 

    return maxList
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list. Your code should pass these tests:

assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243
assert round_and_sum([5,2,9,24.3,29])==345
assert round_and_sum([25.0,56.7,89.2])==513
[BEGIN]
def round_and_sum(list1):

  lenght=len(list1)

  round_and_sum=sum(list(map(round,list1))* lenght)

  return round_and_sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the cube sum of first n even natural numbers. Your code should pass these tests:

assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
[BEGIN]
def cube_Sum(n): 

    sum = 0

    for i in range(1,n + 1): 

        sum += (2*i)*(2*i)*(2*i) 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to concatenate each element of tuple by the delimiter. Your code should pass these tests:

assert concatenate_tuple(("ID", "is", 4, "UTS") ) == 'ID-is-4-UTS'
assert concatenate_tuple(("QWE", "is", 4, "RTY") ) == 'QWE-is-4-RTY'
assert concatenate_tuple(("ZEN", "is", 4, "OP") ) == 'ZEN-is-4-OP'
[BEGIN]
def concatenate_tuple(test_tup):

    delim = "-"

    res = ''.join([str(ele) + delim for ele in test_tup])

    res = res[ : len(res) - len(delim)]

    return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the average of cubes of first n natural numbers. Your code should pass these tests:

assert find_Average_Of_Cube(2) == 4.5
assert find_Average_Of_Cube(3) == 12
assert find_Average_Of_Cube(1) == 1
[BEGIN]
def find_Average_Of_Cube(n):  

    sum = 0

    for i in range(1, n + 1): 

        sum += i * i * i  

    return round(sum / n, 6) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to solve gold mine problem. Your code should pass these tests:

assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16
assert get_maxgold([[10,20],[30,40]],2,2)==70
assert get_maxgold([[4,9],[3,7]],2,2)==13
[BEGIN]
def get_maxgold(gold, m, n): 

    goldTable = [[0 for i in range(n)] 

                        for j in range(m)]   

    for col in range(n-1, -1, -1): 

        for row in range(m):  

            if (col == n-1): 

                right = 0

            else: 

                right = goldTable[row][col+1] 

            if (row == 0 or col == n-1): 

                right_up = 0

            else: 

                right_up = goldTable[row-1][col+1] 

            if (row == m-1 or col == n-1): 

                right_down = 0

            else: 

                right_down = goldTable[row+1][col+1] 

            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 

    res = goldTable[0][0] 

    for i in range(1, m): 

        res = max(res, goldTable[i][0])  

    return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract only the rear index element of each string in the given tuple. Your code should pass these tests:

assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']
assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']
assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']
[BEGIN]
def extract_rear(test_tuple):

  res = list(sub[len(sub) - 1] for sub in test_tuple)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the number of sublists containing a particular element. Your code should pass these tests:

assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3
assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3
assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1
[BEGIN]
def count_element_in_list(list1, x): 

    ctr = 0

    for i in range(len(list1)): 

        if x in list1[i]: 

            ctr+= 1          

    return ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to filter odd numbers using lambda function. Your code should pass these tests:

assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]
assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]
assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]
[BEGIN]
def filter_oddnumbers(nums):

 odd_nums = list(filter(lambda x: x%2 != 0, nums))

 return odd_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex. Your code should pass these tests:

assert change_date_format("2026-01-02") == '02-01-2026'
assert change_date_format("2020-11-13") == '13-11-2020'
assert change_date_format("2021-04-26") == '26-04-2021'
[BEGIN]
import re

def change_date_format(dt):

        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given array by using shell sort. Your code should pass these tests:

assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]
assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]
assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]
[BEGIN]
def shell_sort(my_list):

    gap = len(my_list) // 2

    while gap > 0:

        for i in range(gap, len(my_list)):

            current_item = my_list[i]

            j = i

            while j >= gap and my_list[j - gap] > current_item:

                my_list[j] = my_list[j - gap]

                j -= gap

            my_list[j] = current_item

        gap //= 2



    return my_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the elementwise and tuples from the given two tuples. Your code should pass these tests:

assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)
[BEGIN]
def and_tuples(test_tup1, test_tup2):

  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the directrix of a parabola. Your code should pass these tests:

assert parabola_directrix(5,3,2)==-198
assert parabola_directrix(9,8,4)==-2336
assert parabola_directrix(2,4,6)==-130
[BEGIN]
def parabola_directrix(a, b, c): 

  directrix=((int)(c - ((b * b) + 1) * 4 * a ))

  return directrix
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that takes two lists and returns true if they have at least one common element. Your code should pass these tests:

assert common_element([1,2,3,4,5], [5,6,7,8,9])==True
assert common_element([1,2,3,4,5], [6,7,8,9])==None
assert common_element(['a','b','c'], ['d','b','e'])==True
[BEGIN]
def common_element(list1, list2):

     result = False

     for x in list1:

         for y in list2:

             if x == y:

                 result = True

                 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the median of a trapezium. Your code should pass these tests:

assert median_trapezium(15,25,35)==20
assert median_trapezium(10,20,30)==15
assert median_trapezium(6,9,4)==7.5
[BEGIN]
def median_trapezium(base1,base2,height):

 median = 0.5 * (base1+ base2)

 return median
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the entered number is greater than the elements of the given array. Your code should pass these tests:

assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'
assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'
assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'
[BEGIN]
def check_greater(arr, number):

  arr.sort()

  if number > arr[-1]:

    return ('Yes, the entered number is greater than those in the array')

  else:

    return ('No, entered number is less than those in the array')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an a followed by one or more b's. Your code should pass these tests:

assert text_match_one("ac")==('Not matched!')
assert text_match_one("dc")==('Not matched!')
assert text_match_one("abba")==('Found a match!')
[BEGIN]
import re

def text_match_one(text):

        patterns = 'ab+?'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the last digit of a given number. Your code should pass these tests:

assert last_Digit(123) == 3
assert last_Digit(25) == 5
assert last_Digit(30) == 0
[BEGIN]
def last_Digit(n) :

    return (n % 10) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to print negative numbers in a list. Your code should pass these tests:

assert neg_nos([-1,4,5,-6]) == -1,-6
assert neg_nos([-1,-2,3,4]) == -1,-2
assert neg_nos([-7,-6,8,9]) == -7,-6
[BEGIN]
def neg_nos(list1):

  for num in list1: 

    if num < 0: 

       return num 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove odd characters in a string. Your code should pass these tests:

assert remove_odd("python")==("yhn")
assert remove_odd("program")==("rga")
assert remove_odd("language")==("agae")
[BEGIN]
def remove_odd(str1):

 str2 = ''

 for i in range(1, len(str1) + 1):

    if(i % 2 == 0):

        str2 = str2 + str1[i - 1]

 return str2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count bidirectional tuple pairs. Your code should pass these tests:

assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'
assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'
assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'
[BEGIN]
def count_bidirectional(test_list):

  res = 0

  for idx in range(0, len(test_list)):

    for iidx in range(idx + 1, len(test_list)):

      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:

        res += 1

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a list of multiple integers into a single integer. Your code should pass these tests:

assert multiple_to_single([11, 33, 50])==113350
assert multiple_to_single([-1,2,3,4,5,6])==-123456
assert multiple_to_single([10,15,20,25])==10152025
[BEGIN]
def multiple_to_single(L):

  x = int("".join(map(str, L)))

  return x
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all adverbs and their positions in a given sentence. Your code should pass these tests:

assert find_adverb_position("clearly!! we can see the sky")==(0, 7, 'clearly')
assert find_adverb_position("seriously!! there are many roses")==(0, 9, 'seriously')
assert find_adverb_position("unfortunately!! sita is going to home")==(0, 13, 'unfortunately')
[BEGIN]
import re

def find_adverb_position(text):

 for m in re.finditer(r"\w+ly", text):

    return (m.start(), m.end(), m.group(0))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the surface area of a cube. Your code should pass these tests:

assert surfacearea_cube(5)==150
assert surfacearea_cube(3)==54
assert surfacearea_cube(10)==600
[BEGIN]
def surfacearea_cube(l):

  surfacearea= 6*l*l

  return surfacearea
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the ration of positive numbers in an array of integers. Your code should pass these tests:

assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54
assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69
assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56
[BEGIN]
from array import array

def positive_count(nums):

    n = len(nums)

    n1 = 0

    for x in nums:

        if x > 0:

            n1 += 1

        else:

          None

    return round(n1/n,2)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the largest negative number from the given list. Your code should pass these tests:

assert largest_neg([1,2,3,-4,-6]) == -6
assert largest_neg([1,2,3,-8,-9]) == -9
assert largest_neg([1,2,3,4,-1]) == -1
[BEGIN]
def largest_neg(list1): 

    max = list1[0] 

    for x in list1: 

        if x < max : 

             max = x  

    return max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to trim each tuple by k in the given tuple list. Your code should pass these tests:

assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'
assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'
assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'
[BEGIN]
def trim_tuple(test_list, K):

  res = []

  for ele in test_list:

    N = len(ele)

    res.append(tuple(list(ele)[K: N - K]))

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform index wise multiplication of tuple elements in the given two tuples. Your code should pass these tests:

assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))
assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))
assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))
[BEGIN]
def index_multiplication(test_tup1, test_tup2):

  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))

   for tup1, tup2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the occurence of all elements of list in a tuple. Your code should pass these tests:

assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6
assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2
[BEGIN]
from collections import Counter 

def count_Occurrence(tup, lst): 

    count = 0

    for item in tup: 

        if item in lst: 

            count+= 1 

    return count  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find cubes of individual elements in a list using lambda function. Your code should pass these tests:

assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
assert cube_nums([10,20,30])==([1000, 8000, 27000])
assert cube_nums([12,15])==([1728, 3375])
[BEGIN]
def cube_nums(nums):

 cube_nums = list(map(lambda x: x ** 3, nums))

 return cube_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of perrin numbers. Your code should pass these tests:

assert cal_sum(9) == 49
assert cal_sum(10) == 66
assert cal_sum(11) == 88
[BEGIN]
def cal_sum(n): 

	a = 3

	b = 0

	c = 2

	if (n == 0): 

		return 3

	if (n == 1): 

		return 3

	if (n == 2): 

		return 5

	sum = 5

	while (n > 2): 

		d = a + b 

		sum = sum + d 

		a = b 

		b = c 

		c = d 

		n = n-1

	return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the triangle is valid or not if 3 points are given. Your code should pass these tests:

assert check_Triangle(1,5,2,5,4,6) == 'Yes'
assert check_Triangle(1,1,1,4,1,5) == 'No'
assert check_Triangle(1,1,1,1,1,1) == 'No'
[BEGIN]
def check_Triangle(x1,y1,x2,y2,x3,y3): 

    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   

    if a == 0: 

        return ('No') 

    else: 

        return ('Yes') 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract specified size of strings from a give list of string values. Your code should pass these tests:

assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']
assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']
assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']
[BEGIN]
def extract_string(str, l):

    result = [e for e in str if len(e) == l] 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all whitespaces from the given string using regex. Your code should pass these tests:

assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'
assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'
assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'
[BEGIN]
import re

def remove_whitespaces(text1):

  return (re.sub(r'\s+', '',text1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that gives loss amount if the given amount has loss else return none. Your code should pass these tests:

assert loss_amount(1500,1200)==None
assert loss_amount(100,200)==100
assert loss_amount(2000,5000)==3000
[BEGIN]
def loss_amount(actual_cost,sale_amount): 

  if(sale_amount > actual_cost):

    amount = sale_amount - actual_cost

    return amount

  else:

    return None
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of even factors of a number. Your code should pass these tests:

assert sumofFactors(18) == 26
assert sumofFactors(30) == 48
assert sumofFactors(6) == 8
[BEGIN]
import math 

def sumofFactors(n) : 

    if (n % 2 != 0) : 

        return 0

    res = 1

    for i in range(2, (int)(math.sqrt(n)) + 1) :    

        count = 0

        curr_sum = 1

        curr_term = 1

        while (n % i == 0) : 

            count= count + 1

            n = n // i 

            if (i == 2 and count == 1) : 

                curr_sum = 0

            curr_term = curr_term * i 

            curr_sum = curr_sum + curr_term 

        res = res * curr_sum  

    if (n >= 2) : 

        res = res * (1 + n) 

    return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a word containing 'z'. Your code should pass these tests:

assert text_match_wordz("pythonz.")==('Found a match!')
assert text_match_wordz("xyz.")==('Found a match!')
assert text_match_wordz("  lang  .")==('Not matched!')
[BEGIN]
import re

def text_match_wordz(text):

        patterns = '\w*z.\w*'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given month number contains 31 days or not. Your code should pass these tests:

assert check_monthnumb_number(5)==True
assert check_monthnumb_number(2)==False
assert check_monthnumb_number(6)==False
[BEGIN]
def check_monthnumb_number(monthnum2):

  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to reverse strings in a given list of string values. Your code should pass these tests:

assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']
assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']
[BEGIN]
def reverse_string_list(stringlist):

    result = [x[::-1] for x in stringlist]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sublist having minimum length. Your code should pass these tests:

assert Find_Min([[1],[1,2],[1,2,3]]) == [1]
assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]
assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']
[BEGIN]
def Find_Min(lst): 

    minList = min((x) for x in lst) 

    return minList
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the area of a rectangle. Your code should pass these tests:

assert rectangle_area(10,20)==200
assert rectangle_area(10,5)==50
assert rectangle_area(4,2)==8
[BEGIN]
def rectangle_area(l,b):

  area=l*b

  return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove uppercase substrings from a given string by using regex. Your code should pass these tests:

assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'
assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'
assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'
[BEGIN]
import re

def remove_uppercase(str1):

  remove_upper = lambda text: re.sub('[A-Z]', '', text)

  result =  remove_upper(str1)

  return (result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to get the first element of each sublist. Your code should pass these tests:

assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]
assert Extract([[1,2,3],[4, 5]]) == [1,4]
assert Extract([[9,8,1],[1,2]]) == [9,1]
[BEGIN]
def Extract(lst): 

    return [item[0] for item in lst] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the upper case characters in a given string. Your code should pass these tests:

assert upper_ctr('PYthon') == 1
assert upper_ctr('BigData') == 1
assert upper_ctr('program') == 0
[BEGIN]
def upper_ctr(str):

    upper_ctr = 0

    for i in range(len(str)):

          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1

          return upper_ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all possible combinations of the elements of a given list. Your code should pass these tests:

assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]
assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]
assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]
[BEGIN]
def combinations_list(list1):

    if len(list1) == 0:

        return [[]]

    result = []

    for el in combinations_list(list1[1:]):

        result += [el, el+[list1[0]]]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum product subarray of the given array. Your code should pass these tests:

assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112
assert max_subarray_product([6, -3, -10, 0, 2]) == 180 
assert max_subarray_product([-2, -40, 0, -2, -3]) == 80
[BEGIN]
def max_subarray_product(arr):

	n = len(arr)

	max_ending_here = 1

	min_ending_here = 1

	max_so_far = 0

	flag = 0

	for i in range(0, n):

		if arr[i] > 0:

			max_ending_here = max_ending_here * arr[i]

			min_ending_here = min (min_ending_here * arr[i], 1)

			flag = 1

		elif arr[i] == 0:

			max_ending_here = 1

			min_ending_here = 1

		else:

			temp = max_ending_here

			max_ending_here = max (min_ending_here * arr[i], 1)

			min_ending_here = temp * arr[i]

		if (max_so_far < max_ending_here):

			max_so_far = max_ending_here

	if flag == 0 and max_so_far == 0:

		return 0

	return max_so_far
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if all values are same in a dictionary. Your code should pass these tests:

assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False
assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True
assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False
[BEGIN]
def check_value(dict, n):

    result = all(x == n for x in dict.values()) 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to drop empty items from a given dictionary. Your code should pass these tests:

assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}
assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}
assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}
[BEGIN]
def drop_empty(dict1):

  dict1 = {key:value for (key, value) in dict1.items() if value is not None}

  return dict1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the peak element in the given array. Your code should pass these tests:

assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2
assert find_peak([2, 3, 4, 5, 6], 5) == 4
assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 
[BEGIN]
def find_peak_util(arr, low, high, n): 

	mid = low + (high - low)/2

	mid = int(mid) 

	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and

		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 

		return mid 

	elif (mid > 0 and arr[mid - 1] > arr[mid]): 

		return find_peak_util(arr, low, (mid - 1), n) 

	else: 

		return find_peak_util(arr, (mid + 1), high, n) 

def find_peak(arr, n): 

	return find_peak_util(arr, 0, n - 1, n) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert decimal number to octal number. Your code should pass these tests:

assert decimal_to_Octal(10) == 12
assert decimal_to_Octal(2) == 2
assert decimal_to_Octal(33) == 41
[BEGIN]
def decimal_to_Octal(deciNum):

    octalNum = 0

    countval = 1;

    dNo = deciNum;

    while (deciNum!= 0):

        remainder= deciNum % 8;

        octalNum+= remainder*countval;

        countval= countval*10;

        deciNum //= 8; 

    return (octalNum)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array. Your code should pass these tests:

assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 
assert max_product([4, 42, 55, 68, 80], 5) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 
[BEGIN]
def max_product(arr, n ): 

	mpis =[0] * (n) 

	for i in range(n): 

		mpis[i] = arr[i] 

	for i in range(1, n): 

		for j in range(i): 

			if (arr[i] > arr[j] and

					mpis[i] < (mpis[j] * arr[i])): 

						mpis[i] = mpis[j] * arr[i] 

	return max(mpis)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum profit earned from a maximum of k stock transactions Your code should pass these tests:

assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10
assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7
assert max_profit([10, 6, 8, 4, 2], 2) == 2
[BEGIN]
def max_profit(price, k):

    n = len(price)

    final_profit = [[None for x in range(n)] for y in range(k + 1)]

    for i in range(k + 1):

        for j in range(n):

            if i == 0 or j == 0:

                final_profit[i][j] = 0

            else:

                max_so_far = 0

                for x in range(j):

                    curr_price = price[j] - price[x] + final_profit[i-1][x]

                    if max_so_far < curr_price:

                        max_so_far = curr_price

                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)

    return final_profit[k][n-1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the pairwise addition of the elements of the given tuples. Your code should pass these tests:

assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)
assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)
assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)
[BEGIN]
def add_pairwise(test_tup):

  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find remainder of array multiplication divided by n. Your code should pass these tests:

assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9
assert find_remainder([1,1,1],3,1) == 0
assert find_remainder([1,2,1],3,2) == 0
[BEGIN]
def find_remainder(arr, lens, n): 

    mul = 1

    for i in range(lens):  

        mul = (mul * (arr[i] % n)) % n 

    return mul % n 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given list contains consecutive numbers or not. Your code should pass these tests:

assert check_Consecutive([1,2,3,4,5]) == True
assert check_Consecutive([1,2,3,5,6]) == False
assert check_Consecutive([1,2,1]) == False
[BEGIN]
def check_Consecutive(l): 

    return sorted(l) == list(range(min(l),max(l)+1)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order. Your code should pass these tests:

assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}
assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}
assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}
[BEGIN]
def tuple_intersection(test_list1, test_list2):

  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])

  return (res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace characters in a string. Your code should pass these tests:

assert replace_char("polygon",'y','l')==("pollgon")
assert replace_char("character",'c','a')==("aharaater")
assert replace_char("python",'l','a')==("python")
[BEGIN]
def replace_char(str1,ch,newch):

 str2 = str1.replace(ch, newch)

 return str2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort counter by value. Your code should pass these tests:

assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]
assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]
assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]
[BEGIN]
from collections import Counter

def sort_counter(dict1):

 x = Counter(dict1)

 sort_counter=x.most_common()

 return sort_counter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of the largest and smallest value in a given array. Your code should pass these tests:

assert big_sum([1,2,3]) == 4
assert big_sum([-1,2,3,4]) == 3
assert big_sum([2,3,6]) == 8
[BEGIN]
def big_sum(nums):

      sum= max(nums)+min(nums)

      return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert the given string to lower case. Your code should pass these tests:

assert is_lower("InValid") == "invalid"
assert is_lower("TruE") == "true"
assert is_lower("SenTenCE") == "sentence"
[BEGIN]
def is_lower(string):

  return (string.lower())
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove lowercase substrings from a given string. Your code should pass these tests:

assert remove_lowercase("PYTHon")==('PYTH')
assert remove_lowercase("FInD")==('FID')
assert remove_lowercase("STRinG")==('STRG')
[BEGIN]
import re

def remove_lowercase(str1):

 remove_lower = lambda text: re.sub('[a-z]', '', text)

 result =  remove_lower(str1)

 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first digit of a given number. Your code should pass these tests:

assert first_Digit(123) == 1
assert first_Digit(456) == 4
assert first_Digit(12) == 1
[BEGIN]
def first_Digit(n) :  

    while n >= 10:  

        n = n / 10; 

    return int(n) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum occurring character in a given string. Your code should pass these tests:

assert get_max_occuring_char("data") == "a"
assert get_max_occuring_char("create") == "e"
assert get_max_occuring_char("brilliant girl") == "i"
[BEGIN]
def get_max_occuring_char(str1):

  ASCII_SIZE = 256

  ctr = [0] * ASCII_SIZE

  max = -1

  ch = ''

  for i in str1:

    ctr[ord(i)]+=1;

  for i in str1:

    if max < ctr[ord(i)]:

      max = ctr[ord(i)]

      ch = i

  return ch
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to determine if there is a subset of the given set with sum equal to the given sum. Your code should pass these tests:

assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True
assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False
assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True
[BEGIN]
def is_subset_sum(set, n, sum):

	if (sum == 0):

		return True

	if (n == 0):

		return False

	if (set[n - 1] > sum):

		return is_subset_sum(set, n - 1, sum)

	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex. Your code should pass these tests:

assert match("Geeks") == 'Yes'
assert match("geeksforGeeks") == 'Yes'
assert match("geeks") == 'No'
[BEGIN]
import re 

def match(text): 

		pattern = '[A-Z]+[a-z]+$'

		if re.search(pattern, text): 

				return('Yes') 

		else: 

				return('No') 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first natural number whose factorial is divisible by x. Your code should pass these tests:

assert first_Factorial_Divisible_Number(10) == 5
assert first_Factorial_Divisible_Number(15) == 5
assert first_Factorial_Divisible_Number(5) == 4
[BEGIN]
def first_Factorial_Divisible_Number(x): 

    i = 1;

    fact = 1; 

    for i in range(1,x): 

        fact = fact * i 

        if (fact % x == 0): 

            break

    return i 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove the matching tuples from the given two tuples. Your code should pass these tests:

assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]
assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]
assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]
[BEGIN]
def remove_matching_tuple(test_list1, test_list2):

  res = [sub for sub in test_list1 if sub not in test_list2]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest palindromic number in the given array. Your code should pass these tests:

assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545
assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5
assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9
[BEGIN]
def is_palindrome(n) : 

	divisor = 1

	while (n / divisor >= 10) : 

		divisor *= 10

	while (n != 0) : 

		leading = n // divisor 

		trailing = n % 10

		if (leading != trailing) : 

			return False

		n = (n % divisor) // 10

		divisor = divisor // 100

	return True

def largest_palindrome(A, n) : 

	A.sort() 

	for i in range(n - 1, -1, -1) : 

		if (is_palindrome(A[i])) : 

			return A[i] 

	return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to compute binomial probability for the given number. Your code should pass these tests:

assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185
assert binomial_probability(11, 6, 2.0/4) == 0.2255859375
assert binomial_probability(12, 7, 3.0/5) == 0.227030335488
[BEGIN]
def nCr(n, r): 

	if (r > n / 2): 

		r = n - r 

	answer = 1 

	for i in range(1, r + 1): 

		answer *= (n - r + i) 

		answer /= i 

	return answer 

def binomial_probability(n, k, p): 

	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of tuples in increasing order by the last element in each tuple. Your code should pass these tests:

assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]
assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]
assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]
[BEGIN]
def sort_tuple(tup): 

	lst = len(tup) 

	for i in range(0, lst): 

		for j in range(0, lst-i-1): 

			if (tup[j][-1] > tup[j + 1][-1]): 

				temp = tup[j] 

				tup[j]= tup[j + 1] 

				tup[j + 1]= temp 

	return tup
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the area of a pentagon. Your code should pass these tests:

assert area_pentagon(5)==43.01193501472417
assert area_pentagon(10)==172.0477400588967
assert area_pentagon(15)==387.10741513251753
[BEGIN]
import math

def area_pentagon(a):

  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0

  return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the frequency of the largest value in a given array. Your code should pass these tests:

assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2
assert frequency_Of_Largest(3,[5,6,5]) == 1
assert frequency_Of_Largest(4,[2,7,7,7]) == 3
[BEGIN]
def frequency_Of_Largest(n,arr): 

    mn = arr[0] 

    freq = 1

    for i in range(1,n): 

        if (arr[i] >mn): 

            mn = arr[i] 

            freq = 1

        elif (arr[i] == mn): 

            freq += 1

    return freq 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract all the pairs which are symmetric in the given tuple list. Your code should pass these tests:

assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}
assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}
assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}
[BEGIN]
def extract_symmetric(test_list):

  temp = set(test_list) & {(b, a) for a, b in test_list}

  res = {(a, b) for a, b in temp if a < b}

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the sum of geometric progression series. Your code should pass these tests:

assert sum_gp(1,5,2)==31
assert sum_gp(1,5,4)==341
assert sum_gp(2,6,3)==728
[BEGIN]
import math

def sum_gp(a,n,r):

 total = (a * (1 - math.pow(r, n ))) / (1- r)

 return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to search an element in the given array by using binary search. Your code should pass these tests:

assert binary_search([1,2,3,5,8], 6) == False
assert binary_search([7, 8, 9, 10, 13], 10) == True
assert binary_search([11, 13, 14, 19, 22, 36], 23) == False
[BEGIN]
def binary_search(item_list,item):

	first = 0

	last = len(item_list)-1

	found = False

	while( first<=last and not found):

		mid = (first + last)//2

		if item_list[mid] == item :

			found = True

		else:

			if item < item_list[mid]:

				last = mid - 1

			else:

				first = mid + 1	

	return found
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates. Your code should pass these tests:

assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]
assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]
assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]
[BEGIN]
import math

def calculate_polygons(startx, starty, endx, endy, radius):

    sl = (2 * radius) * math.tan(math.pi / 6)

    p = sl * 0.5

    b = sl * math.cos(math.radians(30))

    w = b * 2

    h = 2 * sl   

    startx = startx - w

    starty = starty - h

    endx = endx + w

    endy = endy + h

    origx = startx

    origy = starty

    xoffset = b

    yoffset = 3 * p

    polygons = []

    row = 1

    counter = 0

    while starty < endy:

        if row % 2 == 0:

            startx = origx + xoffset

        else:

            startx = origx

        while startx < endx:

            p1x = startx

            p1y = starty + p

            p2x = startx

            p2y = starty + (3 * p)

            p3x = startx + b

            p3y = starty + h

            p4x = startx + w

            p4y = starty + (3 * p)

            p5x = startx + w

            p5y = starty + p

            p6x = startx + b

            p6y = starty

            poly = [

                (p1x, p1y),

                (p2x, p2y),

                (p3x, p3y),

                (p4x, p4y),

                (p5x, p5y),

                (p6x, p6y),

                (p1x, p1y)]

            polygons.append(poly)

            counter += 1

            startx += w

        starty += yoffset

        row += 1

    return polygons
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given binary tuple to integer. Your code should pass these tests:

assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'
assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'
assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'
[BEGIN]
def binary_to_integer(test_tup):

  res = int("".join(str(ele) for ele in test_tup), 2)

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove lowercase substrings from a given string by using regex. Your code should pass these tests:

assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'
assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'
assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'
[BEGIN]
import re

def remove_lowercase(str1):

  remove_lower = lambda text: re.sub('[a-z]', '', text)

  result =  remove_lower(str1)

  return (result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the smallest integers from a given list of numbers using heap queue algorithm. Your code should pass these tests:

assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] 
assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]
assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]
[BEGIN]
import heapq as hq

def heap_queue_smallest(nums,n):

  smallest_nums = hq.nsmallest(n, nums)

  return smallest_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the surface area of a cone. Your code should pass these tests:

assert surfacearea_cone(5,12)==282.7433388230814
assert surfacearea_cone(10,15)==880.5179353159282
assert surfacearea_cone(19,17)==2655.923961165254
[BEGIN]
import math

def surfacearea_cone(r,h):

  l = math.sqrt(r * r + h * h)

  SA = math.pi * r * (r + l)

  return SA
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find gcd of two positive integers. Your code should pass these tests:

assert gcd(12, 17) == 1
assert gcd(4,6) == 2
assert gcd(2,9) == 1
[BEGIN]
def gcd(x, y):

    gcd = 1

    if x % y == 0:

        return y

    for k in range(int(y / 2), 0, -1):

        if x % k == 0 and y % k == 0:

            gcd = k

            break  

    return gcd
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the diameter of a circle. Your code should pass these tests:

assert diameter_circle(10)==20
assert diameter_circle(40)==80
assert diameter_circle(15)==30
[BEGIN]
def diameter_circle(r):

  diameter=2*r

  return diameter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to concatenate all elements of the given list into a string. Your code should pass these tests:

assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'
assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'
assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'
[BEGIN]
def concatenate_elements(list):

  ans = ' '

  for i in list:

    ans = ans+ ' '+i

  return (ans) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find common divisor between two numbers in a given pair. Your code should pass these tests:

assert num_comm_div(2,4) == 2
assert num_comm_div(2,8) == 2
assert num_comm_div(12,24) == 6
[BEGIN]
def ngcd(x,y):

    i=1

    while(i<=x and i<=y):

        if(x%i==0 and y%i == 0):

            gcd=i;

        i+=1

    return gcd;

def num_comm_div(x,y):

  n = ngcd(x,y)

  result = 0

  z = int(n**0.5)

  i = 1

  while(i <= z):

    if(n % i == 0):

      result += 2 

      if(i == n/i):

        result-=1

    i+=1

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find remainder of two numbers. Your code should pass these tests:

assert find(3,3) == 0
assert find(10,3) == 1
assert find(16,5) == 1
[BEGIN]
def find(n,m):

  r = n%m

  return (r)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add consecutive numbers of a given list. Your code should pass these tests:

assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]
assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]
assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]
[BEGIN]
def add_consecutive_nums(nums):

    result = [b+a for a, b in zip(nums[:-1], nums[1:])]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the cube sum of first n natural numbers. Your code should pass these tests:

assert sum_Of_Series(5) == 225
assert sum_Of_Series(2) == 9
assert sum_Of_Series(3) == 36
[BEGIN]
def sum_Of_Series(n): 

    sum = 0

    for i in range(1,n + 1): 

        sum += i * i*i       

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to move all zeroes to the end of the given array. Your code should pass these tests:

assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]
assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]
assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]
[BEGIN]
def re_order(A):

    k = 0

    for i in A:

        if i:

            A[k] = i

            k = k + 1

    for i in range(k, len(A)):

        A[i] = 0

    return A
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the permutation coefficient of given p(n, k). Your code should pass these tests:

assert permutation_coefficient(10, 2) == 90
assert permutation_coefficient(10, 3) == 720
assert permutation_coefficient(10, 1) == 10
[BEGIN]
def permutation_coefficient(n, k): 

	P = [[0 for i in range(k + 1)] 

			for j in range(n + 1)] 

	for i in range(n + 1): 

		for j in range(min(i, k) + 1): 

			if (j == 0): 

				P[i][j] = 1

			else: 

				P[i][j] = P[i - 1][j] + ( 

						j * P[i - 1][j - 1]) 

			if (j < k): 

				P[i][j + 1] = 0

	return P[n][k] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove specific words from a given list. Your code should pass these tests:

assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']
assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']
assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']
[BEGIN]
def remove_words(list1, removewords):

    for word in list(list1):

        if word in removewords:

            list1.remove(word)

    return list1  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the common elements between two given lists are in the same order or not. Your code should pass these tests:

assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
assert same_order(["red","pink","green","white","black"],["white","orange","pink","black"])==False
assert same_order(["red","green","black","orange"],["red","pink","green","white","black"])==True
[BEGIN]
def same_order(l1, l2):

    common_elements = set(l1) & set(l2)

    l1 = [e for e in l1 if e in common_elements]

    l2 = [e for e in l2 if e in common_elements]

    return l1 == l2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the average of odd numbers till a given odd number. Your code should pass these tests:

assert average_Odd(9) == 5
assert average_Odd(5) == 3
assert average_Odd(11) == 6
[BEGIN]
def average_Odd(n) : 

    if (n%2==0) : 

        return ("Invalid Input") 

        return -1 

    sm =0

    count =0

    while (n>=1) : 

        count=count+1

        sm = sm + n 

        n = n-2

    return sm//count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number of subsequences having product smaller than k for the given non negative array. Your code should pass these tests:

assert no_of_subsequences([1,2,3,4], 10) == 11
assert no_of_subsequences([4,8,7,2], 50) == 9
assert no_of_subsequences([5,6,7,8], 15) == 4
[BEGIN]
def no_of_subsequences(arr, k): 

	n = len(arr) 

	dp = [[0 for i in range(n + 1)] 

			for j in range(k + 1)] 

	for i in range(1, k + 1): 

		for j in range(1, n + 1): 

			dp[i][j] = dp[i][j - 1] 

			if arr[j - 1] <= i and arr[j - 1] > 0: 

				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1

	return dp[k][n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find minimum sum of factors of a given number. Your code should pass these tests:

assert find_Min_Sum(12) == 7
assert find_Min_Sum(105) == 15
assert find_Min_Sum(2) == 2
[BEGIN]
def find_Min_Sum(num): 

    sum = 0

    i = 2

    while(i * i <= num): 

        while(num % i == 0): 

            sum += i 

            num /= i 

        i += 1

    sum += num 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the element frequency in the mixed nested tuple. Your code should pass these tests:

assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}
assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}
assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}
[BEGIN]
def flatten(test_tuple): 

	for tup in test_tuple: 

		if isinstance(tup, tuple): 

			yield from flatten(tup) 

		else: 

			yield tup 

def count_element_freq(test_tuple):

  res = {}

  for ele in flatten(test_tuple):

    if ele not in res:

      res[ele] = 0

    res[ele] += 1

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert tuple into list by adding the given string after every element. Your code should pass these tests:

assert add_str((5, 6, 7, 4, 9) , "FDF") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']
assert add_str((7, 8, 9, 10) , "PF") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']
assert add_str((11, 14, 12, 1, 4) , "JH") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']
[BEGIN]
def add_str(test_tup, K):

  res = [ele for sub in test_tup for ele in (sub, K)]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the summation of tuple elements in the given tuple list. Your code should pass these tests:

assert sum_elements((7, 8, 9, 1, 10, 7)) == 42
assert sum_elements((1, 2, 3, 4, 5, 6)) == 21
assert sum_elements((11, 12 ,13 ,45, 14)) == 95
[BEGIN]
def sum_elements(test_tup):

  res = sum(list(test_tup))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if there is a subset with sum divisible by m. Your code should pass these tests:

assert modular_sum([3, 1, 7, 5], 4, 6) == True
assert modular_sum([1, 7], 2, 5) == False
assert modular_sum([1, 6], 2, 5) == False
[BEGIN]
def modular_sum(arr, n, m): 

	if (n > m): 

		return True

	DP = [False for i in range(m)] 

	for i in range(n): 

		if (DP[0]): 

			return True

		temp = [False for i in range(m)] 

		for j in range(m): 

			if (DP[j] == True): 

				if (DP[(j + arr[i]) % m] == False): 

					temp[(j + arr[i]) % m] = True

		for j in range(m): 

			if (temp[j]): 

				DP[j] = True

		DP[arr[i] % m] = True

	return DP[0]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of elements using radix sort. Your code should pass these tests:

assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]
assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]
assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]
[BEGIN]
def radix_sort(nums):

    RADIX = 10

    placement = 1

    max_digit = max(nums)



    while placement < max_digit:

      buckets = [list() for _ in range( RADIX )]

      for i in nums:

        tmp = int((i / placement) % RADIX)

        buckets[tmp].append(i)

      a = 0

      for b in range( RADIX ):

        buck = buckets[b]

        for i in buck:

          nums[a] = i

          a += 1

      placement *= RADIX

    return nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the largest postive number from the given list. Your code should pass these tests:

assert largest_pos([1,2,3,4,-1]) == 4
assert largest_pos([0,1,2,-5,-1,6]) == 6
assert largest_pos([0,0,1,0]) == 1
[BEGIN]
def largest_pos(list1): 

    max = list1[0] 

    for x in list1: 

        if x > max : 

             max = x  

    return max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the square root of a perfect number. Your code should pass these tests:

assert sqrt_root(4)==2
assert sqrt_root(16)==4
assert sqrt_root(400)==20
[BEGIN]
import math

def sqrt_root(num):

 sqrt_root = math.pow(num, 0.5)

 return sqrt_root 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate volume of a tetrahedron. Your code should pass these tests:

assert volume_tetrahedron(10)==117.85
assert volume_tetrahedron(15)==397.75
assert volume_tetrahedron(20)==942.81
[BEGIN]
import math

def volume_tetrahedron(num):

	volume = (num ** 3 / (6 * math.sqrt(2)))	

	return round(volume, 2)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the lcm of the given array elements. Your code should pass these tests:

assert get_lcm([2, 7, 3, 9, 4]) == 252
assert get_lcm([1, 2, 8, 3]) == 24
assert get_lcm([3, 8, 4, 10, 5]) == 120
[BEGIN]
def find_lcm(num1, num2): 

	if(num1>num2): 

		num = num1 

		den = num2 

	else: 

		num = num2 

		den = num1 

	rem = num % den 

	while (rem != 0): 

		num = den 

		den = rem 

		rem = num % den 

	gcd = den 

	lcm = int(int(num1 * num2)/int(gcd)) 

	return lcm 

def get_lcm(l):

  num1 = l[0]

  num2 = l[1]

  lcm = find_lcm(num1, num2)

  for i in range(2, len(l)):

    lcm = find_lcm(lcm, l[i])

  return lcm 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print check if the triangle is scalene or not. Your code should pass these tests:

assert check_isosceles(6,8,12)==True
assert check_isosceles(6,6,12)==False
assert check_isosceles(6,15,20)==True
[BEGIN]
def check_isosceles(x,y,z):

  if x!=y & y!=z & z!=x:

	   return True

  else:

     return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest bitonic subsequence for the given array. Your code should pass these tests:

assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7
assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6
assert lbs([80, 60, 30, 40, 20, 10]) == 5
[BEGIN]
def lbs(arr): 

	n = len(arr) 

	lis = [1 for i in range(n+1)] 

	for i in range(1 , n): 

		for j in range(0 , i): 

			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 

				lis[i] = lis[j] + 1

	lds = [1 for i in range(n+1)] 

	for i in reversed(range(n-1)): 

		for j in reversed(range(i-1 ,n)): 

			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 

				lds[i] = lds[j] + 1

	maximum = lis[0] + lds[0] - 1

	for i in range(1 , n): 

		maximum = max((lis[i] + lds[i]-1), maximum) 

	return maximum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function. Your code should pass these tests:

assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']
assert check_string('123python')==['String must have 1 upper case character.']
assert check_string('123Python')==['Valid string.']
[BEGIN]
def check_string(str1):

    messg = [

    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',

    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',

    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',

    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]

    result = [x for x in [i(str1) for i in messg] if x != True]

    if not result:

        result.append('Valid string.')

    return result  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the sum of maximum increasing subsequence of the given array. Your code should pass these tests:

assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106
assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22
assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10
[BEGIN]
def max_sum_increasing_subsequence(arr, n): 

	max = 0

	msis = [0 for x in range(n)] 

	for i in range(n): 

		msis[i] = arr[i] 

	for i in range(1, n): 

		for j in range(i): 

			if (arr[i] > arr[j] and

				msis[i] < msis[j] + arr[i]): 

				msis[i] = msis[j] + arr[i] 

	for i in range(n): 

		if max < msis[i]: 

			max = msis[i] 

	return max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether two given lines are parallel or not. Your code should pass these tests:

assert parallel_lines([2,3,4], [2,3,8]) == True
assert parallel_lines([2,3,4], [4,-3,8]) == False
assert parallel_lines([3,3],[5,5]) == True
[BEGIN]
def parallel_lines(line1, line2):

  return line1[0]/line1[1] == line2[0]/line2[1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to capitalize first and last letters of each word of a given string. Your code should pass these tests:

assert capitalize_first_last_letters("python") == "PythoN"
assert capitalize_first_last_letters("bigdata") == "BigdatA"
assert capitalize_first_last_letters("Hadoop") == "HadooP"
[BEGIN]
def capitalize_first_last_letters(str1):

     str1 = result = str1.title()

     result =  ""

     for word in str1.split():

        result += word[:-1] + word[-1].upper() + " "

     return result[:-1]  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all pairs in an integer array whose sum is equal to a given number. Your code should pass these tests:

assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3
assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2
assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6
[BEGIN]
def get_pairs_count(arr, n, sum):

    count = 0 

    for i in range(0, n):

        for j in range(i + 1, n):

            if arr[i] + arr[j] == sum:

                count += 1

    return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the list of lists with minimum length. Your code should pass these tests:

assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])
assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])
assert min_length([[5], [15,20,25]])==(1, [5])
[BEGIN]
def min_length(list1):

   min_length = min(len(x) for x in  list1 )  

   min_list = min((x) for x in   list1)

   return(min_length, min_list)     
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth jacobsthal-lucas number. Your code should pass these tests:

assert jacobsthal_lucas(5) == 31
assert jacobsthal_lucas(2) == 5
assert jacobsthal_lucas(4) == 17
[BEGIN]
def jacobsthal_lucas(n): 

	dp=[0] * (n + 1) 

	dp[0] = 2

	dp[1] = 1

	for i in range(2, n+1): 

		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 

	return dp[n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the ration of negative numbers in an array of integers. Your code should pass these tests:

assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31
assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31
assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44
[BEGIN]
from array import array

def negative_count(nums):

    n = len(nums)

    n1 = 0

    for x in nums:

        if x < 0:

            n1 += 1

        else:

          None

    return round(n1/n,2)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find minimum number of coins that make a given value. Your code should pass these tests:

assert min_coins([9, 6, 5, 1] ,4,11)==2
assert min_coins([4,5,6,7,8,9],6,9)==1
assert min_coins([1, 2, 3],3,4)==2
[BEGIN]
import sys 

def min_coins(coins, m, V): 

    if (V == 0): 

        return 0

    res = sys.maxsize 

    for i in range(0, m): 

        if (coins[i] <= V): 

            sub_res = min_coins(coins, m, V-coins[i]) 

            if (sub_res != sys.maxsize and sub_res + 1 < res): 

                res = sub_res + 1  

    return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the two given strings are permutations of each other. Your code should pass these tests:

assert check_permutation("abc", "cba") == True
assert check_permutation("test", "ttew") == False
assert check_permutation("xxyz", "yxzx") == True
[BEGIN]
def check_permutation(str1, str2):

  n1=len(str1)

  n2=len(str2)

  if(n1!=n2):

    return False

  a=sorted(str1)

  str1=" ".join(a)

  b=sorted(str2)

  str2=" ".join(b)

  for i in range(0, n1, 1):

    if(str1[i] != str2[i]):

      return False

  return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove particular data type elements from the given tuple. Your code should pass these tests:

assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]
assert remove_datatype((7, 8, 9, "SR"), str) == [7, 8, 9]
assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]
[BEGIN]
def remove_datatype(test_tuple, data_type):

  res = []

  for ele in test_tuple:

    if not isinstance(ele, data_type):

      res.append(ele)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs. Your code should pass these tests:

assert search_literal('python','python programming language')==(0,6)
assert search_literal('programming','python programming language')==(7,18)
assert search_literal('language','python programming language')==(19,27)
[BEGIN]
import re

def search_literal(pattern,text):

 match = re.search(pattern, text)

 s = match.start()

 e = match.end()

 return (s, e)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the top or bottom surface area of a cylinder. Your code should pass these tests:

assert topbottom_surfacearea(10)==314.15000000000003
assert topbottom_surfacearea(5)==78.53750000000001
assert topbottom_surfacearea(4)==50.264
[BEGIN]
def topbottom_surfacearea(r):

  toporbottomarea=3.1415*r*r

  return toporbottomarea
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to select the nth items of a list. Your code should pass these tests:

assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] 
assert nth_items([10,15,19,17,16,18],3)==[10,17] 
assert nth_items([14,16,19,15,17],4)==[14,17]
[BEGIN]
def nth_items(list,n):

 return list[::n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first repeated word in a given string. Your code should pass these tests:

assert first_repeated_word("ab ca bc ab") == "ab"
assert first_repeated_word("ab ca bc") == 'None'
assert first_repeated_word("ab ca bc ca ab bc") == "ca"
[BEGIN]
def first_repeated_word(str1):

  temp = set()

  for word in str1.split():

    if word in temp:

      return word;

    else:

      temp.add(word)

  return 'None'
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert a given string list to a tuple. Your code should pass these tests:

assert string_list_to_tuple(("python 3.0")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')
assert string_list_to_tuple(("bigdata")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')
assert string_list_to_tuple(("language")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')
[BEGIN]
def string_list_to_tuple(str1):

    result = tuple(x for x in str1 if not x.isspace()) 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function. Your code should pass these tests:

assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]
assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]
assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]
[BEGIN]
def basesnum_coresspondingnum(bases_num,index):

  result = list(map(pow, bases_num, index))

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the difference between highest and least frequencies in a given array. Your code should pass these tests:

assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2
assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3
assert find_Diff([1,2,1,2],4) == 0
[BEGIN]
def find_Diff(arr,n): 

    arr.sort()  

    count = 0; max_count = 0; min_count = n 

    for i in range(0,(n-1)): 

        if arr[i] == arr[i + 1]: 

            count += 1

            continue

        else: 

            max_count = max(max_count,count) 

            min_count = min(min_count,count) 

            count = 0

    return max_count - min_count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find if the given number is abundant or not. Your code should pass these tests:

assert check_abundant(12) == True
assert check_abundant(15) == False
assert check_abundant(18) == True
[BEGIN]
import math 

def get_sum(n): 

	sum = 0

	i = 1

	while i <= (math.sqrt(n)): 

		if n%i == 0: 

			if n/i == i : 

				sum = sum + i 

			else: 

				sum = sum + i 

				sum = sum + (n / i ) 

		i = i + 1

	sum = sum - n 

	return sum

def check_abundant(n): 

	if (get_sum(n) > n): 

		return True

	else: 

		return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex. Your code should pass these tests:

assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'
assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'
assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'
[BEGIN]
import re

def fill_spaces(text):

  return (re.sub("[ ,.]", ":", text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add two numbers and print number of digits of sum. Your code should pass these tests:

assert count_digits(9875,10)==(4)
assert count_digits(98759853034,100)==(11)
assert count_digits(1234567,500)==(7)
[BEGIN]
def count_digits(num1,num2):

    number=num1+num2

    count = 0

    while(number > 0):

        number = number // 10

        count = count + 1

    return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to flatten the tuple list to a string. Your code should pass these tests:

assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'
assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'
assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'
[BEGIN]
def flatten_tuple(test_list):

  res = ' '.join([idx for tup in test_list for idx in tup])

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to toggle only first and last bits of a given number. Your code should pass these tests:

assert toggle_F_and_L_bits(10) == 3
assert toggle_F_and_L_bits(15) == 6
assert toggle_F_and_L_bits(20) == 5
[BEGIN]
def take_L_and_F_set_bits(n) : 

    n = n | n >> 1

    n = n | n >> 2

    n = n | n >> 4

    n = n | n >> 8

    n = n | n >> 16 

    return ((n + 1) >> 1) + 1      

def toggle_F_and_L_bits(n) :  

    if (n == 1) : 

        return 0 

    return n ^ take_L_and_F_set_bits(n) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the last occurrence of a character in a string. Your code should pass these tests:

assert last_occurence_char("hello world",'l')==10
assert last_occurence_char("language",'g')==7
assert last_occurence_char("little",'y')==None
[BEGIN]
def last_occurence_char(string,char):

 flag = -1

 for i in range(len(string)):

     if(string[i] == char):

         flag = i

 if(flag == -1):

    return None

 else:

    return flag + 1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of hamming distances of all consecutive numbers from o to n. Your code should pass these tests:

assert Total_Hamming_Distance(4) == 7
assert Total_Hamming_Distance(2) == 3
assert Total_Hamming_Distance(5) == 8
[BEGIN]
def Total_Hamming_Distance(n):   

    i = 1

    sum = 0

    while (n // i > 0):  

        sum = sum + n // i  

        i = i * 2     

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the length of the longest increasing subsequence of the given sequence. Your code should pass these tests:

assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5
assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3
assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 
[BEGIN]
def longest_increasing_subsequence(arr): 

	n = len(arr) 

	longest_increasing_subsequence = [1]*n 

	for i in range (1 , n): 

		for j in range(0 , i): 

			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 

				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1

	maximum = 0

	for i in range(n): 

		maximum = max(maximum , longest_increasing_subsequence[i]) 

	return maximum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of fifth power of first n odd natural numbers. Your code should pass these tests:

assert odd_Num_Sum(1) == 1
assert odd_Num_Sum(2) == 244
assert odd_Num_Sum(3) == 3369
[BEGIN]
def odd_Num_Sum(n) : 

    j = 0

    sm = 0

    for i in range(1,n+1) : 

        j = (2*i-1) 

        sm = sm + (j*j*j*j*j)     

    return sm 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum element in a sorted and rotated array. Your code should pass these tests:

assert find_Max([2,3,5,6,9],0,4) == 9
assert find_Max([3,4,5,2,1],0,4) == 5
assert find_Max([1,2,3],0,2) == 3
[BEGIN]
def find_Max(arr,low,high): 

    if (high < low): 

        return arr[0] 

    if (high == low): 

        return arr[low] 

    mid = low + (high - low) // 2 

    if (mid < high and arr[mid + 1] < arr[mid]): 

        return arr[mid] 

    if (mid > low and arr[mid] < arr[mid - 1]): 

        return arr[mid - 1]  

    if (arr[low] > arr[mid]): 

        return find_Max(arr,low,mid - 1) 

    else: 

        return find_Max(arr,mid + 1,high) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract a specified column from a given nested list. Your code should pass these tests:

assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]
assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]
assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]
[BEGIN]
def extract_column(list1, n):

   result = [i.pop(n) for i in list1]

   return result 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether a given sequence is linear or not. Your code should pass these tests:

assert Seq_Linear([0,2,4,6,8,10]) == "Linear Sequence"
assert Seq_Linear([1,2,3]) == "Linear Sequence"
assert Seq_Linear([1,5,2]) == "Non Linear Sequence"
[BEGIN]
def Seq_Linear(seq_nums):

  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]

  if len(set(seq_nums)) == 1: 

    return "Linear Sequence"

  else:

    return "Non Linear Sequence"
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given tuple to a floating-point number. Your code should pass these tests:

assert tuple_to_float((4, 56)) == 4.56
assert tuple_to_float((7, 256)) == 7.256
assert tuple_to_float((8, 123)) == 8.123
[BEGIN]
def tuple_to_float(test_tup):

  res = float('.'.join(str(ele) for ele in test_tup))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find odd numbers from a mixed list. Your code should pass these tests:

assert Split([1,2,3,4,5,6]) == [1,3,5]
assert Split([10,11,12,13]) == [11,13]
assert Split([7,8,9,1]) == [7,9,1]
[BEGIN]
def Split(list): 

    od_li = [] 

    for i in list: 

        if (i % 2 != 0): 

            od_li.append(i)  

    return od_li
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers. Your code should pass these tests:

assert difference(3) == 30
assert difference(5) == 210
assert difference(2) == 6
[BEGIN]
def difference(n) :  

    S = (n*(n + 1))//2;  

    res = S*(S-1);  

    return res;  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the pairs with xor as an odd number. Your code should pass these tests:

assert find_Odd_Pair([5,4,7,2,1],5) == 6
assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12
assert find_Odd_Pair([1,2,3],3) == 2
[BEGIN]
def find_Odd_Pair(A,N) : 

    oddPair = 0

    for i in range(0,N) :  

        for j in range(i+1,N) :  

            if ((A[i] ^ A[j]) % 2 != 0):  

                oddPair+=1  

    return oddPair  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to toggle characters case in a string. Your code should pass these tests:

assert toggle_string("Python")==("pYTHON")
assert toggle_string("Pangram")==("pANGRAM")
assert toggle_string("LIttLE")==("liTTle")
[BEGIN]
def toggle_string(string):

 string1 = string.swapcase()

 return string1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the digit distance between two integers. Your code should pass these tests:

assert digit_distance_nums(1,2) == 1
assert digit_distance_nums(23,56) == 6
assert digit_distance_nums(123,256) == 7
[BEGIN]
def digit_distance_nums(n1, n2):

         return sum(map(int,str(abs(n1-n2))))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest sum of contiguous subarray in the given array. Your code should pass these tests:

assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7
assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8
assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10
[BEGIN]
def max_sub_array_sum(a, size):

  max_so_far = 0

  max_ending_here = 0

  for i in range(0, size):

    max_ending_here = max_ending_here + a[i]

    if max_ending_here < 0:

      max_ending_here = 0

    elif (max_so_far < max_ending_here):

      max_so_far = max_ending_here

  return max_so_far
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the union of elements of the given tuples. Your code should pass these tests:

assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)
assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)
assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)
[BEGIN]
def union_elements(test_tup1, test_tup2):

  res = tuple(set(test_tup1 + test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to assign with each element, its pair elements from other similar pairs in the given tuple. Your code should pass these tests:

assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}
assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}
assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}
[BEGIN]
def assign_elements(test_list):

  res = dict()

  for key, val in test_list:

    res.setdefault(val, [])

    res.setdefault(key, []).append(val)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the maximum length of sublist. Your code should pass these tests:

assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4
assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3
assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5
[BEGIN]
def Find_Max_Length(lst):  

    maxLength = max(len(x) for x in lst )

    return maxLength 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract values between quotation marks of a string. Your code should pass these tests:

assert extract_values('"Python", "PHP", "Java"')==['Python', 'PHP', 'Java']
assert extract_values('"python","program","language"')==['python','program','language']
assert extract_values('"red","blue","green","yellow"')==['red','blue','green','yellow']
[BEGIN]
import re

def extract_values(text):

 return (re.findall(r'"(.*?)"', text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count unequal element pairs from the given array. Your code should pass these tests:

assert count_Pairs([1,2,1],3) == 2
assert count_Pairs([1,1,1,1],4) == 0
assert count_Pairs([1,2,3,4,5],5) == 10
[BEGIN]
def count_Pairs(arr,n): 

    cnt = 0; 

    for i in range(n): 

        for j in range(i + 1,n): 

            if (arr[i] != arr[j]): 

                cnt += 1; 

    return cnt; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to split a string into characters. Your code should pass these tests:

assert split('python') == ['p','y','t','h','o','n']
assert split('Name') == ['N','a','m','e']
assert split('program') == ['p','r','o','g','r','a','m']
[BEGIN]
def split(word): 

    return [char for char in word] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the sum of a non-negative integer. Your code should pass these tests:

assert sum_digits(345)==12
assert sum_digits(12)==3
assert sum_digits(97)==16
[BEGIN]
def sum_digits(n):

  if n == 0:

    return 0

  else:

    return n % 10 + sum_digits(int(n / 10))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether a specified list is sorted or not. Your code should pass these tests:

assert issort_list([1,2,4,6,8,10,12,14,16,17])==True
assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False
assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False
[BEGIN]
def issort_list(list1):

    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to create a list of empty dictionaries. Your code should pass these tests:

assert empty_list(5)==[{},{},{},{},{}]
assert empty_list(6)==[{},{},{},{},{},{}]
assert empty_list(7)==[{},{},{},{},{},{},{}]
[BEGIN]
def empty_list(length):

 empty_list = [{} for _ in range(length)]

 return empty_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort each sublist of strings in a given list of lists. Your code should pass these tests:

assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]
assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]
[BEGIN]
def sort_sublists(list1):

    result = list(map(sorted,list1)) 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove words from a given list of strings containing a character or string. Your code should pass these tests:

assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', "White"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']
assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']
assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']
[BEGIN]
def remove_words(list1, charlist):

    new_list = []

    for line in list1:

        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])

        new_list.append(new_words)

    return new_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k. Your code should pass these tests:

assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62
assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25
assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21
[BEGIN]
def max_sum_pair_diff_lessthan_K(arr, N, K): 

	arr.sort() 

	dp = [0] * N 

	dp[0] = 0

	for i in range(1, N): 

		dp[i] = dp[i-1] 

		if (arr[i] - arr[i-1] < K): 

			if (i >= 2): 

				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 

			else: 

				dp[i] = max(dp[i], arr[i] + arr[i-1]); 

	return dp[N - 1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove two duplicate numbers from a given number of lists. Your code should pass these tests:

assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]
assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]
assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]
[BEGIN]
def two_unique_nums(nums):

  return [i for i in nums if nums.count(i)==1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to calculate the product of the unique numbers of a given list. Your code should pass these tests:

assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000
assert unique_product([1, 2, 3, 1,]) == 6
assert unique_product([7, 8, 9, 0, 1, 1]) == 0
[BEGIN]
def unique_product(list_data):

    temp = list(set(list_data))

    p = 1

    for i in temp:

        p *= i

    return p
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the surface area of a cylinder. Your code should pass these tests:

assert surfacearea_cylinder(10,5)==942.45
assert surfacearea_cylinder(4,5)==226.18800000000002
assert surfacearea_cylinder(4,10)==351.848
[BEGIN]
def surfacearea_cylinder(r,h):

  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))

  return surfacearea
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find nth number in a sequence which is not a multiple of a given number. Your code should pass these tests:

assert count_no(2,3,1,10) == 5
assert count_no(3,6,4,20) == 11
assert count_no(5,10,4,20) == 16
[BEGIN]
def count_no (A,N,L,R): 

    count = 0

    for i in range (L,R + 1): 

        if (i % A != 0): 

            count += 1

        if (count == N): 

            break

    return (i) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether an array is subarray of another or not. Your code should pass these tests:

assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False
assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True
assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False
[BEGIN]
def is_Sub_Array(A,B,n,m): 

    i = 0; j = 0; 

    while (i < n and j < m):  

        if (A[i] == B[j]): 

            i += 1; 

            j += 1; 

            if (j == m): 

                return True;  

        else: 

            i = i - j + 1; 

            j = 0;       

    return False; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the last digit in factorial of a given number. Your code should pass these tests:

assert last_Digit_Factorial(4) == 4
assert last_Digit_Factorial(21) == 0
assert last_Digit_Factorial(30) == 0
[BEGIN]
def last_Digit_Factorial(n): 

    if (n == 0): return 1

    elif (n <= 2): return n  

    elif (n == 3): return 6

    elif (n == 4): return 4 

    else: 

      return 0
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to interleave lists of the same length. Your code should pass these tests:

assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]
assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]
assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]
[BEGIN]
def interleave_lists(list1,list2,list3):

    result = [el for pair in zip(list1, list2, list3) for el in pair]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the dissimilar elements in the given two tuples. Your code should pass these tests:

assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)
assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)
assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)
[BEGIN]
def find_dissimilar(test_tup1, test_tup2):

  res = tuple(set(test_tup1) ^ set(test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the even elements in the nested mixed tuple. Your code should pass these tests:

assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)
assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))
assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)
[BEGIN]
def even_ele(test_tuple, even_fnc): 

	res = tuple() 

	for ele in test_tuple: 

		if isinstance(ele, tuple): 

			res += (even_ele(ele, even_fnc), ) 

		elif even_fnc(ele): 

			res += (ele, ) 

	return res 

def extract_even(test_tuple):

  res = even_ele(test_tuple, lambda x: x % 2 == 0)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the surface area of the square pyramid. Your code should pass these tests:

assert surface_Area(3,4) == 33
assert surface_Area(4,5) == 56
assert surface_Area(1,2) == 5
[BEGIN]
def surface_Area(b,s): 

    return 2 * b * s + pow(b,2) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a dictionary is empty or not. Your code should pass these tests:

assert my_dict({10})==False
assert my_dict({11})==False
assert my_dict({})==True
[BEGIN]
def my_dict(dict1):

  if bool(dict1):

     return False

  else:

     return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function for nth catalan number. Your code should pass these tests:

assert catalan_number(10)==16796
assert catalan_number(9)==4862
assert catalan_number(7)==429
[BEGIN]
def catalan_number(num):

    if num <=1:

         return 1   

    res_num = 0

    for i in range(num):

        res_num += catalan_number(i) * catalan_number(num-i-1)

    return res_num
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all adverbs and their positions in a given sentence by using regex. Your code should pass these tests:

assert find_adverbs("Clearly, he has no excuse for such behavior.") == '0-7: Clearly'
assert find_adverbs("Please handle the situation carefuly") == '28-36: carefuly'
assert find_adverbs("Complete the task quickly") == '18-25: quickly'
[BEGIN]
import re

def find_adverbs(text):

  for m in re.finditer(r"\w+ly", text):

    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n - expensive price items from a given dataset using heap queue algorithm. Your code should pass these tests:

assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]
assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]
assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]
[BEGIN]
import heapq

def expensive_items(items,n):

  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])

  return expensive_items
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to split the array and add the first part to the end. Your code should pass these tests:

assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]
assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]
assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]
[BEGIN]
def split_Arr(a,n,k):  

   b = a[:k] 

   return (a[k::]+b[::]) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a list to a tuple. Your code should pass these tests:

assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)
assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)
assert list_tuple([58,44,56])==(58,44,56)
[BEGIN]
def list_tuple(listx):

  tuplex = tuple(listx)

  return tuplex
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the difference between largest and smallest value in a given array. Your code should pass these tests:

assert big_diff([1,2,3,4]) == 3
assert big_diff([4,5,12]) == 8
assert big_diff([9,2,3]) == 7
[BEGIN]
def big_diff(nums):

     diff= max(nums)-min(nums)

     return diff
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find perfect squares between two given numbers. Your code should pass these tests:

assert perfect_squares(1,30)==[1, 4, 9, 16, 25]
assert perfect_squares(50,100)==[64, 81, 100]
assert perfect_squares(100,200)==[100, 121, 144, 169, 196]
[BEGIN]
def perfect_squares(a, b):

    lists=[]

    for i in range (a,b+1):

        j = 1;

        while j*j <= i:

            if j*j == i:

                 lists.append(i)  

            j = j+1

        i = i+1

    return lists
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert polar coordinates to rectangular coordinates. Your code should pass these tests:

assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))
assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))
assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))
[BEGIN]
import cmath

def polar_rect(x,y):

 cn = complex(x,y)

 cn=cmath.polar(cn)

 cn1 = cmath.rect(2, cmath.pi)

 return (cn,cn1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to interchange the first and last elements in a list. Your code should pass these tests:

assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]
assert swap_List([1, 2, 3]) == [3, 2, 1]
assert swap_List([4, 5, 6]) == [6, 5, 4]
[BEGIN]
def swap_List(newList): 

    size = len(newList) 

    temp = newList[0] 

    newList[0] = newList[size - 1] 

    newList[size - 1] = temp  

    return newList 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of product of binomial co-efficients. Your code should pass these tests:

assert sum_Of_product(3) == 15
assert sum_Of_product(4) == 56
assert sum_Of_product(1) == 1
[BEGIN]
def binomial_Coeff(n,k): 

    C = [0] * (k + 1); 

    C[0] = 1; # nC0 is 1 

    for i in range(1,n + 1):  

        for j in range(min(i, k),0,-1): 

            C[j] = C[j] + C[j - 1]; 

    return C[k]; 

def sum_Of_product(n): 

    return binomial_Coeff(2 * n,n - 1); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove leading zeroes from an ip address. Your code should pass these tests:

assert removezero_ip("216.08.094.196")==('216.8.94.196') 
assert removezero_ip("12.01.024")==('12.1.24') 
assert removezero_ip("216.08.094.0196")==('216.8.94.196') 
[BEGIN]
import re

def removezero_ip(ip):

 string = re.sub('\.[0]*', '.', ip)

 return string

[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the difference of first even and odd number of a given list. Your code should pass these tests:

assert diff_even_odd([1,3,5,7,4,1,6,8])==3
assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1
assert diff_even_odd([1,5,7,9,10])==9
[BEGIN]
def diff_even_odd(list1):

    first_even = next((el for el in list1 if el%2==0),-1)

    first_odd = next((el for el in list1 if el%2!=0),-1)

    return (first_even-first_odd)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count minimum number of swaps required to convert one binary string to another. Your code should pass these tests:

assert min_Swaps("1101","1110") == 1
assert min_Swaps("111","000") == "Not Possible"
assert min_Swaps("111","110") == "Not Possible"
[BEGIN]
def min_Swaps(str1,str2) : 

    count = 0

    for i in range(len(str1)) :  

        if str1[i] != str2[i] : 

            count += 1

    if count % 2 == 0 : 

        return (count // 2) 

    else : 

        return ("Not Possible") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the size of the given tuple. Your code should pass these tests:

assert tuple_size(("A", 1, "B", 2, "C", 3) ) == 104
assert tuple_size((1, "Raju", 2, "Nikhil", 3, "Deepanshu") ) == 104
assert tuple_size(((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf"))  ) == 88
[BEGIN]
import sys 

def tuple_size(tuple_list):

  return (sys.getsizeof(tuple_list)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find kth element from the given two sorted arrays. Your code should pass these tests:

assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6
assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256
assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8
[BEGIN]
def find_kth(arr1, arr2, m, n, k):

	sorted1 = [0] * (m + n)

	i = 0

	j = 0

	d = 0

	while (i < m and j < n):

		if (arr1[i] < arr2[j]):

			sorted1[d] = arr1[i]

			i += 1

		else:

			sorted1[d] = arr2[j]

			j += 1

		d += 1

	while (i < m):

		sorted1[d] = arr1[i]

		d += 1

		i += 1

	while (j < n):

		sorted1[d] = arr2[j]

		d += 1

		j += 1

	return sorted1[k - 1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given number is armstrong or not. Your code should pass these tests:

assert armstrong_number(153)==True
assert armstrong_number(259)==False
assert armstrong_number(4458)==False
[BEGIN]
def armstrong_number(number):

 sum = 0

 times = 0

 temp = number

 while temp > 0:

           times = times + 1

           temp = temp // 10

 temp = number

 while temp > 0:

           reminder = temp % 10

           sum = sum + (reminder ** times)

           temp //= 10

 if number == sum:

           return True

 else:

           return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find sum and average of first n natural numbers. Your code should pass these tests:

assert sum_average(10)==(55, 5.5)
assert sum_average(15)==(120, 8.0)
assert sum_average(20)==(210, 10.5)
[BEGIN]
def sum_average(number):

 total = 0

 for value in range(1, number + 1):

    total = total + value

 average = total / number

 return (total,average)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number is even or not using bitwise operator. Your code should pass these tests:

assert is_Even(1) == False
assert is_Even(2) == True
assert is_Even(3) == False
[BEGIN]
def is_Even(n) : 

    if (n^1 == n+1) :

        return True; 

    else :

        return False; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest chain which can be formed from the given set of pairs. Your code should pass these tests:

assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3
assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4
assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5
[BEGIN]
class Pair(object): 

	def __init__(self, a, b): 

		self.a = a 

		self.b = b 

def max_chain_length(arr, n): 

	max = 0

	mcl = [1 for i in range(n)] 

	for i in range(1, n): 

		for j in range(0, i): 

			if (arr[i].a > arr[j].b and

				mcl[i] < mcl[j] + 1): 

				mcl[i] = mcl[j] + 1

	for i in range(n): 

		if (max < mcl[i]): 

			max = mcl[i] 

	return max
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first repeated character in a given string. Your code should pass these tests:

assert first_repeated_char("abcabc") == "a"
assert first_repeated_char("abc") == "None"
assert first_repeated_char("123123") == "1"
[BEGIN]
def first_repeated_char(str1):

  for index,c in enumerate(str1):

    if str1[:index+1].count(c) > 1:

      return c 

  return "None"
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get a lucid number smaller than or equal to n. Your code should pass these tests:

assert get_ludic(10) == [1, 2, 3, 5, 7]
assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]
assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]
[BEGIN]
def get_ludic(n):

	ludics = []

	for i in range(1, n + 1):

		ludics.append(i)

	index = 1

	while(index != len(ludics)):

		first_ludic = ludics[index]

		remove_index = index + first_ludic

		while(remove_index < len(ludics)):

			ludics.remove(ludics[remove_index])

			remove_index = remove_index + first_ludic - 1

		index += 1

	return ludics
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to reverse words in a given string. Your code should pass these tests:

assert reverse_words("python program")==("program python")
assert reverse_words("java language")==("language java")
assert reverse_words("indian man")==("man indian")
[BEGIN]
def reverse_words(s):

        return ' '.join(reversed(s.split()))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given integer is a prime number. Your code should pass these tests:

assert prime_num(13)==True
assert prime_num(7)==True
assert prime_num(-1010)==False
[BEGIN]
def prime_num(num):

  if num >=1:

   for i in range(2, num//2):

     if (num % i) == 0:

                return False

     else:

                return True

  else:

          return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert degrees to radians. Your code should pass these tests:

assert radian_degree(90)==1.5707963267948966
assert radian_degree(60)==1.0471975511965976
assert radian_degree(120)==2.0943951023931953
[BEGIN]
import math

def radian_degree(degree):

 radian = degree*(math.pi/180)

 return radian
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex. Your code should pass these tests:

assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)
assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)
assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)
[BEGIN]
import re

pattern = 'fox'

text = 'The quick brown fox jumps over the lazy dog.'

def find_literals(text, pattern):

  match = re.search(pattern, text)

  s = match.start()

  e = match.end()

  return (match.re.pattern, s, e)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find nth bell number. Your code should pass these tests:

assert bell_Number(2) == 2
assert bell_Number(3) == 5
assert bell_Number(4) == 15
[BEGIN]
def bell_Number(n): 

    bell = [[0 for i in range(n+1)] for j in range(n+1)] 

    bell[0][0] = 1

    for i in range(1, n+1):

        bell[i][0] = bell[i-1][i-1]

        for j in range(1, i+1): 

            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 

    return bell[n][0] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find minimum possible value for the given periodic function. Your code should pass these tests:

assert floor_Min(10,20,30) == 15
assert floor_Min(1,2,1) == 0
assert floor_Min(11,10,9) == 9
[BEGIN]
def floor_Min(A,B,N):

    x = max(B - 1,N)

    return (A*x) // B
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove the k'th element from a given list. Your code should pass these tests:

assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]
assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]
[BEGIN]
def remove_kth_element(list1, L):

    return  list1[:L-1] + list1[L:]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum of nth column from the given tuple list. Your code should pass these tests:

assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19
assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10
assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11
[BEGIN]
def max_of_nth(test_list, N):

  res = max([sub[N] for sub in test_list])

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to merge the first and last elements separately in a list of lists. Your code should pass these tests:

assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]
assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]
assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]
[BEGIN]
def merge(lst):  

    return [list(ele) for ele in list(zip(*lst))] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum value in record list as tuple attribute in the given tuple list. Your code should pass these tests:

assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]
assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]
assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]
[BEGIN]
def maximum_value(test_list):

  res = [(key, max(lst)) for key, lst in test_list]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the cumulative sum of all the values that are present in the given tuple list. Your code should pass these tests:

assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30
assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37
assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44
[BEGIN]
def cummulative_sum(test_list):

  res = sum(map(sum, test_list))

  return (res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find average value of the numbers in a given tuple of tuples. Your code should pass these tests:

assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]
assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]
assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]
[BEGIN]
def average_tuple(nums):

    result = [sum(x) / len(x) for x in zip(*nums)]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perfom the modulo of tuple elements in the given two tuples. Your code should pass these tests:

assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)
assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)
assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)
[BEGIN]
def tuple_modulo(test_tup1, test_tup2):

  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane. Your code should pass these tests:

assert min_Jumps(3,4,11)==3.5
assert min_Jumps(3,4,0)==0
assert min_Jumps(11,14,11)==1
[BEGIN]
def min_Jumps(a, b, d): 

    temp = a 

    a = min(a, b) 

    b = max(temp, b) 

    if (d >= b): 

        return (d + b - 1) / b 

    if (d == 0): 

        return 0

    if (d == a): 

        return 1

    else:

        return 2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to divide two lists using map and lambda function. Your code should pass these tests:

assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]
assert div_list([3,2],[1,4])==[3.0, 0.5]
assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]
[BEGIN]
def div_list(nums1,nums2):

  result = map(lambda x, y: x / y, nums1, nums2)

  return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to move all the numbers in it to the given string. Your code should pass these tests:

assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'
assert move_num('Avengers124Assemble') == 'AvengersAssemble124'
assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'
[BEGIN]
def move_num(test_str):

  res = ''

  dig = ''

  for ele in test_str:

    if ele.isdigit():

      dig += ele

    else:

      res += ele

  res += dig

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest subset where each pair is divisible. Your code should pass these tests:

assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4
assert largest_subset([10, 5, 3, 15, 20], 5) == 3
assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4
[BEGIN]
def largest_subset(a, n):

	dp = [0 for i in range(n)]

	dp[n - 1] = 1; 

	for i in range(n - 2, -1, -1):

		mxm = 0;

		for j in range(i + 1, n):

			if a[j] % a[i] == 0 or a[i] % a[j] == 0:

				mxm = max(mxm, dp[j])

		dp[i] = 1 + mxm

	return max(dp)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to increment the numeric values in the given strings by k. Your code should pass these tests:

assert increment_numerics(["MSM", "234", "is", "98", "123", "best", "4"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']
assert increment_numerics(["Dart", "356", "is", "88", "169", "Super", "6"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']
assert increment_numerics(["Flutter", "451", "is", "44", "96", "Magnificent", "12"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']
[BEGIN]
def increment_numerics(test_list, K):

  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]

  return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the median of two sorted arrays of same size. Your code should pass these tests:

assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0
assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5
assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0
[BEGIN]
def get_median(arr1, arr2, n):

  i = 0

  j = 0

  m1 = -1

  m2 = -1

  count = 0

  while count < n + 1:

    count += 1

    if i == n:

      m1 = m2

      m2 = arr2[0]

      break

    elif j == n:

      m1 = m2

      m2 = arr1[0]

      break

    if arr1[i] <= arr2[j]:

      m1 = m2

      m2 = arr1[i]

      i += 1

    else:

      m1 = m2

      m2 = arr2[j]

      j += 1

  return (m1 + m2)/2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n-th power of individual elements in a list using lambda function. Your code should pass these tests:

assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
assert nth_nums([10,20,30],3)==([1000, 8000, 27000])
assert nth_nums([12,15],5)==([248832, 759375])
[BEGIN]
def nth_nums(nums,n):

 nth_nums = list(map(lambda x: x ** n, nums))

 return nth_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert the given string to upper case. Your code should pass these tests:

assert is_upper("person") =="PERSON"
assert is_upper("final") == "FINAL"
assert is_upper("Valid") == "VALID"
[BEGIN]
def is_upper(string):

  return (string.upper())
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to interchange first and last elements in a given list. Your code should pass these tests:

assert swap_List([1,2,3]) == [3,2,1]
assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]
assert swap_List([4,5,6]) == [6,5,4]
[BEGIN]
def swap_List(newList): 

    size = len(newList) 

    temp = newList[0] 

    newList[0] = newList[size - 1] 

    newList[size - 1] = temp   

    return newList 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the largest triangle that can be inscribed in the semicircle. Your code should pass these tests:

assert triangle_area(0) == 0
assert triangle_area(-1) == -1
assert triangle_area(2) == 4
[BEGIN]
def triangle_area(r) :  

    if r < 0 : 

        return -1

    return r * r 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the smallest missing number from the given array. Your code should pass these tests:

assert find_First_Missing([0,1,2,3],0,3) == 4
assert find_First_Missing([0,1,2,6,9],0,4) == 3
assert find_First_Missing([2,3,5,8,9],0,4) == 0
[BEGIN]
def find_First_Missing(array,start,end): 

    if (start > end): 

        return end + 1

    if (start != array[start]): 

        return start; 

    mid = int((start + end) / 2) 

    if (array[mid] == mid): 

        return find_First_Missing(array,mid+1,end) 

    return find_First_Missing(array,start,mid) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'. Your code should pass these tests:

assert replace_spaces("My Name is Dawood") == 'My%20Name%20is%20Dawood'
assert replace_spaces("I am a Programmer") == 'I%20am%20a%20Programmer'
assert replace_spaces("I love Coding") == 'I%20love%20Coding'
[BEGIN]
MAX=1000;

def replace_spaces(string):

  string=string.strip()

  i=len(string)

  space_count=string.count(' ')

  new_length = i + space_count*2

  if new_length > MAX:

    return -1

  index = new_length-1

  string=list(string)

  for f in range(i-2, new_length-2):

    string.append('0')

  for j in range(i-1, 0, -1):

    if string[j] == ' ':

      string[index] = '0'

      string[index-1] = '2'

      string[index-2] = '%'

      index=index-3

    else:

      string[index] = string[j]

      index -= 1

  return ''.join(string)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find even numbers from a mixed list. Your code should pass these tests:

assert Split([1,2,3,4,5]) == [2,4]
assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]
assert Split ([8,12,15,19]) == [8,12]
[BEGIN]
def Split(list): 

    ev_li = [] 

    for i in list: 

        if (i % 2 == 0): 

            ev_li.append(i)  

    return ev_li
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract all the adjacent coordinates of the given coordinate tuple. Your code should pass these tests:

assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]
assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]
assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]
[BEGIN]
def adjac(ele, sub = []): 

  if not ele: 

     yield sub 

  else: 

     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 

                for idx in adjac(ele[1:], sub + [j])] 

def get_coordinates(test_tup):

  res = list(adjac(test_tup))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex. Your code should pass these tests:

assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'
assert replace_spaces('The Avengers') == 'The_Avengers'
assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'
[BEGIN]
import re

text = 'Python Exercises'

def replace_spaces(text):

  text =text.replace (" ", "_")

  return (text)

  text =text.replace ("_", " ")

  return (text)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to move all zeroes to the end of the given list. Your code should pass these tests:

assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]
assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]
assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]
[BEGIN]
def move_zero(num_list):

    a = [0 for i in range(num_list.count(0))]

    x = [ i for i in num_list if i != 0]

    x.extend(a)

    return (x)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of xor of all pairs of numbers in the given array. Your code should pass these tests:

assert pair_OR_Sum([5,9,7,6],4) == 47
assert pair_OR_Sum([7,3,5],3) == 12
assert pair_OR_Sum([7,3],2) == 4
[BEGIN]
def pair_OR_Sum(arr,n) : 

    ans = 0 

    for i in range(0,n) :    

        for j in range(i + 1,n) :   

            ans = ans + (arr[i] ^ arr[j])          

    return ans 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of fourth power of first n even natural numbers. Your code should pass these tests:

assert even_Power_Sum(2) == 272
assert even_Power_Sum(3) == 1568
assert even_Power_Sum(4) == 5664
[BEGIN]
def even_Power_Sum(n): 

    sum = 0; 

    for i in range(1,n + 1): 

        j = 2*i; 

        sum = sum + (j*j*j*j); 

    return sum; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to push all values into a heap and then pop off the smallest values one at a time. Your code should pass these tests:

assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]
assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]
[BEGIN]
import heapq as hq

def heap_sort(iterable):

    h = []

    for value in iterable:

        hq.heappush(h, value)

    return [hq.heappop(h) for i in range(len(h))]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check if roots of a quadratic equation are reciprocal of each other or not. Your code should pass these tests:

assert Check_Solution(2,0,2) == "Yes"
assert Check_Solution(2,-5,2) == "Yes"
assert Check_Solution(1,2,3) == "No"
[BEGIN]
def Check_Solution(a,b,c): 

    if (a == c): 

        return ("Yes"); 

    else: 

        return ("No"); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given amount has no profit and no loss Your code should pass these tests:

assert noprofit_noloss(1500,1200)==False
assert noprofit_noloss(100,100)==True
assert noprofit_noloss(2000,5000)==False
[BEGIN]
def noprofit_noloss(actual_cost,sale_amount): 

  if(sale_amount == actual_cost):

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate wind chill index. Your code should pass these tests:

assert wind_chill(120,35)==40
assert wind_chill(40,70)==86
assert wind_chill(10,100)==116
[BEGIN]
import math

def wind_chill(v,t):

 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)

 return int(round(windchill, 0))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter. Your code should pass these tests:

assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16
assert sample_nam(["php", "res", "Python", "abcd", "Java", "aaa"])==10
assert sample_nam(["abcd", "Python", "abba", "aba"])==6
[BEGIN]
def sample_nam(sample_names):

  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))

  return len(''.join(sample_names))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove the parenthesis area in a string. Your code should pass these tests:

assert remove_parenthesis(["python (chrome)"])==("python")
assert remove_parenthesis(["string(.abc)"])==("string")
assert remove_parenthesis(["alpha(num)"])==("alpha")
[BEGIN]
import re

def remove_parenthesis(items):

 for item in items:

    return (re.sub(r" ?\([^)]+\)", "", item))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth nonagonal number. Your code should pass these tests:

assert is_nonagonal(10) == 325
assert is_nonagonal(15) == 750
assert is_nonagonal(18) == 1089
[BEGIN]
def is_nonagonal(n): 

	return int(n * (7 * n - 5) / 2) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove similar rows from the given tuple matrix. Your code should pass these tests:

assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((4, 6), (2, 2)), ((4, 5), (3, 2))}
assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((5, 6), (4, 3)), ((5, 7), (3, 3))}
assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((5, 4), (6, 7)), ((4, 4), (6, 8))}
[BEGIN]
def remove_similar_row(test_list):

  res = set([tuple(set(sub)) for sub in test_list])

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a word containing 'z', not at the start or end of the word. Your code should pass these tests:

assert text_match_wordz_middle("pythonzabc.")==('Found a match!')
assert text_match_wordz_middle("xyzabc.")==('Found a match!')
assert text_match_wordz_middle("  lang  .")==('Not matched!')
[BEGIN]
import re

def text_match_wordz_middle(text):

        patterns = '\Bz\B'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to reverse an array upto a given position. Your code should pass these tests:

assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]
assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]
assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]
[BEGIN]
def reverse_Array_Upto_K(input, k): 

  return (input[k-1::-1] + input[k:]) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the product of it’s kth index in the given tuples. Your code should pass these tests:

assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665
assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280
assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210
[BEGIN]
def get_product(val) : 

	res = 1

	for ele in val: 

		res *= ele 

	return res 

def find_k_product(test_list, K):

  res = get_product([sub[K] for sub in test_list])

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count number of cubes of size k in a cube of size n. Your code should pass these tests:

assert No_of_cubes(2,1) == 8
assert No_of_cubes(5,2) == 64
assert No_of_cubes(1,1) == 1
[BEGIN]
def No_of_cubes(N,K):

    No = 0

    No = (N - K + 1)

    No = pow(No, 3)

    return No
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to split a string at uppercase letters. Your code should pass these tests:

assert split_upperstring("PythonProgramLanguage")==['Python','Program','Language']
assert split_upperstring("PythonProgram")==['Python','Program']
assert split_upperstring("ProgrammingLanguage")==['Programming','Language']
[BEGIN]
import re

def split_upperstring(text):

 return (re.findall('[A-Z][^A-Z]*', text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list. Your code should pass these tests:

assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] 
assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] 
assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] 
[BEGIN]
from itertools import zip_longest, chain, tee

def exchange_elements(lst):

    lst1, lst2 = tee(iter(lst), 2)

    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to calculate the sum of the numbers in a list between the indices of a specified range. Your code should pass these tests:

assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29
assert sum_Range_list([1,2,3,4,5],1,2) == 5
assert sum_Range_list([1,0,1,2,5,6],4,5) == 11
[BEGIN]
def sum_Range_list(nums, m, n):                                                                                                                                                                                                

    sum_range = 0                                                                                                                                                                                                         

    for i in range(m, n+1, 1):                                                                                                                                                                                        

        sum_range += nums[i]                                                                                                                                                                                                  

    return sum_range   
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given two arrays are equal or not. Your code should pass these tests:

assert are_Equal([1,2,3],[3,2,1],3,3) == True
assert are_Equal([1,1,1],[2,2,2],3,3) == False
assert are_Equal([8,9],[4,5,6],2,3) == False
[BEGIN]
def are_Equal(arr1,arr2,n,m):

    if (n != m):

        return False

    arr1.sort()

    arr2.sort()

    for i in range(0,n - 1):

        if (arr1[i] != arr2[i]):

            return False

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if one tuple is a subset of another tuple. Your code should pass these tests:

assert check_subset((10, 4, 5, 6), (5, 10)) == True
assert check_subset((1, 2, 3, 4), (5, 6)) == False
assert check_subset((7, 8, 9, 10), (10, 8)) == True
[BEGIN]
def check_subset(test_tup1, test_tup2):

  res = set(test_tup2).issubset(test_tup1)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column. Your code should pass these tests:

assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'
assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'
assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'
[BEGIN]
def matrix_to_list(test_list):

  temp = [ele for sub in test_list for ele in sub]

  res = list(zip(*temp))

  return (str(res))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module. Your code should pass these tests:

assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})
assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})
assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})
[BEGIN]
from collections import defaultdict

def grouping_dictionary(l):

    d = defaultdict(list)

    for k, v in l:

        d[k].append(v)

    return d
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the perimeter of a rectangle. Your code should pass these tests:

assert rectangle_perimeter(10,20)==60
assert rectangle_perimeter(10,5)==30
assert rectangle_perimeter(4,2)==12
[BEGIN]
def rectangle_perimeter(l,b):

  perimeter=2*(l+b)

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of fifth power of n natural numbers. Your code should pass these tests:

assert fifth_Power_Sum(2) == 33
assert fifth_Power_Sum(4) == 1300
assert fifth_Power_Sum(3) == 276
[BEGIN]
def fifth_Power_Sum(n) : 

    sm = 0 

    for i in range(1,n+1) : 

        sm = sm + (i*i*i*i*i) 

    return sm 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum sum of absolute differences of two arrays. Your code should pass these tests:

assert find_Min_Sum([3,2,1],[2,1,3],3) == 0
assert find_Min_Sum([1,2,3],[4,5,6],3) == 9
assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6
[BEGIN]
def find_Min_Sum(a,b,n): 

    a.sort() 

    b.sort() 

    sum = 0  

    for i in range(n): 

        sum = sum + abs(a[i] - b[i]) 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first digit in factorial of a given number. Your code should pass these tests:

assert first_Digit(5) == 1
assert first_Digit(10) == 3
assert first_Digit(7) == 5
[BEGIN]
import math 

def first_Digit(n) : 

    fact = 1

    for i in range(2,n + 1) : 

        fact = fact * i 

        while (fact % 10 == 0) :  

            fact = int(fact / 10) 

    while (fact >= 10) : 

        fact = int(fact / 10) 

    return math.floor(fact) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the item with maximum occurrences in a given list. Your code should pass these tests:

assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2
assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1
assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1
[BEGIN]
def max_occurrences(list1):

    max_val = 0

    result = list1[0] 

    for i in list1:

        occu = list1.count(i)

        if occu > max_val:

            max_val = occu

            result = i 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to print duplicants from a list of integers. Your code should pass these tests:

assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]
assert Repeat([-1, 1, -1, 8]) == [-1]
assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]
[BEGIN]
def Repeat(x): 

    _size = len(x) 

    repeated = [] 

    for i in range(_size): 

        k = i + 1

        for j in range(k, _size): 

            if x[i] == x[j] and x[i] not in repeated: 

                repeated.append(x[i]) 

    return repeated 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to choose points from two ranges such that no point lies in both the ranges. Your code should pass these tests:

assert find_Points(5,10,1,5) == (1,10)
assert find_Points(3,5,7,9) == (3,9)
assert find_Points(1,5,2,8) == (1,8)
[BEGIN]
def find_Points(l1,r1,l2,r2): 

    x = min(l1,l2) if (l1 != l2) else -1

    y = max(r1,r2) if (r1 != r2) else -1

    return (x,y)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum that can be formed which has no three consecutive elements present. Your code should pass these tests:

assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101
assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013
assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27
[BEGIN]
def max_sum_of_three_consecutive(arr, n): 

	sum = [0 for k in range(n)] 

	if n >= 1: 

		sum[0] = arr[0] 

	if n >= 2: 

		sum[1] = arr[0] + arr[1] 

	if n > 2: 

		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 

	for i in range(3, n): 

		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 

	return sum[n-1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list in a dictionary. Your code should pass these tests:

assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}
assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}
assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}
[BEGIN]
def sorted_dict(dict1):

  sorted_dict = {x: sorted(y) for x, y in dict1.items()}

  return sorted_dict
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the largest possible value of k such that k modulo x is y. Your code should pass these tests:

assert find_max_val(15, 10, 5) == 15
assert find_max_val(187, 10, 5) == 185
assert find_max_val(16, 11, 1) == 12
[BEGIN]
import sys 

def find_max_val(n, x, y): 

	ans = -sys.maxsize 

	for k in range(n + 1): 

		if (k % x == y): 

			ans = max(ans, k) 

	return (ans if (ans >= 0 and

					ans <= n) else -1) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the average of even numbers till a given even number. Your code should pass these tests:

assert average_Even(2) == 2
assert average_Even(4) == 3
assert average_Even(100) == 51
[BEGIN]
def average_Even(n) : 

    if (n% 2!= 0) : 

        return ("Invalid Input") 

        return -1  

    sm = 0

    count = 0

    while (n>= 2) : 

        count = count+1

        sm = sm+n 

        n = n-2

    return sm // count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to shift first element to the end of given list. Your code should pass these tests:

assert move_last([1,2,3,4]) == [2,3,4,1]
assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]
assert move_last([5,4,3,2,1]) == [4,3,2,1,5]
[BEGIN]
def move_last(num_list):

    a = [num_list[0] for i in range(num_list.count(num_list[0]))]

    x = [ i for i in num_list if i != num_list[0]]

    x.extend(a)

    return (x)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count occurrence of a character in a string. Your code should pass these tests:

assert count_char("Python",'o')==1
assert count_char("little",'t')==2
assert count_char("assert",'s')==2
[BEGIN]
def count_char(string,char):

 count = 0

 for i in range(len(string)):

    if(string[i] == char):

        count = count + 1

 return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count number of vowels in the string. Your code should pass these tests:

assert Check_Vow('corner','AaEeIiOoUu') == 2
assert Check_Vow('valid','AaEeIiOoUu') == 2
assert Check_Vow('true','AaEeIiOoUu') ==2
[BEGIN]
def Check_Vow(string, vowels): 

    final = [each for each in string if each in vowels] 

    return(len(final)) 


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to replace multiple occurence of character by single. Your code should pass these tests:

assert replace('peep','e') == 'pep'
assert replace('Greek','e') == 'Grek'
assert replace('Moon','o') == 'Mon'
[BEGIN]
import re 

def replace(string, char): 

    pattern = char + '{2,}'

    string = re.sub(pattern, char, string) 

    return string 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given ip address is valid or not using regex. Your code should pass these tests:

assert check_IP("192.168.0.1") == 'Valid IP address'
assert check_IP("110.234.52.124") == 'Valid IP address'
assert check_IP("366.1.2.2") == 'Invalid IP address'
[BEGIN]
import re 

regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 

			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 

			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 

			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''

def check_IP(Ip): 

	if(re.search(regex, Ip)): 

		return ("Valid IP address") 

	else: 

		return ("Invalid IP address") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether a sequence of numbers has a decreasing trend or not. Your code should pass these tests:

assert decreasing_trend([-4,-3,-2,-1]) == True
assert decreasing_trend([1,2,3]) == True
assert decreasing_trend([3,2,1]) == False
[BEGIN]
def decreasing_trend(nums):

    if (sorted(nums)== nums):

        return True

    else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to set the right most unset bit. Your code should pass these tests:

assert set_Right_most_Unset_Bit(21) == 23
assert set_Right_most_Unset_Bit(11) == 15
assert set_Right_most_Unset_Bit(15) == 15
[BEGIN]
import math 

def get_Pos_Of_Right_most_Set_Bit(n): 

    return int(math.log2(n&-n)+1)   

def set_Right_most_Unset_Bit(n): 

    if (n == 0): 

        return 1

    if ((n & (n + 1)) == 0):     

        return n 

    pos = get_Pos_Of_Right_most_Set_Bit(~n)      

    return ((1 << (pos - 1)) | n) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find maximum of three numbers. Your code should pass these tests:

assert max_of_three(10,20,30)==30
assert max_of_three(55,47,39)==55
assert max_of_three(10,49,30)==49
[BEGIN]
def max_of_three(num1,num2,num3): 

    if (num1 >= num2) and (num1 >= num3):

       lnum = num1

    elif (num2 >= num1) and (num2 >= num3):

       lnum = num2

    else:

       lnum = num3

    return lnum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert a list of multiple integers into a single integer. Your code should pass these tests:

assert convert([1,2,3]) == 123
assert convert([4,5,6]) == 456
assert convert([7,8,9]) == 789
[BEGIN]
def convert(list): 

    s = [str(i) for i in list] 

    res = int("".join(s))  

    return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove duplicate words from a given string using collections module. Your code should pass these tests:

assert remove_duplicate("Python Exercises Practice Solution Exercises")==("Python Exercises Practice Solution")
assert remove_duplicate("Python Exercises Practice Solution Python")==("Python Exercises Practice Solution")
assert remove_duplicate("Python Exercises Practice Solution Practice")==("Python Exercises Practice Solution")
[BEGIN]
from collections import OrderedDict

def remove_duplicate(string):

  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add two integers. however, if the sum is between the given range it will return 20. Your code should pass these tests:

assert sum_nums(2,10,11,20)==20
assert sum_nums(15,17,1,10)==32
assert sum_nums(10,15,5,30)==20
[BEGIN]
def sum_nums(x, y,m,n):

    sum_nums= x + y

    if sum_nums in range(m, n):

        return 20

    else:

        return sum_nums
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove everything except alphanumeric characters from the given string by using regex. Your code should pass these tests:

assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'
assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'
assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'
[BEGIN]
import re

def remove_extra_char(text1):

  pattern = re.compile('[\W_]+')

  return (pattern.sub('', text1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the triangle is valid or not. Your code should pass these tests:

assert validity_triangle(60,50,90)==False
assert validity_triangle(45,75,60)==True
assert validity_triangle(30,50,100)==True
[BEGIN]
def validity_triangle(a,b,c):

 total = a + b + c

 if total == 180:

    return True

 else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove spaces from a given string. Your code should pass these tests:

assert remove_spaces("a b c") == "abc"
assert remove_spaces("1 2 3") == "123"
assert remove_spaces(" b c") == "bc"
[BEGIN]
def remove_spaces(str1):

  str1 = str1.replace(' ','')

  return str1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to access dictionary key’s element by index. Your code should pass these tests:

assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'
assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'
assert access_key({'program':15,'computer':45},1)== 'computer'
[BEGIN]
def access_key(ditionary,key):

  return list(ditionary)[key]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether a sequence of numbers has an increasing trend or not. Your code should pass these tests:

assert increasing_trend([1,2,3,4]) == True
assert increasing_trend([4,3,2,1]) == False
assert increasing_trend([0,1,4,9]) == True
[BEGIN]
def increasing_trend(nums):

    if (sorted(nums)== nums):

        return True

    else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the smallest prime divisor of a number. Your code should pass these tests:

assert smallest_Divisor(10) == 2
assert smallest_Divisor(25) == 5
assert smallest_Divisor(31) == 31
[BEGIN]
def smallest_Divisor(n): 

    if (n % 2 == 0): 

        return 2; 

    i = 3;  

    while (i*i <= n): 

        if (n % i == 0): 

            return i; 

        i += 2; 

    return n; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to multiply two lists using map and lambda function. Your code should pass these tests:

assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]
assert mul_list([1,2],[3,4])==[3,8]
assert mul_list([90,120],[50,70])==[4500,8400]
[BEGIN]
def mul_list(nums1,nums2):

  result = map(lambda x, y: x * y, nums1, nums2)

  return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number can be represented by sum of two squares or not. Your code should pass these tests:

assert sum_Square(25) == True
assert sum_Square(24) == False
assert sum_Square(17) == True
[BEGIN]
def sum_Square(n) : 

    i = 1 

    while i*i <= n : 

        j = 1

        while (j*j <= n) : 

            if (i*i+j*j == n) : 

                return True

            j = j+1

        i = i+1     

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count occurences of a character in a repeated string. Your code should pass these tests:

assert count_Char("abcac",'a') == 4
assert count_Char("abca",'c') == 2
assert count_Char("aba",'a') == 7
[BEGIN]
def count_Char(str,x): 

    count = 0

    for i in range(len(str)):  

        if (str[i] == x) : 

            count += 1

    n = 10

    repititions = n // len(str)  

    count = count * repititions  

    l = n % len(str)  

    for i in range(l): 

        if (str[i] == x):  

            count += 1

    return count  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of prime numbers between 1 to n. Your code should pass these tests:

assert sum_Of_Primes(10) == 17
assert sum_Of_Primes(20) == 77
assert sum_Of_Primes(5) == 10
[BEGIN]
def sum_Of_Primes(n): 

    prime = [True] * (n + 1)  

    p = 2

    while p * p <= n: 

        if prime[p] == True:  

            i = p * 2

            while i <= n: 

                prime[i] = False

                i += p 

        p += 1    

    sum = 0

    for i in range (2,n + 1): 

        if(prime[i]): 

            sum += i 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the frequency of each element in the given list. Your code should pass these tests:

assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'
assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'
assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'
[BEGIN]
from collections import defaultdict 

def freq_element(test_tup):

  res = defaultdict(int)

  for ele in test_tup:

    res[ele] += 1

  return (str(dict(res))) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the greatest common divisor (gcd) of two integers by using recursion. Your code should pass these tests:

assert recur_gcd(12,14) == 2
assert recur_gcd(13,17) == 1
assert recur_gcd(9, 3) == 3
[BEGIN]
def recur_gcd(a, b):

	low = min(a, b)

	high = max(a, b)

	if low == 0:

		return high

	elif low == 1:

		return 1

	else:

		return recur_gcd(low, high%low)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get the length of a complex number. Your code should pass these tests:

assert len_complex(3,4)==5.0
assert len_complex(9,10)==13.45362404707371
assert len_complex(7,9)==11.40175425099138
[BEGIN]
import cmath

def len_complex(a,b):

  cn=complex(a,b)

  length=abs(cn)

  return length
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block Your code should pass these tests:

assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3
assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3
assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10
[BEGIN]
def min_jumps(arr, n):

	jumps = [0 for i in range(n)]

	if (n == 0) or (arr[0] == 0):

		return float('inf')

	jumps[0] = 0

	for i in range(1, n):

		jumps[i] = float('inf')

		for j in range(i):

			if (i <= j + arr[j]) and (jumps[j] != float('inf')):

				jumps[i] = min(jumps[i], jumps[j] + 1)

				break

	return jumps[n-1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to multiply consecutive numbers of a given list. Your code should pass these tests:

assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]
assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]
assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]
[BEGIN]
def mul_consecutive_nums(nums):

    result = [b*a for a, b in zip(nums[:-1], nums[1:])]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list. Your code should pass these tests:

assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}
assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}
assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}
[BEGIN]
from itertools import groupby 

def group_element(test_list):

  res = dict()

  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):

    res[key] = [ele[0] for ele in val] 

  return (res)


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the last two digits in factorial of a given number. Your code should pass these tests:

assert last_Two_Digits(7) == 40
assert last_Two_Digits(5) == 20
assert last_Two_Digits(2) == 2
[BEGIN]
def last_Two_Digits(N): 

    if (N >= 10): 

        return

    fac = 1

    for i in range(1,N + 1): 

        fac = (fac * i) % 100

    return (fac) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove multiple spaces in a string by using regex. Your code should pass these tests:

assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'
assert remove_multiple_spaces('Quad      Core') == 'Quad Core'
assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'
[BEGIN]
import re

def remove_multiple_spaces(text1):

  return (re.sub(' +',' ',text1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract unique values from the given dictionary values. Your code should pass these tests:

assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]
assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]
assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]
[BEGIN]
def extract_unique(test_dict):

  res = list(sorted({ele for val in test_dict.values() for ele in val}))

  return res
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple. Your code should pass these tests:

assert check_greater((10, 4, 5), (13, 5, 18)) == True
assert check_greater((1, 2, 3), (2, 1, 4)) == False
assert check_greater((4, 5, 6), (5, 6, 7)) == True
[BEGIN]
def check_greater(test_tup1, test_tup2):

  res = all(x < y for x, y in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to zip two given lists of lists. Your code should pass these tests:

assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]
assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]
assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]
[BEGIN]
def zip_list(list1,list2):  

 result = list(map(list.__add__, list1, list2)) 

 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find number of even elements in the given list using lambda function. Your code should pass these tests:

assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3
assert count_even([10,15,14,13,-18,12,-20])==5
assert count_even([1, 2, 4, 8, 9])==3
[BEGIN]
def count_even(array_nums):

   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))

   return count_even
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys. Your code should pass these tests:

assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}
assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}
assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}
[BEGIN]
def sort_dict_item(test_dict):

  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}

  return  (res) 


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum number of swaps required to convert one binary string to another. Your code should pass these tests:

assert min_Swaps("1101","1110") == 1
assert min_Swaps("1111","0100") == "Not Possible"
assert min_Swaps("1110000","0001101") == 3
[BEGIN]
def min_Swaps(str1,str2) : 

    count = 0

    for i in range(len(str1)) : 

        if str1[i] != str2[i] : 

            count += 1

    if count % 2 == 0 : 

        return (count // 2) 

    else : 

        return ("Not Possible") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the number of elements in a list which are within a specific range. Your code should pass these tests:

assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6
assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5
assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3
[BEGIN]
def count_range_in_list(li, min, max):

	ctr = 0

	for x in li:

		if min <= x <= max:

			ctr += 1

	return ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the equilibrium index of the given array. Your code should pass these tests:

assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3
assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3
assert equilibrium_index([1, 2, 3]) == -1
[BEGIN]
def equilibrium_index(arr):

  total_sum = sum(arr)

  left_sum=0

  for i, num in enumerate(arr):

    total_sum -= num

    if left_sum == total_sum:

      return i

    left_sum += num

  return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum number of elements that should be removed such that amax-amin<=k. Your code should pass these tests:

assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5
assert removals([1, 5, 6, 2, 8], 5, 2) == 3
assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2
[BEGIN]
def find_ind(key, i, n, 

			k, arr):

	ind = -1

	start = i + 1

	end = n - 1;

	while (start < end):

		mid = int(start +

				(end - start) / 2)

		if (arr[mid] - key <= k):

			ind = mid

			start = mid + 1

		else:

			end = mid

	return ind

def removals(arr, n, k):

	ans = n - 1

	arr.sort()

	for i in range(0, n):

		j = find_ind(arr[i], i, 

					n, k, arr)

		if (j != -1):

			ans = min(ans, n -

						(j - i + 1))

	return ans
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given key is present in the dictionary or not. Your code should pass these tests:

assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True
assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True
assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False
[BEGIN]
def is_key_present(d,x):

  if x in d:

    return True

  else:

     return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the harmonic sum of n-1. Your code should pass these tests:

assert harmonic_sum(10)==2.9289682539682538
assert harmonic_sum(4)==2.083333333333333
assert harmonic_sum(7)==2.5928571428571425 
[BEGIN]
def harmonic_sum(n):

  if n < 2:

    return 1

  else:

    return 1 / n + (harmonic_sum(n - 1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of lists by length and value. Your code should pass these tests:

assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]
assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]
assert sort_sublists([["python"],["java","C","C++"],["DBMS"],["SQL","HTML"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]
[BEGIN]
def sort_sublists(list1):

      list1.sort()  

      list1.sort(key=len)

      return  list1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find whether an array is subset of another array. Your code should pass these tests:

assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True
assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True
assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False
[BEGIN]
def is_subset(arr1, m, arr2, n): 

	hashset = set() 

	for i in range(0, m): 

		hashset.add(arr1[i]) 

	for i in range(0, n): 

		if arr2[i] in hashset: 

			continue

		else: 

			return False

	return True		
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the total set bits from 1 to n. Your code should pass these tests:

assert count_Set_Bits(16) == 33
assert count_Set_Bits(2) == 2
assert count_Set_Bits(14) == 28
[BEGIN]
def count_Set_Bits(n) :  

    n += 1; 

    powerOf2 = 2;   

    cnt = n // 2;  

    while (powerOf2 <= n) : 

        totalPairs = n // powerOf2;  

        cnt += (totalPairs // 2) * powerOf2;  

        if (totalPairs & 1) : 

            cnt += (n % powerOf2) 

        else : 

            cnt += 0

        powerOf2 <<= 1;    

    return cnt;  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to convert a string to a list. Your code should pass these tests:

assert Convert('python program') == ['python','program']
assert Convert('Data Analysis') ==['Data','Analysis']
assert Convert('Hadoop Training') == ['Hadoop','Training']
[BEGIN]
def Convert(string): 

    li = list(string.split(" ")) 

    return li 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count unique keys for each value present in the tuple. Your code should pass these tests:

assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'
assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'
assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'
[BEGIN]
from collections import defaultdict 

def get_unique(test_list):

  res = defaultdict(list)

  for sub in test_list:

    res[sub[1]].append(sub[0])

  res = dict(res)

  res_dict = dict()

  for key in res:

    res_dict[key] = len(list(set(res[key])))

  return (str(res_dict)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to access the initial and last data of the given tuple record. Your code should pass these tests:

assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)
assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)
assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)
[BEGIN]
def front_and_rear(test_tup):

  res = (test_tup[0], test_tup[-1])

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the product of digits of a number at even and odd places is equal or not. Your code should pass these tests:

assert product_Equal(2841) == True
assert product_Equal(1234) == False
assert product_Equal(1212) == False
[BEGIN]
def product_Equal(n): 

    if n < 10: 

        return False

    prodOdd = 1; prodEven = 1

    while n > 0: 

        digit = n % 10

        prodOdd *= digit 

        n = n//10

        if n == 0: 

            break; 

        digit = n % 10

        prodEven *= digit 

        n = n//10

    if prodOdd == prodEven: 

        return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove duplicates from a list of lists. Your code should pass these tests:

assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] 
assert remove_duplicate(["a", "b", "a", "c", "c"] )==["a", "b", "c"]
assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]
[BEGIN]
import itertools

def remove_duplicate(list1):

 list.sort(list1)

 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))

 return remove_duplicate
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given tuple contains all valid values or not. Your code should pass these tests:

assert check_valid((True, True, True, True) ) == True
assert check_valid((True, False, True, True) ) == False
assert check_valid((True, True, True, True) ) == True
[BEGIN]
def check_valid(test_tup):

  res = not any(map(lambda ele: not ele, test_tup))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of distinct power of prime factor of given number. Your code should pass these tests:

assert count_Fac(24) == 3
assert count_Fac(12) == 2
assert count_Fac(4) == 1
[BEGIN]
def count_Fac(n):  

    m = n 

    count = 0

    i = 2

    while((i * i) <= m): 

        total = 0

        while (n % i == 0): 

            n /= i 

            total += 1 

        temp = 0

        j = 1

        while((temp + j) <= total): 

            temp += j 

            count += 1

            j += 1 

        i += 1

    if (n != 1): 

        count += 1 

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given string of integers into a tuple. Your code should pass these tests:

assert str_to_tuple("1, -5, 4, 6, 7") == (1, -5, 4, 6, 7)
assert str_to_tuple("1, 2, 3, 4, 5") == (1, 2, 3, 4, 5)
assert str_to_tuple("4, 6, 9, 11, 13, 14") == (4, 6, 9, 11, 13, 14)
[BEGIN]
def str_to_tuple(test_str):

  res = tuple(map(int, test_str.split(', ')))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the perimeter of a rombus. Your code should pass these tests:

assert rombus_perimeter(10)==40
assert rombus_perimeter(5)==20
assert rombus_perimeter(4)==16
[BEGIN]
def rombus_perimeter(a):

  perimeter=4*a

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the standard deviation. Your code should pass these tests:

assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979
assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287
assert sd_calc([5,9,10,15,6,4])==4.070217029430577
[BEGIN]
import math

import sys

def sd_calc(data):

    n = len(data)

    if n <= 1:

        return 0.0

    mean, sd = avg_calc(data), 0.0

    for el in data:

        sd += (float(el) - mean)**2

    sd = math.sqrt(sd / float(n-1))

    return sd

def avg_calc(ls):

    n, mean = len(ls), 0.0

    if n <= 1:

        return ls[0]

    for el in ls:

        mean = mean + float(el)

    mean = mean / float(n)

    return mean
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to create a list taking alternate elements from another given list. Your code should pass these tests:

assert alternate_elements(["red", "black", "white", "green", "orange"])==['red', 'white', 'orange']
assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]
assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]
[BEGIN]
def alternate_elements(list1):

    result=[]

    for item in list1[::2]:

        result.append(item)

    return result 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an a followed by zero or more b's. Your code should pass these tests:

assert text_match("ac")==('Found a match!')
assert text_match("dc")==('Not matched!')
assert text_match("abba")==('Found a match!')
[BEGIN]
import re

def text_match(text):

        patterns = 'ab*?'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add a dictionary to the tuple. Your code should pass these tests:

assert add_dict_to_tuple((4, 5, 6), {"MSAM" : 1, "is" : 2, "best" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})
assert add_dict_to_tuple((1, 2, 3), {"UTS" : 2, "is" : 3, "Worst" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})
assert add_dict_to_tuple((8, 9, 10), {"POS" : 3, "is" : 4, "Okay" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})
[BEGIN]
def add_dict_to_tuple(test_tup, test_dict):

  test_tup = list(test_tup)

  test_tup.append(test_dict)

  test_tup = tuple(test_tup)

  return (test_tup) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n. Your code should pass these tests:

assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2
assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2
assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 
[BEGIN]
M = 100

def maxAverageOfPath(cost, N): 

	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 

	dp[0][0] = cost[0][0] 

	for i in range(1, N): 

		dp[i][0] = dp[i - 1][0] + cost[i][0] 

	for j in range(1, N): 

		dp[0][j] = dp[0][j - 1] + cost[0][j] 

	for i in range(1, N): 

		for j in range(1, N): 

			dp[i][j] = max(dp[i - 1][j], 

						dp[i][j - 1]) + cost[i][j] 

	return dp[N - 1][N - 1] / (2 * N - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to filter the height and width of students which are stored in a dictionary. Your code should pass these tests:

assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}
assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}
assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}
[BEGIN]
def filter_data(students,h,w):

    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}

    return result    
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the same pair in two given lists using map function. Your code should pass these tests:

assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4
assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11
assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1
[BEGIN]
from operator import eq

def count_same_pair(nums1, nums2):

    result = sum(map(eq, nums1, nums2))

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of all digits of the base to the specified power. Your code should pass these tests:

assert power_base_sum(2,100)==115
assert power_base_sum(8,10)==37
assert power_base_sum(8,15)==62
[BEGIN]
def power_base_sum(base, power):

    return sum([int(i) for i in str(pow(base, power))])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract values between quotation marks of the given string by using regex. Your code should pass these tests:

assert extract_quotation('Cortex "A53" Based "multi" tasking "Processor"') == ['A53', 'multi', 'Processor']
assert extract_quotation('Cast your "favorite" entertainment "apps"') == ['favorite', 'apps']
assert extract_quotation('Watch content "4k Ultra HD" resolution with "HDR 10" Support') == ['4k Ultra HD', 'HDR 10']
[BEGIN]
import re

def extract_quotation(text1):

  return (re.findall(r'"(.*?)"', text1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to multiply the adjacent elements of the given tuple. Your code should pass these tests:

assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
[BEGIN]
def multiply_elements(test_tup):

  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all characters except letters and numbers using regex Your code should pass these tests:

assert remove_char("123abcjw:, .@! eiw") == '123abcjweiw'
assert remove_char("Hello1234:, ! Howare33u") == 'Hello1234Howare33u'
assert remove_char("Cool543Triks@:, Make@987Trips") == 'Cool543TriksMake987Trips' 
[BEGIN]
import re 

def remove_char(S):

  result = re.sub('[\W_]+', '', S) 

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sum elements in two lists. Your code should pass these tests:

assert sum_list([10,20,30],[15,25,35])==[25,45,65]
assert sum_list([1,2,3],[5,6,7])==[6,8,10]
assert sum_list([15,20,30],[15,45,75])==[30,65,105]
[BEGIN]
def sum_list(lst1,lst2):

  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 

  return res_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add two lists using map and lambda function. Your code should pass these tests:

assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]
assert add_list([1,2],[3,4])==[4,6]
assert add_list([10,20],[50,70])==[60,90]
[BEGIN]
def add_list(nums1,nums2):

  result = map(lambda x, y: x + y, nums1, nums2)

  return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove consecutive duplicates of a given list. Your code should pass these tests:

assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]
assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]
assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']
[BEGIN]
from itertools import groupby

def consecutive_duplicates(nums):

    return [key for key, group in groupby(nums)] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the lateral surface area of a cone. Your code should pass these tests:

assert lateralsurface_cone(5,12)==204.20352248333654
assert lateralsurface_cone(10,15)==566.3586699569488
assert lateralsurface_cone(19,17)==1521.8090132193388
[BEGIN]
import math

def lateralsurface_cone(r,h):

  l = math.sqrt(r * r + h * h)

  LSA = math.pi * r  * l

  return LSA
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to replace all occurrences of spaces, commas, or dots with a colon. Your code should pass these tests:

assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')
assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')
assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')
[BEGIN]
import re

def replace_specialchar(text):

 return (re.sub("[ ,.]", ":", text))

[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the index of the first occurrence of a given number in a sorted array. Your code should pass these tests:

assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1
assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2
assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4
[BEGIN]
def find_first_occurrence(A, x):

    (left, right) = (0, len(A) - 1)

    result = -1

    while left <= right:

        mid = (left + right) // 2

        if x == A[mid]:

            result = mid

            right = mid - 1

        elif x < A[mid]:

            right = mid - 1

        else:

            left = mid + 1

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of products of all possible subarrays. Your code should pass these tests:

assert sum_Of_Subarray_Prod([1,2,3],3) == 20
assert sum_Of_Subarray_Prod([1,2],2) == 5
assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84
[BEGIN]
def sum_Of_Subarray_Prod(arr,n):

    ans = 0

    res = 0

    i = n - 1

    while (i >= 0):

        incr = arr[i]*(1 + res)

        ans += incr

        res = incr

        i -= 1

    return (ans)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to toggle bits of the number except the first and the last bit. Your code should pass these tests:

assert toggle_middle_bits(9) == 15
assert toggle_middle_bits(10) == 12
assert toggle_middle_bits(11) == 13
[BEGIN]
def set_middle_bits(n):  

    n |= n >> 1; 

    n |= n >> 2; 

    n |= n >> 4; 

    n |= n >> 8; 

    n |= n >> 16;  

    return (n >> 1) ^ 1

def toggle_middle_bits(n): 

    if (n == 1): 

        return 1

    return n ^ set_middle_bits(n) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to locate the left insertion point for a specified value in sorted order. Your code should pass these tests:

assert left_insertion([1,2,4,5],6)==4
assert left_insertion([1,2,4,5],3)==2
assert left_insertion([1,2,4,5],7)==4
[BEGIN]
import bisect

def left_insertion(a, x):

    i = bisect.bisect_left(a, x)

    return i
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given string is starting with a vowel or not using regex. Your code should pass these tests:

assert check_str("annie") == 'Valid'
assert check_str("dawood") == 'Invalid'
assert check_str("Else") == 'Valid'
[BEGIN]
import re 

regex = '^[aeiouAEIOU][A-Za-z0-9_]*'

def check_str(string): 

	if(re.search(regex, string)): 

		return ("Valid") 

	else: 

		return ("Invalid") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the geometric sum of n-1. Your code should pass these tests:

assert geometric_sum(7) == 1.9921875
assert geometric_sum(4) == 1.9375
assert geometric_sum(8) == 1.99609375
[BEGIN]
def geometric_sum(n):

  if n < 0:

    return 0

  else:

    return 1 / (pow(2, n)) + geometric_sum(n - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the index of smallest triangular number with n digits. Your code should pass these tests:

assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
[BEGIN]
import math 

def find_Index(n): 

    x = math.sqrt(2 * math.pow(10,(n - 1))); 

    return round(x); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given tuple to a key-value dictionary using adjacent elements. Your code should pass these tests:

assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}
assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}
assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}
[BEGIN]
def tuple_to_dict(test_tup):

  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether all the characters are same or not. Your code should pass these tests:

assert all_Characters_Same("python") == False
assert all_Characters_Same("aaa") == True
assert all_Characters_Same("data") == False
[BEGIN]
def all_Characters_Same(s) :

    n = len(s)

    for i in range(1,n) :

        if s[i] != s[0] :

            return False

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to caluclate the area of a tetrahedron. Your code should pass these tests:

assert area_tetrahedron(3)==15.588457268119894
assert area_tetrahedron(20)==692.8203230275509
assert area_tetrahedron(10)==173.20508075688772
[BEGIN]
import math

def area_tetrahedron(side):

  area = math.sqrt(3)*(side*side)

  return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to rotate a given list by specified number of items to the right direction. Your code should pass these tests:

assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]
assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]
assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]
[BEGIN]
def rotate_right(list1,m,n):

  result =  list1[-(m):]+list1[:-(n)]

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given tuple has any none value or not. Your code should pass these tests:

assert check_none((10, 4, 5, 6, None)) == True
assert check_none((7, 8, 9, 11, 14)) == False
assert check_none((1, 2, 3, 4, None)) == True
[BEGIN]
def check_none(test_tup):

  res = any(map(lambda ele: ele is None, test_tup))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find numbers within a given range where every number is divisible by every digit it contains. Your code should pass these tests:

assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]
assert divisible_by_digits(20,25)==[22, 24]
[BEGIN]
def divisible_by_digits(startnum, endnum):

    return [n for n in range(startnum, endnum+1) \

                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find area of a sector. Your code should pass these tests:

assert sector_area(4,45)==6.285714285714286
assert sector_area(9,45)==31.82142857142857
assert sector_area(9,360)==None
[BEGIN]
def sector_area(r,a):

    pi=22/7

    if a >= 360:

        return None

    sectorarea = (pi*r**2) * (a/360)

    return sectorarea
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the longest common subsequence for the given three string sequence. Your code should pass these tests:

assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2
assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 
assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3
[BEGIN]
def lcs_of_three(X, Y, Z, m, n, o): 

	L = [[[0 for i in range(o+1)] for j in range(n+1)] 

		for k in range(m+1)] 

	for i in range(m+1): 

		for j in range(n+1): 

			for k in range(o+1): 

				if (i == 0 or j == 0 or k == 0): 

					L[i][j][k] = 0

				elif (X[i-1] == Y[j-1] and

					X[i-1] == Z[k-1]): 

					L[i][j][k] = L[i-1][j-1][k-1] + 1

				else: 

					L[i][j][k] = max(max(L[i-1][j][k], 

					L[i][j-1][k]), 

									L[i][j][k-1]) 

	return L[m][n][o]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to put spaces between words starting with capital letters in a given string by using regex. Your code should pass these tests:

assert capital_words_spaces("Python") == 'Python'
assert capital_words_spaces("PythonProgrammingExamples") == 'Python Programming Examples'
assert capital_words_spaces("GetReadyToBeCodingFreak") == 'Get Ready To Be Coding Freak'
[BEGIN]
import re

def capital_words_spaces(str1):

  return re.sub(r"(\w)([A-Z])", r"\1 \2", str1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a given list of strings of numbers numerically. Your code should pass these tests:

assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]
assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]
assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]
[BEGIN]
def sort_numeric_strings(nums_str):

    result = [int(x) for x in nums_str]

    result.sort()

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add the given tuple to the given list. Your code should pass these tests:

assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]
assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]
assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]
[BEGIN]
def add_tuple(test_list, test_tup):

  test_list += test_tup

  return (test_list) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given array represents min heap or not. Your code should pass these tests:

assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True
assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True
assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False
[BEGIN]
def check_min_heap(arr, i):

    if 2 * i + 2 > len(arr):

        return True

    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)

    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 

                                      and check_min_heap(arr, 2 * i + 2))

    return left_child and right_child
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth jacobsthal number. Your code should pass these tests:

assert jacobsthal_num(5) == 11
assert jacobsthal_num(2) == 1
assert jacobsthal_num(4) == 5
[BEGIN]
def jacobsthal_num(n): 

	dp = [0] * (n + 1) 

	dp[0] = 0

	dp[1] = 1

	for i in range(2, n+1): 

		dp[i] = dp[i - 1] + 2 * dp[i - 2] 

	return dp[n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find minimum k records from tuple list. Your code should pass these tests:

assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]
assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]
assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]
[BEGIN]
def min_k(test_list, K):

  res = sorted(test_list, key = lambda x: x[1])[:K]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find common index elements from three lists. Your code should pass these tests:

assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]
assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]
assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]
[BEGIN]
def extract_index_list(l1, l2, l3):

    result = []

    for m, n, o in zip(l1, l2, l3):

        if (m == n == o):

            result.append(m)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the second smallest number in a list. Your code should pass these tests:

assert second_smallest([1, 2, -8, -2, 0, -2])==-2
assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5
assert second_smallest([2,2])==None
[BEGIN]
def second_smallest(numbers):

  if (len(numbers)<2):

    return

  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):

    return

  dup_items = set()

  uniq_items = []

  for x in numbers:

    if x not in dup_items:

      uniq_items.append(x)

      dup_items.add(x)

  uniq_items.sort()    

  return  uniq_items[1] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an a followed by zero or one 'b'. Your code should pass these tests:

assert text_match_zero_one("ac")==('Found a match!')
assert text_match_zero_one("dc")==('Not matched!')
assert text_match_zero_one("abbbba")==('Found a match!')
[BEGIN]
import re

def text_match_zero_one(text):

        patterns = 'ab?'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the pairs of reverse strings in the given string list. Your code should pass these tests:

assert count_reverse_pairs(["julia", "best", "tseb", "for", "ailuj"])== '2'
assert count_reverse_pairs(["geeks", "best", "for", "skeeg"]) == '1'
assert count_reverse_pairs(["makes", "best", "sekam", "for", "rof"]) == '2' 
[BEGIN]
def count_reverse_pairs(test_list):

  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 

	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 

  return str(res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count number of unique lists within a list. Your code should pass these tests:

assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}
assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}
[BEGIN]
def unique_sublists(list1):

    result ={}

    for l in  list1: 

        result.setdefault(tuple(l), list()).append(1) 

    for a, b in result.items(): 

        result[a] = sum(b)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check a decimal with a precision of 2. Your code should pass these tests:

assert is_decimal('123.11')==True
assert is_decimal('e666.86')==False
assert is_decimal('3.124587')==False
[BEGIN]
def is_decimal(num):

    import re

    dnumre = re.compile(r"""^[0-9]+(\.[0-9]{1,2})?$""")

    result = dnumre.search(num)

    return bool(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether an array contains only one distinct element or not. Your code should pass these tests:

assert unique_Element([1,1,1],3) == 'YES'
assert unique_Element([1,2,1,2],4) == 'NO'
assert unique_Element([1,2,3,4,5],5) == 'NO'
[BEGIN]
def unique_Element(arr,n):

    s = set(arr)

    if (len(s) == 1):

        return ('YES')

    else:

        return ('NO')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to caluclate arc length of an angle. Your code should pass these tests:

assert arc_length(9,45)==3.5357142857142856
assert arc_length(9,480)==None
assert arc_length(5,270)==11.785714285714285
[BEGIN]
def arc_length(d,a):

    pi=22/7

    if a >= 360:

        return None

    arclength = (pi*d) * (a/360)

    return arclength
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given month number contains 30 days or not. Your code should pass these tests:

assert check_monthnumber_number(6)==True
assert check_monthnumber_number(2)==False
assert check_monthnumber_number(12)==False
[BEGIN]
def check_monthnumber_number(monthnum3):

  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimum difference between any two elements in a given array. Your code should pass these tests:

assert find_Min_Diff((1,5,3,19,18,25),6) == 1
assert find_Min_Diff((4,3,2,6),4) == 1
assert find_Min_Diff((30,5,20,9),4) == 4
[BEGIN]
def find_Min_Diff(arr,n): 

    arr = sorted(arr) 

    diff = 10**20 

    for i in range(n-1): 

        if arr[i+1] - arr[i] < diff: 

            diff = arr[i+1] - arr[i]  

    return diff 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count numeric values in a given string. Your code should pass these tests:

assert number_ctr('program2bedone') == 1
assert number_ctr('3wonders') ==1
assert number_ctr('123') == 3
[BEGIN]
def number_ctr(str):

      number_ctr= 0

      for i in range(len(str)):

          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     

      return  number_ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find nth polite number. Your code should pass these tests:

assert is_polite(7) == 11
assert is_polite(4) == 7
assert is_polite(9) == 13
[BEGIN]
import math 

def is_polite(n): 

	n = n + 1

	return (int)(n+(math.log((n + math.log(n, 2)), 2))) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to iterate over all pairs of consecutive items in a given list. Your code should pass these tests:

assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]
assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]
assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]
[BEGIN]
def pair_wise(l1):

    temp = []

    for i in range(len(l1) - 1):

        current_element, next_element = l1[i], l1[i + 1]

        x = (current_element, next_element)

        temp.append(x)

    return temp
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of pairs whose sum is equal to ‘sum’. Your code should pass these tests:

assert get_Pairs_Count([1,1,1,1],4,2) == 6
assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3
assert get_Pairs_Count([1,-2,3],3,1) == 1
[BEGIN]
def get_Pairs_Count(arr,n,sum):

    count = 0  

    for i in range(0,n):

        for j in range(i + 1,n):

            if arr[i] + arr[j] == sum:

                count += 1

    return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check for odd parity of a given number. Your code should pass these tests:

assert check_Odd_Parity(13) == True
assert check_Odd_Parity(21) == True
assert check_Odd_Parity(18) == False
[BEGIN]
def check_Odd_Parity(x): 

    parity = 0

    while (x != 0): 

        x = x & (x - 1) 

        parity += 1

    if (parity % 2 == 1): 

        return True

    else: 

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to get the difference between two lists. Your code should pass these tests:

assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]
assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]
assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]
[BEGIN]
def Diff(li1,li2):

    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))

 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of fourth power of first n odd natural numbers. Your code should pass these tests:

assert odd_Num_Sum(2) == 82
assert odd_Num_Sum(3) == 707
assert odd_Num_Sum(4) == 3108
[BEGIN]
def odd_Num_Sum(n) : 

    j = 0

    sm = 0

    for i in range(1,n + 1) : 

        j = (2*i-1) 

        sm = sm + (j*j*j*j)   

    return sm 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given expression is balanced or not. Your code should pass these tests:

assert check_expression("{()}[{}]") == True
assert check_expression("{()}[{]") == False
assert check_expression("{()}[{}][]({})") == True
[BEGIN]
from collections import deque

def check_expression(exp):

    if len(exp) & 1:

        return False

    stack = deque()

    for ch in exp:

        if ch == '(' or ch == '{' or ch == '[':

            stack.append(ch)

        if ch == ')' or ch == '}' or ch == ']':

            if not stack:

                return False

            top = stack.pop()

            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):

                return False

    return not stack
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all the words with k length in the given string. Your code should pass these tests:

assert remove_length('The person is most value tet', 3) == 'person is most value'
assert remove_length('If you told me about this ok', 4) == 'If you me about ok'
assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'
[BEGIN]
def remove_length(test_str, K):

  temp = test_str.split()

  res = [ele for ele in temp if len(ele) != K]

  res = ' '.join(res)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the occurrence and position of the substrings within a string. Your code should pass these tests:

assert occurance_substring('python programming, python language','python')==('python', 0, 6)
assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)
assert occurance_substring('python programming,programming language','language')==('language', 31, 39)
[BEGIN]
import re

def occurance_substring(text,pattern):

 for match in re.finditer(pattern, text):

    s = match.start()

    e = match.end()

    return (text[s:e], s, e)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the string is a valid email address or not using regex. Your code should pass these tests:

assert check_email("ankitrai326@gmail.com") == 'Valid Email'
assert check_email("my.ownsite@ourearth.org") == 'Valid Email'
assert check_email("ankitaoie326.com") == 'Invalid Email'
[BEGIN]
import re 

regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'

def check_email(email): 

	if(re.search(regex,email)): 

		return ("Valid Email") 

	else: 

		return ("Invalid Email") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether every odd index contains odd numbers of a given list. Your code should pass these tests:

assert odd_position([2,1,4,3,6,7,6,3]) == True
assert odd_position([4,1,2]) == True
assert odd_position([1,2,3]) == False
[BEGIN]
def odd_position(nums):

	return all(nums[i]%2==i%2 for i in range(len(nums)))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count those characters which have vowels as their neighbors in the given string. Your code should pass these tests:

assert count_vowels('bestinstareels') == 7
assert count_vowels('partofthejourneyistheend') == 12
assert count_vowels('amazonprime') == 5
[BEGIN]
def count_vowels(test_str):

  res = 0

  vow_list = ['a', 'e', 'i', 'o', 'u']

  for idx in range(1, len(test_str) - 1):

    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):

      res += 1

  if test_str[0] not in vow_list and test_str[1] in vow_list:

    res += 1

  if test_str[-1] not in vow_list and test_str[-2] in vow_list:

    res += 1

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of non-repeated elements in a given array. Your code should pass these tests:

assert find_Sum([1,2,3,1,1,4,5,6],8) == 21
assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71
assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78
[BEGIN]
def find_Sum(arr,n): 

    arr.sort() 

    sum = arr[0] 

    for i in range(0,n-1): 

        if (arr[i] != arr[i+1]): 

            sum = sum + arr[i+1]   

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to pack consecutive duplicates of a given list elements into sublists. Your code should pass these tests:

assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]
assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]
assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]
[BEGIN]
from itertools import groupby

def pack_consecutive_duplicates(list1):

    return [list(group) for key, group in groupby(list1)]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the number of unique lists within a list. Your code should pass these tests:

assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}
assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}
[BEGIN]
def unique_sublists(list1):

    result ={}

    for l in list1: 

        result.setdefault(tuple(l), list()).append(1) 

    for a, b in result.items(): 

        result[a] = sum(b)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the combinations of sums with tuples in the given tuple list. Your code should pass these tests:

assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]
assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]
assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]
[BEGIN]
from itertools import combinations 

def find_combinations(test_list):

  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the count of divisors is even or odd. Your code should pass these tests:

assert count_Divisors(10) == "Even"
assert count_Divisors(100) == "Odd"
assert count_Divisors(125) == "Even"
[BEGIN]
import math 

def count_Divisors(n) : 

    count = 0

    for i in range(1, (int)(math.sqrt(n)) + 2) : 

        if (n % i == 0) : 

            if( n // i == i) : 

                count = count + 1

            else : 

                count = count + 2

    if (count % 2 == 0) : 

        return ("Even") 

    else : 

        return ("Odd") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of all odd length subarrays. Your code should pass these tests:

assert Odd_Length_Sum([1,2,4]) == 14
assert Odd_Length_Sum([1,2,1,2]) == 15
assert Odd_Length_Sum([1,7]) == 8
[BEGIN]
def Odd_Length_Sum(arr):

    Sum = 0

    l = len(arr)

    for i in range(l):

        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])

    return Sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert rgb color to hsv color. Your code should pass these tests:

assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)
assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)
assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)
[BEGIN]
def rgb_to_hsv(r, g, b):

    r, g, b = r/255.0, g/255.0, b/255.0

    mx = max(r, g, b)

    mn = min(r, g, b)

    df = mx-mn

    if mx == mn:

        h = 0

    elif mx == r:

        h = (60 * ((g-b)/df) + 360) % 360

    elif mx == g:

        h = (60 * ((b-r)/df) + 120) % 360

    elif mx == b:

        h = (60 * ((r-g)/df) + 240) % 360

    if mx == 0:

        s = 0

    else:

        s = (df/mx)*100

    v = mx*100

    return h, s, v
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the product of first even and odd number of a given list. Your code should pass these tests:

assert mul_even_odd([1,3,5,7,4,1,6,8])==4
assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2
assert mul_even_odd([1,5,7,9,10])==10
[BEGIN]
def mul_even_odd(list1):

    first_even = next((el for el in list1 if el%2==0),-1)

    first_odd = next((el for el in list1 if el%2!=0),-1)

    return (first_even*first_odd)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert tuple string to integer tuple. Your code should pass these tests:

assert tuple_str_int("(7, 8, 9)") == (7, 8, 9)
assert tuple_str_int("(1, 2, 3)") == (1, 2, 3)
assert tuple_str_int("(4, 5, 6)") == (4, 5, 6)
[BEGIN]
def tuple_str_int(test_str):

  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to locate the right insertion point for a specified value in sorted order. Your code should pass these tests:

assert right_insertion([1,2,4,5],6)==4
assert right_insertion([1,2,4,5],3)==2
assert right_insertion([1,2,4,5],7)==4
[BEGIN]
import bisect

def right_insertion(a, x):

    i = bisect.bisect_right(a, x)

    return i
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an a followed by three 'b'. Your code should pass these tests:

assert text_match_three("ac")==('Not matched!')
assert text_match_three("dc")==('Not matched!')
assert text_match_three("abbbba")==('Found a match!')
[BEGIN]
import re

def text_match_three(text):

        patterns = 'ab{3}?'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to create a new tuple from the given string and list. Your code should pass these tests:

assert new_tuple(["WEB", "is"], "best") == ('WEB', 'is', 'best')
assert new_tuple(["We", "are"], "Developers") == ('We', 'are', 'Developers')
assert new_tuple(["Part", "is"], "Wrong") == ('Part', 'is', 'Wrong')
[BEGIN]
def new_tuple(test_list, test_str):

  res = tuple(test_list + [test_str])

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the perimeter of a regular polygon. Your code should pass these tests:

assert perimeter_polygon(4,20)==80
assert perimeter_polygon(10,15)==150
assert perimeter_polygon(9,7)==63
[BEGIN]
from math import tan, pi

def perimeter_polygon(s,l):

  perimeter = s*l

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether every even index contains even numbers of a given list. Your code should pass these tests:

assert even_position([3,2,1]) == False
assert even_position([1,2,3]) == False
assert even_position([2,1,4]) == True
[BEGIN]
def even_position(nums):

	return all(nums[i]%2==i%2 for i in range(len(nums)))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove the nested record from the given tuple. Your code should pass these tests:

assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)
assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)
assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)
[BEGIN]
def remove_nested(test_tup):

  res = tuple()

  for count, ele in enumerate(test_tup):

    if not isinstance(ele, tuple):

      res = res + (ele, )

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of lists in a given number of lists. Your code should pass these tests:

assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4
assert count_list([[1,2],[2,3],[4,5]]) == 3
assert count_list([[1,0],[2,0]]) == 2
[BEGIN]
def count_list(input_list): 

    return len(input_list)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the last position of an element in a sorted array. Your code should pass these tests:

assert last([1,2,3],1,3) == 0
assert last([1,1,1,2,3,4],1,6) == 2
assert last([2,3,2,3,6,8,9],3,8) == 3
[BEGIN]
def last(arr,x,n):

    low = 0

    high = n - 1

    res = -1  

    while (low <= high):

        mid = (low + high) // 2 

        if arr[mid] > x:

            high = mid - 1

        elif arr[mid] < x:

            low = mid + 1

        else:

            res = mid

            low = mid + 1

    return res
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an 'a' followed by anything, ending in 'b'. Your code should pass these tests:

assert text_starta_endb("aabbbb")==('Found a match!')
assert text_starta_endb("aabAbbbc")==('Not matched!')
assert text_starta_endb("accddbbjjj")==('Not matched!')
[BEGIN]
import re

def text_starta_endb(text):

        patterns = 'a.*?b$'

        if re.search(patterns,  text):

                return 'Found a match!'

        else:

                return('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the n - cheap price items from a given dataset using heap queue algorithm. Your code should pass these tests:

assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]
assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]
assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]
[BEGIN]
import heapq

def cheap_items(items,n):

  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])

  return cheap_items
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write function to find the sum of all items in the given dictionary. Your code should pass these tests:

assert return_sum({'a': 100, 'b':200, 'c':300}) == 600
assert return_sum({'a': 25, 'b':18, 'c':45}) == 88
assert return_sum({'a': 36, 'b':39, 'c':49}) == 124
[BEGIN]
def return_sum(dict):

  sum = 0

  for i in dict.values():

    sum = sum + i

  return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of all odd natural numbers within the range l and r. Your code should pass these tests:

assert sum_in_Range(2,5) == 8
assert sum_in_Range(5,7) == 12
assert sum_in_Range(7,13) == 40
[BEGIN]
def sum_Odd(n): 

    terms = (n + 1)//2

    sum1 = terms * terms 

    return sum1  

def sum_in_Range(l,r): 

    return sum_Odd(r) - sum_Odd(l - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of an array. Your code should pass these tests:

assert _sum([1, 2, 3]) == 6
assert _sum([15, 12, 13, 10]) == 50
assert _sum([0, 1, 2]) == 3
[BEGIN]
def _sum(arr):  

    sum=0

    for i in arr: 

        sum = sum + i      

    return(sum)  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to left rotate the bits of a given number. Your code should pass these tests:

assert left_Rotate(16,2) == 64
assert left_Rotate(10,2) == 40
assert left_Rotate(99,3) == 792
[BEGIN]
INT_BITS = 32

def left_Rotate(n,d):   

    return (n << d)|(n >> (INT_BITS - d))  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all whitespaces from a string. Your code should pass these tests:

assert remove_all_spaces('python  program')==('pythonprogram')
assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')
assert remove_all_spaces('python                     program')==('pythonprogram')
[BEGIN]
import re

def remove_all_spaces(text):

 return (re.sub(r'\s+', '',text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of equal numbers from three given integers. Your code should pass these tests:

assert test_three_equal(1,1,1) == 3
assert test_three_equal(-1,-2,-3) == 0
assert test_three_equal(1,2,2) == 2
[BEGIN]
def test_three_equal(x,y,z):

  result= set([x,y,z])

  if len(result)==3:

    return 0

  else:

    return (4-len(result))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of rotations required to generate a sorted array. Your code should pass these tests:

assert count_Rotation([3,2,1],3) == 1
assert count_Rotation([4,5,1,2,3],5) == 2
assert count_Rotation([7,8,9,1,2,3],6) == 3
[BEGIN]
def count_Rotation(arr,n):   

    for i in range (1,n): 

        if (arr[i] < arr[i - 1]): 

            return i  

    return 0
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number is a perfect square or not. Your code should pass these tests:

assert is_Perfect_Square(10) == False
assert is_Perfect_Square(36) == True
assert is_Perfect_Square(14) == False
[BEGIN]
def is_Perfect_Square(n) :

    i = 1

    while (i * i<= n):

        if ((n % i == 0) and (n / i == i)):

            return True     

        i = i + 1

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the product of numbers is even or not. Your code should pass these tests:

assert is_Product_Even([1,2,3],3) == True
assert is_Product_Even([1,2,1,4],4) == True
assert is_Product_Even([1,1],2) == False
[BEGIN]
def is_Product_Even(arr,n): 

    for i in range(0,n): 

        if ((arr[i] & 1) == 0): 

            return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the list in a list of lists whose sum of elements is the highest. Your code should pass these tests:

assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] 
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] 
assert max_sum_list([[2,3,1]])==[2,3,1] 
[BEGIN]
def max_sum_list(lists):

 return max(lists, key=sum)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find maximum run of uppercase characters in the given string. Your code should pass these tests:

assert max_run_uppercase('GeMKSForGERksISBESt') == 5
assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6
assert max_run_uppercase('GooGLEFluTTER') == 4
[BEGIN]
def max_run_uppercase(test_str):

  cnt = 0

  res = 0

  for idx in range(0, len(test_str)):

    if test_str[idx].isupper():

      cnt += 1

    else:

      res = cnt

      cnt = 0

  if test_str[len(test_str) - 1].isupper():

    res = cnt

  return (res)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the first odd number in a given list of numbers. Your code should pass these tests:

assert first_odd([1,3,5]) == 1
assert first_odd([2,4,1,3]) == 1
assert first_odd ([8,9,1]) == 9
[BEGIN]
def first_odd(nums):

  first_odd = next((el for el in nums if el%2!=0),-1)

  return first_odd
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given tuples contain the k or not. Your code should pass these tests:

assert check_K((10, 4, 5, 6, 8), 6) == True
assert check_K((1, 2, 3, 4, 5, 6), 7) == False
assert check_K((7, 8, 9, 44, 11, 12), 11) == True
[BEGIN]
def check_K(test_tup, K):

  res = False

  for ele in test_tup:

    if ele == K:

      res = True

      break

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple. Your code should pass these tests:

assert check_smaller((1, 2, 3), (2, 3, 4)) == False
assert check_smaller((4, 5, 6), (3, 4, 5)) == True
assert check_smaller((11, 12, 13), (10, 11, 12)) == True
[BEGIN]
def check_smaller(test_tup1, test_tup2):

  res = all(x > y for x, y in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to iterate over elements repeating each as many times as its count. Your code should pass these tests:

assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] 
assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] 
assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']
[BEGIN]
from collections import Counter

def count_variable(a,b,c,d):

  c = Counter(p=a, q=b, r=c, s=d)

  return list(c.elements())
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if two lists of tuples are identical or not. Your code should pass these tests:

assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True
assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False
assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True
[BEGIN]
def check_identical(test_list1, test_list2):

  res = test_list1 == test_list2

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to abbreviate 'road' as 'rd.' in a given string. Your code should pass these tests:

assert road_rd("ravipadu Road")==('ravipadu Rd.')
assert road_rd("palnadu Road")==('palnadu Rd.')
assert road_rd("eshwar enclave Road")==('eshwar enclave Rd.')
[BEGIN]
import re

def road_rd(street):

  return (re.sub('Road$', 'Rd.', street))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find length of the string. Your code should pass these tests:

assert string_length('python')==6
assert string_length('program')==7
assert string_length('language')==8
[BEGIN]
def string_length(str1):

    count = 0

    for char in str1:

        count += 1

    return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the area of a rombus. Your code should pass these tests:

assert rombus_area(10,20)==100
assert rombus_area(10,5)==25
assert rombus_area(4,2)==4
[BEGIN]
def rombus_area(p,q):

  area=(p*q)/2

  return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2. Your code should pass these tests:

assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]
assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]
assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]
[BEGIN]
def sort_by_dnf(arr, n):

  low=0

  mid=0

  high=n-1

  while mid <= high:

    if arr[mid] == 0:

      arr[low], arr[mid] = arr[mid], arr[low]

      low = low + 1

      mid = mid + 1

    elif arr[mid] == 1:

      mid = mid + 1

    else:

      arr[mid], arr[high] = arr[high], arr[mid]

      high = high - 1

  return arr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to clear the values of the given tuples. Your code should pass these tests:

assert clear_tuple((1, 5, 3, 6, 8)) == ()
assert clear_tuple((2, 1, 4 ,5 ,6)) == ()
assert clear_tuple((3, 2, 5, 6, 8)) == ()
[BEGIN]
def clear_tuple(test_tup):

  temp = list(test_tup)

  temp.clear()

  test_tup = tuple(temp)

  return (test_tup) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find numbers divisible by m or n from a list of numbers using lambda function. Your code should pass these tests:

assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]
assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]
assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]
[BEGIN]
def div_of_nums(nums,m,n):

 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 

 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count lower case letters in a given string. Your code should pass these tests:

assert lower_ctr('abc') == 3
assert lower_ctr('string') == 6
assert lower_ctr('Python') == 5
[BEGIN]
def lower_ctr(str):

      lower_ctr= 0

      for i in range(len(str)):

          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     

      return  lower_ctr
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the frequency of consecutive duplicate elements in a given list of numbers. Your code should pass these tests:

assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])
assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])
assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
[BEGIN]
def count_duplic(lists):

    element = []

    frequency = []

    if not lists:

        return element

    running_count = 1

    for i in range(len(lists)-1):

        if lists[i] == lists[i+1]:

            running_count += 1

        else:

            frequency.append(running_count)

            element.append(lists[i])

            running_count = 1

    frequency.append(running_count)

    element.append(lists[i+1])

    return element,frequency


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given month number contains 28 days or not. Your code should pass these tests:

assert check_monthnum_number(2)==True
assert check_monthnum_number(1)==False
assert check_monthnum_number(3)==False
[BEGIN]
def check_monthnum_number(monthnum1):

  if monthnum1 == 2:

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to merge two dictionaries into a single expression. Your code should pass these tests:

assert merge_dictionaries({ "R": "Red", "B": "Black", "P": "Pink" }, { "G": "Green", "W": "White" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}
assert merge_dictionaries({ "R": "Red", "B": "Black", "P": "Pink" },{ "O": "Orange", "W": "White", "B": "Black" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}
assert merge_dictionaries({ "G": "Green", "W": "White" },{ "O": "Orange", "W": "White", "B": "Black" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}
[BEGIN]
import collections as ct

def merge_dictionaries(dict1,dict2):

    merged_dict = dict(ct.ChainMap({}, dict1, dict2))

    return merged_dict
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to return true if the password is valid. Your code should pass these tests:

assert pass_validity("password")==False
assert pass_validity("Password@10")==True
assert pass_validity("password@10")==False
[BEGIN]
import re

def pass_validity(p):

 x = True

 while x:  

    if (len(p)<6 or len(p)>12):

        break

    elif not re.search("[a-z]",p):

        break

    elif not re.search("[0-9]",p):

        break

    elif not re.search("[A-Z]",p):

        break

    elif not re.search("[$#@]",p):

        break

    elif re.search("\s",p):

        break

    else:

        return True

        x=False

        break



 if x:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given string starts with a substring using regex. Your code should pass these tests:

assert check_substring("dreams for dreams makes life fun", "makes") == 'string doesnt start with the given substring'
assert check_substring("Hi there how are you Hi alex", "Hi") == 'string starts with the given substring'
assert check_substring("Its been a long day", "been") == 'string doesnt start with the given substring'
[BEGIN]
import re 

def check_substring(string, sample) : 

  if (sample in string): 

      y = "\A" + sample 

      x = re.search(y, string) 

      if x : 

          return ("string starts with the given substring") 

      else : 

          return ("string doesnt start with the given substring") 

  else : 

      return ("entered string isnt a substring")
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove even numbers from a given list. Your code should pass these tests:

assert remove_even([1,3,5,2]) == [1,3,5]
assert remove_even([5,6,7]) == [5,7]
assert remove_even([1,2,3,4]) == [1,3]
[BEGIN]
def remove_even(l):

    for i in l:

        if i % 2 == 0:

            l.remove(i)

    return l
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to access multiple elements of specified index from a given list. Your code should pass these tests:

assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]
assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]
assert access_elements([1,0,2,3],[0,1]) == [1,0]
[BEGIN]
def access_elements(nums, list_index):

    result = [nums[i] for i in list_index]

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the type of triangle from the given sides. Your code should pass these tests:

assert check_Type_Of_Triangle(1,2,3) == "Obtuse-angled Triangle"
assert check_Type_Of_Triangle(2,2,2) == "Acute-angled Triangle"
assert check_Type_Of_Triangle(1,0,1) == "Right-angled Triangle"
[BEGIN]
def check_Type_Of_Triangle(a,b,c): 

    sqa = pow(a,2) 

    sqb = pow(b,2) 

    sqc = pow(c,2) 

    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 

        return ("Right-angled Triangle") 

    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 

        return ("Obtuse-angled Triangle") 

    else: 

        return ("Acute-angled Triangle") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sum a specific column of a list in a given list of lists. Your code should pass these tests:

assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12
assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15
assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9
[BEGIN]
def sum_column(list1, C):

    result = sum(row[C] for row in list1)

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count alphabets,digits and special charactes in a given string. Your code should pass these tests:

assert count_alpha_dig_spl("abc!@#123")==(3,3,3)
assert count_alpha_dig_spl("dgsuy@#$%&1255")==(5,4,5)
assert count_alpha_dig_spl("fjdsif627348#%$^&")==(6,6,5)
[BEGIN]
def count_alpha_dig_spl(string):

  alphabets=digits = special = 0

  for i in range(len(string)):

    if(string[i].isalpha()):

        alphabets = alphabets + 1

    elif(string[i].isdigit()):

        digits = digits + 1

    else:

        special = special + 1

  return (alphabets,digits,special)   
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find out the second most repeated (or frequent) string in the given sequence. Your code should pass these tests:

assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'
assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'
assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'
[BEGIN]
from collections import Counter 

	

def second_frequent(input): 

	dict = Counter(input) 

	value = sorted(dict.values(), reverse=True)  

	second_large = value[1] 

	for (key, val) in dict.items(): 

		if val == second_large: 

			return (key) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to round up a number to specific digits. Your code should pass these tests:

assert round_up(123.01247,0)==124
assert round_up(123.01247,1)==123.1
assert round_up(123.01247,2)==123.02
[BEGIN]
import math

def round_up(a, digits):

    n = 10**-digits

    return round(math.ceil(a / n) * n, digits)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count equal element pairs from the given array. Your code should pass these tests:

assert count_Pairs([1,1,1,1],4) == 6
assert count_Pairs([1,5,1],3) == 1
assert count_Pairs([3,2,1,7,8,9],6) == 0
[BEGIN]
def count_Pairs(arr,n): 

    cnt = 0; 

    for i in range(n): 

        for j in range(i + 1,n): 

            if (arr[i] == arr[j]): 

                cnt += 1; 

    return cnt; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract the maximum numeric value from a string by using regex. Your code should pass these tests:

assert extract_max('100klh564abc365bg') == 564
assert extract_max('hello300how546mer231') == 546
assert extract_max('its233beenalong343journey234') == 343
[BEGIN]
import re 

def extract_max(input): 

	numbers = re.findall('\d+',input) 

	numbers = map(int,numbers) 

	return max(numbers)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get dictionary keys as a list. Your code should pass these tests:

assert get_key({1:'python',2:'java'})==[1,2]
assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]
assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]
[BEGIN]
def get_key(dict): 

    list = [] 

    for key in dict.keys(): 

        list.append(key)           

    return list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order. Your code should pass these tests:

assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] 
assert generate_matrix(2)==[[1,2],[4,3]]
assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]
[BEGIN]
def generate_matrix(n):

        if n<=0:

            return [] 

        matrix=[row[:] for row in [[0]*n]*n]        

        row_st=0

        row_ed=n-1        

        col_st=0

        col_ed=n-1

        current=1        

        while (True):

            if current>n*n:

                break

            for c in range (col_st, col_ed+1):

                matrix[row_st][c]=current

                current+=1

            row_st+=1

            for r in range (row_st, row_ed+1):

                matrix[r][col_ed]=current

                current+=1

            col_ed-=1

            for c in range (col_ed, col_st-1, -1):

                matrix[row_ed][c]=current

                current+=1

            row_ed-=1

            for r in range (row_ed, row_st-1, -1):

                matrix[r][col_st]=current

                current+=1

            col_st+=1

        return matrix
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the slope of a line. Your code should pass these tests:

assert slope(4,2,2,5) == -1.5
assert slope(2,4,4,6) == 1
assert slope(1,2,4,2) == 0
[BEGIN]
def slope(x1,y1,x2,y2): 

    return (float)(y2-y1)/(x2-x1)  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find length of the subarray having maximum sum. Your code should pass these tests:

assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5
assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2
assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3
[BEGIN]
from sys import maxsize 

def max_sub_array_sum(a,size): 

	max_so_far = -maxsize - 1

	max_ending_here = 0

	start = 0

	end = 0

	s = 0

	for i in range(0,size): 

		max_ending_here += a[i] 

		if max_so_far < max_ending_here: 

			max_so_far = max_ending_here 

			start = s 

			end = i 

		if max_ending_here < 0: 

			max_ending_here = 0

			s = i+1

	return (end - start + 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the cube sum of first n odd natural numbers. Your code should pass these tests:

assert cube_Sum(2) == 28
assert cube_Sum(3) == 153
assert cube_Sum(4) == 496
[BEGIN]
def cube_Sum(n): 

    sum = 0   

    for i in range(0,n) : 

        sum += (2*i+1)*(2*i+1)*(2*i+1) 

    return sum
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find minimum number swaps required to make two binary strings equal. Your code should pass these tests:

assert min_Swaps("0011","1111") == 1
assert min_Swaps("00011","01001") == 2
assert min_Swaps("111","111") == 0
[BEGIN]
def min_Swaps(s1,s2) :  

    c0 = 0; c1 = 0;  

    for i in range(len(s1)) :  

        if (s1[i] == '0' and s2[i] == '1') : 

            c0 += 1;    

        elif (s1[i] == '1' and s2[i] == '0') : 

            c1 += 1;  

    result = c0 // 2 + c1 // 2;  

    if (c0 % 2 == 0 and c1 % 2 == 0) : 

        return result;  

    elif ((c0 + c1) % 2 == 0) : 

        return result + 2;  

    else : 

        return -1;  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the tuples alphabetically by the first item of each tuple. Your code should pass these tests:

assert sort_tuple([("Amana", 28), ("Zenat", 30), ("Abhishek", 29),("Nikhil", 21), ("B", "C")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]
assert sort_tuple([("aaaa", 28), ("aa", 30), ("bab", 29), ("bb", 21), ("csa", "C")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]
assert sort_tuple([("Sarala", 28), ("Ayesha", 30), ("Suman", 29),("Sai", 21), ("G", "H")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]
[BEGIN]
def sort_tuple(tup): 

	n = len(tup) 

	for i in range(n): 

		for j in range(n-i-1): 

			if tup[j][0] > tup[j + 1][0]: 

				tup[j], tup[j + 1] = tup[j + 1], tup[j] 

	return tup
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not. Your code should pass these tests:

assert Check_Solution(2,0,-1) == "Yes"
assert Check_Solution(1,-5,6) == "No"
assert Check_Solution(2,0,2) == "Yes"
[BEGIN]
def Check_Solution(a,b,c):  

    if b == 0:  

        return ("Yes")  

    else: 

        return ("No")  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the number of inversions in the given array. Your code should pass these tests:

assert get_inv_count([1, 20, 6, 4, 5], 5) == 5
assert get_inv_count([8, 4, 2, 1], 4) == 6
assert get_inv_count([3, 1, 2], 3) == 2
[BEGIN]
def get_inv_count(arr, n): 

	inv_count = 0

	for i in range(n): 

		for j in range(i + 1, n): 

			if (arr[i] > arr[j]): 

				inv_count += 1

	return inv_count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the number which occurs for odd number of times in the given array. Your code should pass these tests:

assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5
assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3
assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5
[BEGIN]
def get_odd_occurence(arr, arr_size):

  for i in range(0, arr_size):

    count = 0

    for j in range(0, arr_size):

      if arr[i] == arr[j]:

        count += 1

    if (count % 2 != 0):

      return arr[i]

  return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm. Your code should pass these tests:

assert nth_super_ugly_number(12,[2,7,13,19])==32
assert nth_super_ugly_number(10,[2,7,13,19])==26
assert nth_super_ugly_number(100,[2,7,13,19])==5408
[BEGIN]
import heapq

def nth_super_ugly_number(n, primes):

    uglies = [1]

    def gen(prime):

        for ugly in uglies:

            yield ugly * prime

    merged = heapq.merge(*map(gen, primes))

    while len(uglies) < n:

        ugly = next(merged)

        if ugly != uglies[-1]:

            uglies.append(ugly)

    return uglies[-1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the kth element in an array containing odd elements first and then even elements. Your code should pass these tests:

assert get_Number(8,5) == 2
assert get_Number(7,2) == 3
assert get_Number(5,2) == 3
[BEGIN]
def get_Number(n, k): 

    arr = [0] * n; 

    i = 0; 

    odd = 1; 

    while (odd <= n):   

        arr[i] = odd; 

        i += 1; 

        odd += 2;

    even = 2; 

    while (even <= n): 

        arr[i] = even; 

        i += 1;

        even += 2; 

    return arr[k - 1]; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the number of digits in factorial of a given number. Your code should pass these tests:

assert find_Digits(7) == 4
assert find_Digits(5) == 3
assert find_Digits(4) == 2
[BEGIN]
import math 

def find_Digits(n): 

    if (n < 0): 

        return 0;

    if (n <= 1): 

        return 1; 

    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 

    return math.floor(x) + 1; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum number of platforms required for a railway/bus station. Your code should pass these tests:

assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3
assert find_platform([100,200,300,400],[700,800,900,1000],4)==4
assert find_platform([5,6,7,8],[4,3,2,1],4)==1
[BEGIN]
def find_platform(arr, dep, n): 

    arr.sort() 

    dep.sort() 

    plat_needed = 1

    result = 1

    i = 1

    j = 0

    while (i < n and j < n): 

        if (arr[i] <= dep[j]):           

            plat_needed+= 1

            i+= 1

        elif (arr[i] > dep[j]):           

            plat_needed-= 1

            j+= 1

        if (plat_needed > result):  

            result = plat_needed           

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to copy a list from a singleton tuple. Your code should pass these tests:

assert lcopy([1, 2, 3]) == [1, 2, 3]
assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]
assert lcopy([4, 5, 6]) == [4, 5, 6]

[BEGIN]
def lcopy(xs):
  return xs[:]

[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the area of a trapezium. Your code should pass these tests:

assert area_trapezium(6,9,4)==30
assert area_trapezium(10,20,30)==450
assert area_trapezium(15,25,35)==700
[BEGIN]
def area_trapezium(base1,base2,height):

 area = 0.5 * (base1 + base2) * height

 return area
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of all prime divisors of a given number. Your code should pass these tests:

assert Sum(60) == 10
assert Sum(39) == 16
assert Sum(40) == 7
[BEGIN]
def Sum(N): 

    SumOfPrimeDivisors = [0]*(N + 1)   

    for i in range(2,N + 1) : 

        if (SumOfPrimeDivisors[i] == 0) : 

            for j in range(i,N + 1,i) : 

                SumOfPrimeDivisors[j] += i           

    return SumOfPrimeDivisors[N] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a triangle of positive area is possible with the given angles. Your code should pass these tests:

assert is_triangleexists(50,60,70)==True
assert is_triangleexists(90,45,45)==True
assert is_triangleexists(150,30,70)==False
[BEGIN]
def is_triangleexists(a,b,c): 

    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 

        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 

            return True 

        else:

            return False

    else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of inverse of divisors. Your code should pass these tests:

assert Sum_of_Inverse_Divisors(6,12) == 2
assert Sum_of_Inverse_Divisors(9,13) == 1.44
assert Sum_of_Inverse_Divisors(1,4) == 4
[BEGIN]
def Sum_of_Inverse_Divisors(N,Sum): 

    ans = float(Sum)*1.0 /float(N);  

    return round(ans,2); 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to remove negative numbers from a list. Your code should pass these tests:

assert remove_negs([1,-2,3,-4]) == [1,3]
assert remove_negs([1,2,3,-4]) == [1,2,3]
assert remove_negs([4,5,-6,7,-8]) == [4,5,7]
[BEGIN]
def remove_negs(num_list): 

    for item in num_list: 

        if item < 0: 

           num_list.remove(item) 

    return num_list
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find sum of odd factors of a number. Your code should pass these tests:

assert sum_of_odd_Factors(30) == 24
assert sum_of_odd_Factors(18) == 13
assert sum_of_odd_Factors(2) == 1
[BEGIN]
import math

def sum_of_odd_Factors(n): 

    res = 1

    while n % 2 == 0: 

        n = n // 2 

    for i in range(3,int(math.sqrt(n) + 1)): 

        count = 0

        curr_sum = 1

        curr_term = 1

        while n % i == 0: 

            count+=1 

            n = n // i 

            curr_term *= i 

            curr_sum += curr_term    

        res *= curr_sum  

    if n >= 2: 

        res *= (1 + n) 

    return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm. Your code should pass these tests:

assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]
assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]
assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]
[BEGIN]
import heapq as hq

def raw_heap(rawheap):

  hq.heapify(rawheap)

  return rawheap
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check for even parity of a given number. Your code should pass these tests:

assert check_Even_Parity(10) == True
assert check_Even_Parity(11) == False
assert check_Even_Parity(18) == True
[BEGIN]
def check_Even_Parity(x): 

    parity = 0

    while (x != 0): 

        x = x & (x - 1) 

        parity += 1

    if (parity % 2 == 0): 

        return True

    else: 

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find minimum adjacent swaps required to sort binary array. Your code should pass these tests:

assert find_Min_Swaps([1,0,1,0],4) == 3
assert find_Min_Swaps([0,1,0],3) == 1
assert find_Min_Swaps([0,0,1,1,0],5) == 2
[BEGIN]
def find_Min_Swaps(arr,n) : 

    noOfZeroes = [0] * n 

    count = 0 

    noOfZeroes[n - 1] = 1 - arr[n - 1] 

    for i in range(n-2,-1,-1) : 

        noOfZeroes[i] = noOfZeroes[i + 1] 

        if (arr[i] == 0) : 

            noOfZeroes[i] = noOfZeroes[i] + 1

    for i in range(0,n) : 

        if (arr[i] == 1) : 

            count = count + noOfZeroes[i] 

    return count 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to list out the list of given strings individually using map function. Your code should pass these tests:

assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]
assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]
assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]
[BEGIN]
def listify_list(list1):

  result = list(map(list,list1)) 

  return result 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count number of lists in a given list of lists and square the count. Your code should pass these tests:

assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25
assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16
assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9
[BEGIN]
def count_list(input_list): 

    return (len(input_list))**2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to generate all sublists of a given list. Your code should pass these tests:

assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]
assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]
assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]
[BEGIN]
from itertools import combinations

def sub_lists(my_list):

	subs = []

	for i in range(0, len(my_list)+1):

	  temp = [list(x) for x in combinations(my_list, i)]

	  if len(temp)>0:

	    subs.extend(temp)

	return subs
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given string is ending with only alphanumeric characters or not using regex. Your code should pass these tests:

assert check_alphanumeric("dawood@") == 'Discard'
assert check_alphanumeric("skdmsam326") == 'Accept'
assert check_alphanumeric("cooltricks@") == 'Discard'
[BEGIN]
import re 

regex = '[a-zA-z0-9]$'

def check_alphanumeric(string): 

	if(re.search(regex, string)): 

		return ("Accept") 

	else: 

		return ("Discard") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find all anagrams of a string in a given list of strings using lambda function. Your code should pass these tests:

assert anagram_lambda(["bcda", "abce", "cbda", "cbea", "adcb"],"abcd")==['bcda', 'cbda', 'adcb']
assert anagram_lambda(["recitals"," python"], "articles" )==["recitals"]
assert anagram_lambda([" keep"," abcdef"," xyz"]," peek")==[" keep"]
[BEGIN]
from collections import Counter 

def anagram_lambda(texts,str):

  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the occurrences of n most common words in a given text. Your code should pass these tests:

assert n_common_words("python is a programming language",1)==[('python', 1)]
assert n_common_words("python is a programming language",1)==[('python', 1)]
assert n_common_words("python is a programming language",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]
[BEGIN]
from collections import Counter

import re

def n_common_words(text,n):

  words = re.findall('\w+',text)

  n_common_words= Counter(words).most_common(n)

  return list(n_common_words)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers. Your code should pass these tests:

assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3
assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4
assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5
[BEGIN]
def find_longest_conseq_subseq(arr, n): 

	ans = 0

	count = 0

	arr.sort() 

	v = [] 

	v.append(arr[0]) 

	for i in range(1, n): 

		if (arr[i] != arr[i - 1]): 

			v.append(arr[i]) 

	for i in range(len(v)): 

		if (i > 0 and v[i] == v[i - 1] + 1): 

			count += 1

		else: 

			count = 1

		ans = max(ans, count) 

	return ans 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find palindromes in a given list of strings using lambda function. Your code should pass these tests:

assert palindrome_lambda(["php", "res", "Python", "abcd", "Java", "aaa"])==['php', 'aaa']
assert palindrome_lambda(["abcd", "Python", "abba", "aba"])==['abba', 'aba']
assert palindrome_lambda(["abcd", "abbccbba", "abba", "aba"])==['abbccbba', 'abba', 'aba']
[BEGIN]
def palindrome_lambda(texts):

  result = list(filter(lambda x: (x == "".join(reversed(x))), texts))

  return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print n-times a list using map function. Your code should pass these tests:

assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]
assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]
assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]
[BEGIN]
def ntimes_list(nums,n):

    result = map(lambda x:n*x, nums) 

    return list(result)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check whether the given month name contains 31 days or not. Your code should pass these tests:

assert check_monthnumb("February")==False
assert check_monthnumb("January")==True
assert check_monthnumb("March")==True
[BEGIN]
def check_monthnumb(monthname2):

  if(monthname2=="January" or monthname2=="March"or monthname2=="May" or monthname2=="July" or monthname2=="Augest" or monthname2=="October" or monthname2=="December"):

    return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to add a minimum number such that the sum of array becomes even. Your code should pass these tests:

assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1
assert min_Num([1,2,3,4,5,6,7,8],8) == 2
assert min_Num([1,2,3],3) == 2
[BEGIN]
def min_Num(arr,n):  

    odd = 0

    for i in range(n): 

        if (arr[i] % 2): 

            odd += 1 

    if (odd % 2): 

        return 1

    return 2
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the length of the last word in a given string. Your code should pass these tests:

assert length_Of_Last_Word("python language") == 8
assert length_Of_Last_Word("PHP") == 3
assert length_Of_Last_Word("") == 0
[BEGIN]
def length_Of_Last_Word(a): 

    l = 0

    x = a.strip() 

    for i in range(len(x)): 

        if x[i] == " ": 

            l = 0

        else: 

            l += 1

    return l 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove sublists from a given list of lists, which are outside a given range. Your code should pass these tests:

assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]
assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]
assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]
[BEGIN]
def remove_list_range(list1, leftrange, rigthrange):

   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]

   return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function. Your code should pass these tests:

assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48
assert sum_positivenum([10,15,-14,13,-18,12,-20])==50
assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522
[BEGIN]
def sum_positivenum(nums):

  sum_positivenum = list(filter(lambda nums:nums>0,nums))

  return sum(sum_positivenum)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given strings are rotations of each other or not. Your code should pass these tests:

assert are_Rotations("abc","cba") == False
assert are_Rotations("abcd","cdba") == False
assert are_Rotations("abacd","cdaba") == True
[BEGIN]
def are_Rotations(string1,string2): 

    size1 = len(string1) 

    size2 = len(string2) 

    temp = '' 

    if size1 != size2: 

        return False

    temp = string1 + string1 

    if (temp.count(string2)> 0): 

        return True

    else: 

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if a nested list is a subset of another nested list. Your code should pass these tests:

assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True
assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True
assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False
[BEGIN]
def check_subset(list1,list2): 

    return all(map(list1.__contains__,list2)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to solve the fibonacci sequence using recursion. Your code should pass these tests:

assert fibonacci(7) == 13
assert fibonacci(8) == 21
assert fibonacci(9) == 34
[BEGIN]
def fibonacci(n):

  if n == 1 or n == 2:

    return 1

  else:

    return (fibonacci(n - 1) + (fibonacci(n - 2)))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check if the string is a concatenation of another string. Your code should pass these tests:

assert check_Concat("abcabcabc","abc") == True
assert check_Concat("abcab","abc") == False
assert check_Concat("aba","ab") == False
[BEGIN]
def check_Concat(str1,str2):

    N = len(str1)

    M = len(str2)

    if (N % M != 0):

        return False

    for i in range(N):

        if (str1[i] != str2[i % M]):

            return False         

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum difference in the tuple pairs of given tuples. Your code should pass these tests:

assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1
assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2
assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6
[BEGIN]
def min_difference(test_list):

  temp = [abs(b - a) for a, b in test_list]

  res = min(temp)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find lcm of two positive integers. Your code should pass these tests:

assert lcm(4,6) == 12
assert lcm(15,17) == 255
assert lcm(2,6) == 6
[BEGIN]
def lcm(x, y):

   if x > y:

       z = x

   else:

       z = y

   while(True):

       if((z % x == 0) and (z % y == 0)):

           lcm = z

           break

       z += 1

   return lcm
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to sort the given string. Your code should pass these tests:

assert sort_String("cba") == "abc"
assert sort_String("data") == "aadt"
assert sort_String("zxy") == "xyz"
[BEGIN]
def sort_String(str) : 

    str = ''.join(sorted(str)) 

    return (str) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if the given tuple contains only k elements. Your code should pass these tests:

assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True
assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True
assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False
[BEGIN]
def check_tuples(test_tuple, K):

  res = all(ele in K for ele in test_tuple)

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex. Your code should pass these tests:

assert text_match("aabbbbd") == 'Not matched!'
assert text_match("aabAbbbc") == 'Not matched!'
assert text_match("accddbbjjjb") == 'Found a match!'
[BEGIN]
import re

def text_match(text):

  patterns = 'a.*?b$'

  if re.search(patterns,  text):

    return ('Found a match!')

  else:

    return ('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find number of solutions in quadratic equation. Your code should pass these tests:

assert Check_Solution(2,5,2) == "2 solutions"
assert Check_Solution(1,1,1) == "No solutions"
assert Check_Solution(1,2,1) == "1 solution"
[BEGIN]
def Check_Solution(a,b,c) : 

    if ((b*b) - (4*a*c)) > 0 : 

        return ("2 solutions") 

    elif ((b*b) - (4*a*c)) == 0 : 

        return ("1 solution") 

    else : 

        return ("No solutions") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the sum of first even and odd number of a given list. Your code should pass these tests:

assert sum_even_odd([1,3,5,7,4,1,6,8])==5
assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3
assert sum_even_odd([1,5,7,9,10])==11
[BEGIN]
def sum_even_odd(list1):

    first_even = next((el for el in list1 if el%2==0),-1)

    first_odd = next((el for el in list1 if el%2!=0),-1)

    return (first_even+first_odd)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to caluclate perimeter of a parallelogram. Your code should pass these tests:

assert parallelogram_perimeter(10,20)==400
assert parallelogram_perimeter(15,20)==600
assert parallelogram_perimeter(8,9)==144
[BEGIN]
def parallelogram_perimeter(b,h):

  perimeter=2*(b*h)

  return perimeter
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find numbers divisible by m and n from a list of numbers using lambda function. Your code should pass these tests:

assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]
assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]
assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]
[BEGIN]
def div_of_nums(nums,m,n):

 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 

 return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether all the bits are within a given range or not. Your code should pass these tests:

assert all_Bits_Set_In_The_Given_Range(10,2,1) == True 
assert all_Bits_Set_In_The_Given_Range(5,2,4) == False
assert all_Bits_Set_In_The_Given_Range(22,2,3) == True 
[BEGIN]
def all_Bits_Set_In_The_Given_Range(n,l,r): 

    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 

    new_num = n & num 

    if (num == new_num): 

        return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the two given strings are isomorphic to each other or not. Your code should pass these tests:

assert is_Isomorphic("paper","title") == True
assert is_Isomorphic("ab","ba") == True
assert is_Isomorphic("ab","aa") == False
[BEGIN]
def is_Isomorphic(str1,str2):          

    dict_str1 = {}

    dict_str2 = {}

    for i, value in enumerate(str1):

        dict_str1[value] = dict_str1.get(value,[]) + [i]        

    for j, value in enumerate(str2):

        dict_str2[value] = dict_str2.get(value,[]) + [j]

    if sorted(dict_str1.values()) == sorted(dict_str2.values()):

        return True

    else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to add all the numbers in a list and divide it with the length of the list. Your code should pass these tests:

assert sum_num((8, 2, 3, 0, 7))==4.0
assert sum_num((-10,-20,-30))==-20.0
assert sum_num((19,15,18))==17.333333333333332
[BEGIN]
def sum_num(numbers):

    total = 0

    for x in numbers:

        total += x

    return total/len(numbers) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given number is odd or not using bitwise operator. Your code should pass these tests:

assert is_odd(5) == True
assert is_odd(6) == False
assert is_odd(7) == True
[BEGIN]
def is_odd(n) : 

    if (n^1 == n-1) :

        return True; 

    else :

        return False; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to substract the elements of the given nested tuples. Your code should pass these tests:

assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))
assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))
assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))
[BEGIN]
def substract_elements(test_tup1, test_tup2):

  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))

   for tup1, tup2 in zip(test_tup1, test_tup2))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to reverse each list in a given list of lists. Your code should pass these tests:

assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]
assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]
assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]
[BEGIN]
def reverse_list_lists(lists):

    for l in lists:

        l.sort(reverse = True)

    return lists 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the index of an extra element present in one sorted array. Your code should pass these tests:

assert find_Extra([1,2,3,4],[1,2,3],3) == 3
assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4
assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5
[BEGIN]
def find_Extra(arr1,arr2,n) : 

    for i in range(0, n) : 

        if (arr1[i] != arr2[i]) : 

            return i 

    return n 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given two numbers have same number of digits or not. Your code should pass these tests:

assert same_Length(12,1) == False
assert same_Length(2,2) == True
assert same_Length(10,20) == True
[BEGIN]
def same_Length(A,B): 

    while (A > 0 and B > 0): 

        A = A / 10; 

        B = B / 10; 

    if (A == 0 and B == 0): 

        return True; 

    return False; 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove multiple spaces in a string. Your code should pass these tests:

assert remove_spaces('python  program')==('python program')
assert remove_spaces('python   programming    language')==('python programming language')
assert remove_spaces('python                     program')==('python program')
[BEGIN]
import re

def remove_spaces(text):

 return (re.sub(' +',' ',text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to get the last element of each sublist. Your code should pass these tests:

assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]
assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']
assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]
[BEGIN]
def Extract(lst): 

    return [item[-1] for item in lst] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given string of float type into tuple. Your code should pass these tests:

assert float_to_tuple("1.2, 1.3, 2.3, 2.4, 6.5") == (1.2, 1.3, 2.3, 2.4, 6.5)
assert float_to_tuple("2.3, 2.4, 5.6, 5.4, 8.9") == (2.3, 2.4, 5.6, 5.4, 8.9)
assert float_to_tuple("0.3, 0.5, 7.8, 9.4") == (0.3, 0.5, 7.8, 9.4)
[BEGIN]
def float_to_tuple(test_str):

  res = tuple(map(float, test_str.split(', ')))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum sum of subsequences of given array with no adjacent elements. Your code should pass these tests:

assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26
assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28
assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44
[BEGIN]
def max_sum_subseq(A):

    n = len(A)

    if n == 1:

        return A[0]

    look_up = [None] * n

    look_up[0] = A[0]

    look_up[1] = max(A[0], A[1])

    for i in range(2, n):

        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])

        look_up[i] = max(look_up[i], A[i])

    return look_up[n - 1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples. Your code should pass these tests:

assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] 
assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] 
assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] 
[BEGIN]
def last(n):

   return n[-1]

def sort_list_last(tuples):

  return sorted(tuples, key=last)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the word is present in a given sentence or not. Your code should pass these tests:

assert is_Word_Present("machine learning","machine") == True
assert is_Word_Present("easy","fun") == False
assert is_Word_Present("python language","code") == False
[BEGIN]
def is_Word_Present(sentence,word): 

    s = sentence.split(" ") 

    for i in s:  

        if (i == word): 

            return True

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract specified number of elements from a given list, which follow each other continuously. Your code should pass these tests:

assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]
assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]
assert extract_elements([0,0,0,0,0],5)==[0]
[BEGIN]
from itertools import groupby 

def extract_elements(numbers, n):

    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 

    return result
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether an array can be sorted or not by picking only the corner elements. Your code should pass these tests:

assert check([3,2,1,2,3,4],6) == True
assert check([2,1,4,5,1],5) == True
assert check([1,2,2,1,2,3],6) == True
[BEGIN]
def check(arr,n): 

    g = 0 

    for i in range(1,n): 

        if (arr[i] - arr[i - 1] > 0 and g == 1): 

            return False

        if (arr[i] - arr[i] < 0): 

            g = 1

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function where a string will start with a specific number. Your code should pass these tests:

assert match_num('5-2345861')==True
assert match_num('6-2345861')==False
assert match_num('78910')==False
[BEGIN]
import re

def match_num(string):

    text = re.compile(r"^5")

    if text.match(string):

        return True

    else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the smallest multiple of the first n numbers. Your code should pass these tests:

assert smallest_multiple(13)==360360
assert smallest_multiple(2)==2
assert smallest_multiple(1)==1
[BEGIN]
def smallest_multiple(n):

    if (n<=2):

      return n

    i = n * 2

    factors = [number  for number in range(n, 1, -1) if number * 2 > n]

    while True:

        for a in factors:

            if i % a != 0:

                i += n

                break

            if (a == factors[-1] and i % a == 0):

                return i
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to combine two dictionaries by adding values for common keys. Your code should pass these tests:

assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) 
assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) 
assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})
[BEGIN]
from collections import Counter

def add_dict(d1,d2):

   add_dict = Counter(d1) + Counter(d2)

   return add_dict
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to count the total unset bits from 1 to n. Your code should pass these tests:

assert count_Unset_Bits(2) == 1
assert count_Unset_Bits(5) == 4
assert count_Unset_Bits(14) == 17
[BEGIN]
def count_Unset_Bits(n) :  

    cnt = 0;  

    for i in range(1,n + 1) : 

        temp = i;  

        while (temp) :  

            if (temp % 2 == 0) : 

                cnt += 1;  

            temp = temp // 2;  

    return cnt;  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to return true if the given number is even else return false. Your code should pass these tests:

assert even_num(13.5)==False
assert even_num(0)==True
assert even_num(-9)==False
[BEGIN]
def even_num(x):

  if x%2==0:

     return True

  else:

    return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of squares of binomial co-efficients. Your code should pass these tests:

assert sum_of_square(4) == 70
assert sum_of_square(5) == 252
assert sum_of_square(2) == 6
[BEGIN]
def factorial(start,end): 

    res = 1 

    for i in range(start,end + 1): 

        res *= i      

    return res 

def sum_of_square(n): 

   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to extract year, month and date from a url by using regex. Your code should pass these tests:

assert extract_date("https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/") == [('2016', '09', '02')]
assert extract_date("https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/") == [('2020', '11', '03')]
assert extract_date("https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms") == [('2020', '12', '29')]
[BEGIN]
import re

def extract_date(url):

        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to print the first n lucky numbers. Your code should pass these tests:

assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] 
assert lucky_num(5)==[1, 3, 7, 9, 13]
assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]
[BEGIN]
def lucky_num(n):

 List=range(-1,n*n+9,2)

 i=2

 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1

 return List[1:n+1]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the fixed point in the given array. Your code should pass these tests:

assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3
assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1
assert find_fixed_point([0, 2, 5, 8, 17],5) == 0
[BEGIN]
def find_fixed_point(arr, n): 

	for i in range(n): 

		if arr[i] is i: 

			return i 

	return -1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the previous palindrome of a specified number. Your code should pass these tests:

assert previous_palindrome(99)==88
assert previous_palindrome(1221)==1111
assert previous_palindrome(120)==111
[BEGIN]
def previous_palindrome(num):

    for x in range(num-1,0,-1):

        if str(x) == str(x)[::-1]:

            return x
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to validate a gregorian date. Your code should pass these tests:

assert check_date(11,11,2002)==True
assert check_date(13,11,2002)==False
assert check_date('11','11','2002')==True
[BEGIN]
import datetime

def check_date(m, d, y):

    try:

        m, d, y = map(int, (m, d, y))

        datetime.date(y, m, d)

        return True

    except ValueError:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm. Your code should pass these tests:

assert maximum_product( [12, 74, 9, 50, 61, 41])==225700
assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375
assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520
[BEGIN]
def maximum_product(nums):

    import heapq

    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)

    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find ln, m lobb number. Your code should pass these tests:

assert int(lobb_num(5, 3)) == 35
assert int(lobb_num(3, 2)) == 5
assert int(lobb_num(4, 2)) == 20
[BEGIN]
def binomial_coeff(n, k): 

	C = [[0 for j in range(k + 1)] 

			for i in range(n + 1)] 

	for i in range(0, n + 1): 

		for j in range(0, min(i, k) + 1): 

			if (j == 0 or j == i): 

				C[i][j] = 1

			else: 

				C[i][j] = (C[i - 1][j - 1] 

							+ C[i - 1][j]) 

	return C[n][k] 

def lobb_num(n, m): 

	return (((2 * m + 1) *

		binomial_coeff(2 * n, m + n)) 

					/ (m + n + 1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check for a number at the end of a string. Your code should pass these tests:

assert end_num('abcdef')==False
assert end_num('abcdef7')==True
assert end_num('abc')==False
[BEGIN]
import re

def end_num(string):

    text = re.compile(r".*[0-9]$")

    if text.match(string):

        return True

    else:

        return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the given string is made up of two alternating characters or not. Your code should pass these tests:

assert is_Two_Alter("abab") == True
assert is_Two_Alter("aaaa") == False
assert is_Two_Alter("xyz") == False
[BEGIN]
def is_Two_Alter(s):  

    for i in range (len( s) - 2) : 

        if (s[i] != s[i + 2]) : 

            return False

    if (s[0] == s[1]): 

        return False

    return True
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to rearrange positive and negative numbers in a given array using lambda function. Your code should pass these tests:

assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]
assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]
assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]
[BEGIN]
def rearrange_numbs(array_nums):

  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)

  return result 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find if there is a triplet in the array whose sum is equal to a given value. Your code should pass these tests:

assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)
assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)
assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)
[BEGIN]
def find_triplet_array(A, arr_size, sum): 

	for i in range( 0, arr_size-2): 

		for j in range(i + 1, arr_size-1): 

			for k in range(j + 1, arr_size): 

				if A[i] + A[j] + A[k] == sum: 

					return  A[i],A[j],A[k] 

					return True

	return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the sequences of one upper case letter followed by lower case letters. Your code should pass these tests:

assert text_uppercase_lowercase("AaBbGg")==('Found a match!')
assert text_uppercase_lowercase("aA")==('Not matched!')
assert text_uppercase_lowercase("PYTHON")==('Not matched!')
[BEGIN]
import re

def text_uppercase_lowercase(text):

        patterns = '[A-Z]+[a-z]+$'

        if re.search(patterns, text):

                return 'Found a match!'

        else:

                return ('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count coin change. Your code should pass these tests:

assert coin_change([1, 2, 3],3,4)==4
assert coin_change([4,5,6,7,8,9],6,9)==2
assert coin_change([4,5,6,7,8,9],6,4)==1
[BEGIN]
def coin_change(S, m, n): 

    table = [[0 for x in range(m)] for x in range(n+1)] 

    for i in range(m): 

        table[0][i] = 1

    for i in range(1, n+1): 

        for j in range(m): 

            x = table[i - S[j]][j] if i-S[j] >= 0 else 0

            y = table[i][j-1] if j >= 1 else 0 

            table[i][j] = x + y   

    return table[n][m-1] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to multiply all items in the list. Your code should pass these tests:

assert multiply_list([1,-2,3]) == -6
assert multiply_list([1,2,3,4]) == 24
assert multiply_list([3,1,2,3]) == 18
[BEGIN]
def multiply_list(items):

    tot = 1

    for x in items:

        tot *= x

    return tot
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove all tuples with all none values in the given tuple list. Your code should pass these tests:

assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'
assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'
assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'
[BEGIN]
def remove_tuple(test_list):

  res = [sub for sub in test_list if not all(ele == None for ele in sub)]

  return (str(res)) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to perform chunking of tuples each of size n. Your code should pass these tests:

assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]
assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]
assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]
[BEGIN]
def chunk_tuples(test_tup, N):

  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find a pair with the highest product from a given array of integers. Your code should pass these tests:

assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)
assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)
assert max_product([1, 3, 5, 6, 8, 9])==(8,9)
[BEGIN]
def max_product(arr): 

    arr_len = len(arr) 

    if (arr_len < 2): 

        return None     

    x = arr[0]; y = arr[1]    

    for i in range(0, arr_len): 

        for j in range(i + 1, arr_len): 

            if (arr[i] * arr[j] > x * y): 

                x = arr[i]; y = arr[j] 

    return x,y   
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the length of the shortest string that has both str1 and str2 as subsequences. Your code should pass these tests:

assert super_seq("AGGTAB", "GXTXAYB", 6, 7) == 9
assert super_seq("feek", "eke", 4, 3) == 5
assert super_seq("PARRT", "RTA", 5, 3) == 6
[BEGIN]
def super_seq(X, Y, m, n):

	if (not m):

		return n

	if (not n):

		return m

	if (X[m - 1] == Y[n - 1]):

		return 1 + super_seq(X, Y, m - 1, n - 1)

	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find maximum of two numbers. Your code should pass these tests:

assert max_of_two(10,20)==20
assert max_of_two(19,15)==19
assert max_of_two(-10,-20)==-10
[BEGIN]
def max_of_two( x, y ):

    if x > y:

        return x

    return y
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to calculate the product of all the numbers of a given tuple. Your code should pass these tests:

assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864
assert mutiple_tuple((1,2,3)) == 6
assert mutiple_tuple((-2,-4,-6)) == -48
[BEGIN]
def mutiple_tuple(nums):

    temp = list(nums)

    product = 1 

    for x in temp:

        product *= x

    return product
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find n-th rencontres number. Your code should pass these tests:

assert rencontres_number(7, 2) == 924
assert rencontres_number(3, 0) == 2
assert rencontres_number(3, 1) == 3
[BEGIN]
def binomial_coeffi(n, k): 

	if (k == 0 or k == n): 

		return 1

	return (binomial_coeffi(n - 1, k - 1) 

		+ binomial_coeffi(n - 1, k)) 

def rencontres_number(n, m): 

	if (n == 0 and m == 0): 

		return 1

	if (n == 1 and m == 0): 

		return 0

	if (m == 0): 

		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 

	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the height of the given binary tree. Your code should pass these tests:

assert (max_height(root)) == 3
assert (max_height(root1)) == 5 
assert (max_height(root2)) == 4
[BEGIN]
class Node: 

	def __init__(self, data): 

		self.data = data 

		self.left = None

		self.right = None

def max_height(node): 

	if node is None: 

		return 0 ; 

	else : 

		left_height = max_height(node.left) 

		right_height = max_height(node.right) 

		if (left_height > right_height): 

			return left_height+1

		else: 

			return right_height+1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format. Your code should pass these tests:

assert change_date_format('2026-01-02')=='02-01-2026'
assert change_date_format('2021-01-04')=='04-01-2021'
assert change_date_format('2030-06-06')=='06-06-2030'
[BEGIN]
import re

def change_date_format(dt):

        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)

        return change_date_format(dt)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count repeated items of a tuple. Your code should pass these tests:

assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3
assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2
assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4
[BEGIN]
def count_tuplex(tuplex,value):  

  count = tuplex.count(value)

  return count
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that matches a string that has an a followed by zero or more b's by using regex. Your code should pass these tests:

assert text_match("msb") == 'Not matched!'
assert text_match("a0c") == 'Found a match!'
assert text_match("abbc") == 'Found a match!'
[BEGIN]
import re

def text_match(text):

        patterns = 'ab*?'

        if re.search(patterns,  text):

                return ('Found a match!')

        else:

                return ('Not matched!')
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of series 1³+2³+3³+….+n³. Your code should pass these tests:

assert sum_series(7)==784
assert sum_series(5)==225
assert sum_series(15)==14400
[BEGIN]
import math 

def sum_series(number):

 total = 0

 total = math.pow((number * (number + 1)) /2, 2)

 return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove duplicate words from a given list of strings. Your code should pass these tests:

assert remove_duplic_list(["Python", "Exercises", "Practice", "Solution", "Exercises"])==['Python', 'Exercises', 'Practice', 'Solution']
assert remove_duplic_list(["Python", "Exercises", "Practice", "Solution", "Exercises","Java"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']
assert remove_duplic_list(["Python", "Exercises", "Practice", "Solution", "Exercises","C++","C","C++"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']
[BEGIN]
def remove_duplic_list(l):

    temp = []

    for x in l:

        if x not in temp:

            temp.append(x)

    return temp
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert camel case string to snake case string by using regex. Your code should pass these tests:

assert camel_to_snake('GoogleAssistant') == 'google_assistant'
assert camel_to_snake('ChromeCast') == 'chrome_cast'
assert camel_to_snake('QuadCore') == 'quad_core'
[BEGIN]
import re

def camel_to_snake(text):

  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)

  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the nth delannoy number. Your code should pass these tests:

assert dealnnoy_num(3, 4) == 129
assert dealnnoy_num(3, 3) == 63
assert dealnnoy_num(4, 5) == 681
[BEGIN]
def dealnnoy_num(n, m): 

	if (m == 0 or n == 0) : 

		return 1

	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the sum of series 1²+2²+3²+….+n². Your code should pass these tests:

assert series_sum(6)==91
assert series_sum(7)==140
assert series_sum(12)==650
[BEGIN]
def series_sum(number):

 total = 0

 total = (number * (number + 1) * (2 * number + 1)) / 6

 return total
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to re-arrange the given tuples based on the given ordered list. Your code should pass these tests:

assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]
assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]
assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]
[BEGIN]
def re_arrange_tuples(test_list, ord_list):

  temp = dict(test_list)

  res = [(key, temp[key]) for key in ord_list]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the most common character in a given string. Your code should pass these tests:

assert max_char("hello world")==('l')
assert max_char("hello ")==('l')
assert max_char("python pr")==('p')
[BEGIN]
from collections import Counter 

def max_char(str1):

    temp = Counter(str1) 

    max_char = max(temp, key = temp.get)

    return max_char
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find three closest elements from three sorted arrays. Your code should pass these tests:

assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)
assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)
assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)
[BEGIN]
import sys 



def find_closet(A, B, C, p, q, r): 

	diff = sys.maxsize 

	res_i = 0

	res_j = 0

	res_k = 0

	i = 0

	j = 0

	k = 0

	while(i < p and j < q and k < r): 

		minimum = min(A[i], min(B[j], C[k])) 

		maximum = max(A[i], max(B[j], C[k])); 

		if maximum-minimum < diff: 

			res_i = i 

			res_j = j 

			res_k = k 

			diff = maximum - minimum; 

		if diff == 0: 

			break

		if A[i] == minimum: 

			i = i+1

		elif B[j] == minimum: 

			j = j+1

		else: 

			k = k+1

	return A[res_i],B[res_j],C[res_k]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort a list of dictionaries using lambda function. Your code should pass these tests:

assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]
assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])
assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])
[BEGIN]
def sorted_models(models):

 sorted_models = sorted(models, key = lambda x: x['color'])

 return sorted_models
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given array by using heap sort. Your code should pass these tests:

assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]
assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]
assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]
[BEGIN]
def heap_sort(arr):

    heapify(arr)  

    end = len(arr) - 1

    while end > 0:

        arr[end], arr[0] = arr[0], arr[end]

        shift_down(arr, 0, end - 1)

        end -= 1

    return arr



def heapify(arr):

    start = len(arr) // 2

    while start >= 0:

        shift_down(arr, start, len(arr) - 1)

        start -= 1

def shift_down(arr, start, end):

    root = start

    while root * 2 + 1 <= end:

        child = root * 2 + 1

        if child + 1 <= end and arr[child] < arr[child + 1]:

            child += 1

        if child <= end and arr[root] < arr[child]:

            arr[root], arr[child] = arr[child], arr[root]

            root = child

        else:

            return


[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to count the elements in a list until an element is a tuple. Your code should pass these tests:

assert count_elim([10,20,30,(10,20),40])==3
assert count_elim([10,(20,30),(10,20),40])==1
assert count_elim([(10,(20,30,(10,20),40))])==0
[BEGIN]
def count_elim(num):

  count_elim = 0

  for n in num:

    if isinstance(n, tuple):

        break

    count_elim += 1

  return count_elim
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to check if any list element is present in the given list. Your code should pass these tests:

assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True
assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True
assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False
[BEGIN]
def check_element(test_tup, check_list):

  res = False

  for ele in check_list:

    if ele in test_tup:

      res = True

      break

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to combine two given sorted lists using heapq module. Your code should pass these tests:

assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]
assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]
[BEGIN]
from heapq import merge

def combine_lists(num1,num2):

  combine_lists=list(merge(num1, num2))

  return combine_lists
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to separate and print the numbers and their position of a given string. Your code should pass these tests:

assert num_position("there are 70 flats in this apartment")==10
assert num_position("every adult have 32 teeth")==17
assert num_position("isha has 79 chocolates in her bag")==9
[BEGIN]
import re

def num_position(text):

 for m in re.finditer("\d+", text):

    return m.start()
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert the given tuples into set. Your code should pass these tests:

assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}
assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}
assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}
[BEGIN]
def tuple_to_set(t):

  s = set(t)

  return (s) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the most common elements and their counts of a specified text. Your code should pass these tests:

assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] 
assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]
assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]
[BEGIN]
from collections import Counter 

def most_common_elem(s,a):

  most_common_elem=Counter(s).most_common(a)

  return most_common_elem
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the length of the shortest word. Your code should pass these tests:

assert len_log(["win","lose","great"]) == 3
assert len_log(["a","ab","abc"]) == 1
assert len_log(["12","12","1234"]) == 2
[BEGIN]
def len_log(list1):

    min=len(list1[0])

    for i in list1:

        if len(i)<min:

            min=len(i)

    return min
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to get an item of a tuple. Your code should pass these tests:

assert get_item(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),3)==('e')
assert get_item(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),-4)==('u')
assert get_item(("w", 3, "r", "e", "s", "o", "u", "r", "c", "e"),-3)==('r')
[BEGIN]
def get_item(tup1,index):

  item = tup1[index]

  return item
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to sort the given tuple list basis the total digits in tuple. Your code should pass these tests:

assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'
assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'
assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'
[BEGIN]
def count_digs(tup):

  return sum([len(str(ele)) for ele in tup ]) 

def sort_list(test_list):

  test_list.sort(key = count_digs)

  return (str(test_list))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to display sign of the chinese zodiac for given year. Your code should pass these tests:

assert chinese_zodiac(1997)==('Ox')
assert chinese_zodiac(1998)==('Tiger')
assert chinese_zodiac(1994)==('Dog')
[BEGIN]
def chinese_zodiac(year):

 if (year - 2000) % 12 == 0:

     sign = 'Dragon'

 elif (year - 2000) % 12 == 1:

     sign = 'Snake'

 elif (year - 2000) % 12 == 2:

     sign = 'Horse'

 elif (year - 2000) % 12 == 3:

     sign = 'sheep'

 elif (year - 2000) % 12 == 4:

     sign = 'Monkey'

 elif (year - 2000) % 12 == 5:

     sign = 'Rooster'

 elif (year - 2000) % 12 == 6:

     sign = 'Dog'

 elif (year - 2000) % 12 == 7:

     sign = 'Pig'

 elif (year - 2000) % 12 == 8:

     sign = 'Rat'

 elif (year - 2000) % 12 == 9:

     sign = 'Ox'

 elif (year - 2000) % 12 == 10:

     sign = 'Tiger'

 else:

     sign = 'Hare'

 return sign
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum of similar indices in two lists of tuples. Your code should pass these tests:

assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]
assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]
assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]
[BEGIN]
def max_similar_indices(test_list1, test_list2):

  res = [(max(x[0], y[0]), max(x[1], y[1]))

   for x, y in zip(test_list1, test_list2)]

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to compute the value of ncr mod p. Your code should pass these tests:

assert nCr_mod_p(10, 2, 13) == 6
assert nCr_mod_p(11, 3, 14) == 11
assert nCr_mod_p(18, 14, 19) == 1
[BEGIN]
def nCr_mod_p(n, r, p): 

	if (r > n- r): 

		r = n - r 

	C = [0 for i in range(r + 1)] 

	C[0] = 1 

	for i in range(1, n + 1): 

		for j in range(min(i, r), 0, -1): 

			C[j] = (C[j] + C[j-1]) % p 

	return C[r] 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the minimun number of subsets with distinct elements. Your code should pass these tests:

assert subset([1, 2, 3, 4],4) == 1
assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2
assert subset([1, 2, 3 ],3) == 1
[BEGIN]
def subset(ar, n): 

    res = 0

    ar.sort() 

    for i in range(0, n) : 

        count = 1

        for i in range(n - 1): 

            if ar[i] == ar[i + 1]: 

                count+=1

            else: 

                break 

        res = max(res, count)  

    return res 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function that gives profit amount if the given amount has profit else return none. Your code should pass these tests:

assert profit_amount(1500,1200)==300
assert profit_amount(100,200)==None
assert profit_amount(2000,5000)==None
[BEGIN]
def profit_amount(actual_cost,sale_amount): 

 if(actual_cost > sale_amount):

    amount = actual_cost - sale_amount

    return amount

 else:

    return None
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find out, if the given number is abundant. Your code should pass these tests:

assert is_abundant(12)==True
assert is_abundant(13)==False
assert is_abundant(9)==False
[BEGIN]
def is_abundant(n):

    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])

    return fctrsum > n
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to split the given string at uppercase letters by using regex. Your code should pass these tests:

assert split_list("LearnToBuildAnythingWithGoogle") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']
assert split_list("ApmlifyingTheBlack+DeveloperCommunity") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']
assert split_list("UpdateInTheGoEcoSystem") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']
[BEGIN]
import re

def split_list(text):

  return (re.findall('[A-Z][^A-Z]*', text))
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to get the position of rightmost set bit. Your code should pass these tests:

assert get_First_Set_Bit_Pos(12) == 3
assert get_First_Set_Bit_Pos(18) == 2
assert get_First_Set_Bit_Pos(16) == 5
[BEGIN]
import math

def get_First_Set_Bit_Pos(n):

     return math.log2(n&-n)+1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert an integer into a roman numeral. Your code should pass these tests:

assert int_to_roman(1)==("I")
assert int_to_roman(50)==("L")
assert int_to_roman(4)==("IV")
[BEGIN]
def int_to_roman( num):

        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]

        syb = ["M", "CM", "D", "CD","C", "XC", "L", "XL","X", "IX", "V", "IV","I"]

        roman_num = ''

        i = 0

        while  num > 0:

            for _ in range(num // val[i]):

                roman_num += syb[i]

                num -= val[i]

            i += 1

        return roman_num
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the average of a list. Your code should pass these tests:

assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75
assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75
assert Average([1,2,3]) == 2
[BEGIN]
def Average(lst): 

    return sum(lst) / len(lst) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to solve tiling problem. Your code should pass these tests:

assert get_noOfways(4)==3
assert get_noOfways(3)==2
assert get_noOfways(5)==5
[BEGIN]
def get_noOfways(n):

    if (n == 0):

        return 0;

    if (n == 1):

        return 1; 

    return get_noOfways(n - 1) + get_noOfways(n - 2);
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert a roman numeral to an integer. Your code should pass these tests:

assert roman_to_int('MMMCMLXXXVI')==3986
assert roman_to_int('MMMM')==4000
assert roman_to_int('C')==100
[BEGIN]
def roman_to_int(s):

        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}

        int_val = 0

        for i in range(len(s)):

            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:

                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]

            else:

                int_val += rom_val[s[i]]

        return int_val
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find the sum of all even natural numbers within the range l and r. Your code should pass these tests:

assert sum_Even(2,5) == 6
assert sum_Even(3,8) == 18
assert sum_Even(4,6) == 10
[BEGIN]
def sum_Natural(n): 

    sum = (n * (n + 1)) 

    return int(sum) 

def sum_Even(l,r): 

    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to calculate the discriminant value. Your code should pass these tests:

assert discriminant_value(4,8,2)==("Two solutions",32)
assert discriminant_value(5,7,9)==("no real solution",-131)
assert discriminant_value(0,0,9)==("one solution",0)
[BEGIN]
def discriminant_value(x,y,z):

    discriminant = (y**2) - (4*x*z)

    if discriminant > 0:

        return ("Two solutions",discriminant)

    elif discriminant == 0:

        return ("one solution",discriminant)

    elif discriminant < 0:

        return ("no real solution",discriminant)
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to check whether the length of the word is even or not. Your code should pass these tests:

assert word_len("program") == False
assert word_len("solution") == True
assert word_len("data") == True
[BEGIN]
def word_len(s): 

    s = s.split(' ')   

    for word in s:    

        if len(word)%2==0: 

            return True  

        else:

          return False
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to convert camel case string to snake case string. Your code should pass these tests:

assert camel_to_snake('PythonProgram')==('python_program')
assert camel_to_snake('pythonLanguage')==('python_language')
assert camel_to_snake('ProgrammingLanguage')==('programming_language')
[BEGIN]
def camel_to_snake(text):

        import re

        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)

        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to remove an empty tuple from a list of tuples. Your code should pass these tests:

assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  
assert remove_empty([(), (), ('',), ("python"), ("program")])==[('',), ("python"), ("program")]  
assert remove_empty([(), (), ('',), ("java")])==[('',),("java") ]  
[BEGIN]
def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]

   tuple1 = [t for t in tuple1 if t]

   return tuple1
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to accept the strings which contains all vowels. Your code should pass these tests:

assert check("SEEquoiaL") == 'accepted'
assert check('program') == "not accepted"
assert check('fine') == "not accepted"
[BEGIN]
def check(string): 

  if len(set(string).intersection("AEIOUaeiou"))>=5: 

    return ('accepted') 

  else: 

    return ("not accepted") 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to find maximum possible value for the given periodic function. Your code should pass these tests:

assert floor_Max(11,10,9) == 9
assert floor_Max(5,7,4) == 2
assert floor_Max(2,2,1) == 1
[BEGIN]
def floor_Max(A,B,N):

    x = min(B - 1,N)

    return (A*x) // B
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to join the tuples if they have similar initial elements. Your code should pass these tests:

assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]
assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]
assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]
[BEGIN]
def join_tuples(test_list):

  res = []

  for sub in test_list:

    if res and res[-1][0] == sub[0]:

      res[-1].extend(sub[1:])

    else:

      res.append([ele for ele in sub])

  res = list(map(tuple, res))

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find minimum of two numbers. Your code should pass these tests:

assert min_of_two(10,20)==10
assert min_of_two(19,15)==15
assert min_of_two(-10,-20)==-20
[BEGIN]
def min_of_two( x, y ):

    if x < y:

        return x

    return y
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n. Your code should pass these tests:

assert maximum_segments(7, 5, 2, 5) == 2
assert maximum_segments(17, 2, 1, 3) == 17
assert maximum_segments(18, 16, 3, 6) == 6
[BEGIN]
def maximum_segments(n, a, b, c) : 

	dp = [-1] * (n + 10) 

	dp[0] = 0

	for i in range(0, n) : 

		if (dp[i] != -1) : 

			if(i + a <= n ): 

				dp[i + a] = max(dp[i] + 1, 

							dp[i + a]) 

			if(i + b <= n ): 

				dp[i + b] = max(dp[i] + 1, 

							dp[i + b]) 

			if(i + c <= n ): 

				dp[i + c] = max(dp[i] + 1, 

							dp[i + c]) 

	return dp[n]
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to concatenate the given two tuples to a nested tuple. Your code should pass these tests:

assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)
assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)
assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)
[BEGIN]
def concatenate_nested(test_tup1, test_tup2):

  res = test_tup1 + test_tup2

  return (res) 
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a python function to left rotate the string. Your code should pass these tests:

assert left_rotate("python",2) == "thonpy"   
assert left_rotate("bigdata",3 ) == "databig" 
assert left_rotate("hadoop",1 ) == "adooph" 
[BEGIN]
def left_rotate(s,d):

    tmp = s[d : ] + s[0 : d]

    return tmp  
[DONE]<|endoftext|>You are an expert Python programmer, and here is your task: Write a function to find the minimum total path sum in the given triangle. Your code should pass these tests:

assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6
assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 
assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9
[BEGIN]
def min_sum_path(A): 

	memo = [None] * len(A) 

	n = len(A) - 1

	for i in range(len(A[n])): 

		memo[i] = A[n][i] 

	for i in range(len(A) - 2, -1,-1): 

		for j in range( len(A[i])): 

			memo[j] = A[i][j] + min(memo[j], 

									memo[j + 1]) 

	return memo[0]
[DONE]<|endoftext|>